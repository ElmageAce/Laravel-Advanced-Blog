/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.4.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code, options ) {
		DOMEval( code, { nonce: options && options.nonce } );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

				// Support: IE 8 only
				// Exclude object elements
				(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 && rdescend.test( selector ) ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = (elem.ownerDocument || elem).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( typeof elem.contentDocument !== "undefined" ) {
			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								} );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	// Support: IE 9-11 only
	// Also use offsetWidth/offsetHeight for when box sizing is unreliable
	// We use getClientRects() to check for hidden/disconnected.
	// In those cases, the computed value can be trusted to be border-box
	if ( ( !support.boxSizingReliable() && isBorderBox ||
		val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url, options ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./resources/js/admin/admin.js":
/*!*************************************!*\
  !*** ./resources/js/admin/admin.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../sass/admin/libs/bootstrap/js/bootstrap.bundle.min */ "./resources/sass/admin/libs/bootstrap/js/bootstrap.bundle.min.js");

__webpack_require__(/*! ../../sass/admin/libs/metismenu/metisMenu.min */ "./resources/sass/admin/libs/metismenu/metisMenu.min.js");

__webpack_require__(/*! ../../sass/admin/libs/simplebar/simplebar.min */ "./resources/sass/admin/libs/simplebar/simplebar.min.js");

__webpack_require__(/*! ../../sass/admin/libs/node-waves/waves.min */ "./resources/sass/admin/libs/node-waves/waves.min.js");

__webpack_require__(/*! ../../sass/admin/libs/air-datepicker/js/datepicker.min */ "./resources/sass/admin/libs/air-datepicker/js/datepicker.min.js");

__webpack_require__(/*! ../../sass/admin/libs/air-datepicker/js/i18n/datepicker.en */ "./resources/sass/admin/libs/air-datepicker/js/i18n/datepicker.en.js");

__webpack_require__(/*! ../../sass/admin/libs/apexcharts/apexcharts.min */ "./resources/sass/admin/libs/apexcharts/apexcharts.min.js");

__webpack_require__(/*! ../../sass/admin/libs/jquery-knob/jquery.knob.min */ "./resources/sass/admin/libs/jquery-knob/jquery.knob.min.js");

__webpack_require__(/*! ../../sass/admin/js/pages/dashboard.init */ "./resources/sass/admin/js/pages/dashboard.init.js");

__webpack_require__(/*! ../../sass/admin/js/app */ "./resources/sass/admin/js/app.js");

/***/ }),

/***/ "./resources/sass/admin/js/app.js":
/*!****************************************!*\
  !*** ./resources/sass/admin/js/app.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

!function (a) {
  "use strict";

  a("#side-menu").metisMenu(), a("#vertical-menu-btn").on("click", function (t) {
    t.preventDefault(), a("body").toggleClass("sidebar-enable"), 992 <= a(window).width() ? a("body").toggleClass("vertical-collpsed") : a("body").removeClass("vertical-collpsed");
  }), a("#sidebar-menu a").each(function () {
    var t = window.location.href.split(/[?#]/)[0];
    this.href == t && (a(this).addClass("active"), a(this).parent().addClass("mm-active"), a(this).parent().parent().addClass("mm-show"), a(this).parent().parent().prev().addClass("mm-active"), a(this).parent().parent().parent().addClass("mm-active"), a(this).parent().parent().parent().parent().addClass("mm-show"), a(this).parent().parent().parent().parent().parent().addClass("mm-active"));
  }), a(".navbar-nav a").each(function () {
    var t = window.location.href.split(/[?#]/)[0];
    this.href == t && (a(this).addClass("active"), a(this).parent().addClass("active"), a(this).parent().parent().addClass("active"), a(this).parent().parent().parent().parent().addClass("active"), a(this).parent().parent().parent().parent().parent().addClass("active"), a(this).parent().parent().parent().parent().parent().parent().addClass("active"), a(this).parent().parent().parent().parent().parent().parent().parent().addClass("active"));
  }), a(".right-bar-toggle").on("click", function (t) {
    a("body").toggleClass("right-bar-enabled");
  }), a(document).on("click", "body", function (t) {
    0 < a(t.target).closest(".right-bar-toggle, .right-bar").length || a("body").removeClass("right-bar-enabled");
  }), a(".dropdown-menu a.dropdown-toggle").on("click", function (t) {
    return a(this).next().hasClass("show") || a(this).parents(".dropdown-menu").first().find(".show").removeClass("show"), a(this).next(".dropdown-menu").toggleClass("show"), !1;
  }), a(function () {
    a('[data-toggle="tooltip"]').tooltip();
  }), a(function () {
    a('[data-toggle="popover"]').popover();
  }), Waves.init();
}(jQuery);

/***/ }),

/***/ "./resources/sass/admin/js/pages/dashboard.init.js":
/*!*********************************************************!*\
  !*** ./resources/sass/admin/js/pages/dashboard.init.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

$(function () {
  $('[data-plugin="knob"]').knob();
});
var options = {
  chart: {
    height: 350,
    type: "area",
    toolbar: {
      show: !1
    }
  },
  colors: ["#3051d3", "#e4cc37"],
  dataLabels: {
    enabled: !1
  },
  series: [{
    name: "2018",
    data: [41, 47, 32, 75, 63, 35, 42, 20, 6, 15, 27, 39]
  }, {
    name: "2019",
    data: [35, 41, 62, 45, 14, 18, 29, 57, 28, 49, 35, 27]
  }],
  grid: {
    yaxis: {
      lines: {
        show: !1
      }
    }
  },
  stroke: {
    width: 3,
    curve: "stepline"
  },
  markers: {
    size: 0
  },
  xaxis: {
    categories: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    title: {
      text: "Month"
    }
  },
  fill: {
    type: "gradient",
    gradient: {
      shadeIntensity: 1,
      opacityFrom: .7,
      opacityTo: .9,
      stops: [0, 90, 100]
    }
  },
  legend: {
    position: "top",
    horizontalAlign: "right",
    floating: !0,
    offsetY: -25,
    offsetX: -5
  }
};
(chart = new ApexCharts(document.querySelector("#yearly-sale-chart"), options)).render();
options = {
  chart: {
    height: 350,
    type: "rangeBar",
    toolbar: {
      show: !1
    }
  },
  plotOptions: {
    bar: {
      horizontal: !0,
      barHeight: "12%"
    }
  },
  series: [{
    data: [{
      x: "Jack",
      y: [new Date("2020-01-02").getTime(), new Date("2020-01-04").getTime()],
      fillColor: "#3051d3"
    }, {
      x: "Thomas",
      y: [new Date("2020-01-04").getTime(), new Date("2020-01-08").getTime()],
      fillColor: "#e4cc37"
    }, {
      x: "David",
      y: [new Date("2020-01-08").getTime(), new Date("2020-01-12").getTime()],
      fillColor: "#F06543"
    }, {
      x: "James",
      y: [new Date("2020-01-12").getTime(), new Date("2020-01-18").getTime()],
      fillColor: "#4CB944"
    }]
  }],
  xaxis: {
    type: "datetime",
    axisBorder: {
      show: !1
    }
  }
};
(chart = new ApexCharts(document.querySelector("#activity-chart"), options)).render();
var chart;
options = {
  chart: {
    height: 270,
    type: "radialBar"
  },
  plotOptions: {
    radialBar: {
      hollow: {
        margin: 5,
        size: "38%"
      },
      track: {
        margin: 12
      },
      dataLabels: {
        name: {
          fontSize: "18px",
          offsetY: "-10"
        },
        value: {
          fontSize: "16px",
          offsetY: "5"
        },
        total: {
          show: !0,
          label: "Total",
          formatter: function formatter(e) {
            return 166;
          }
        }
      }
    }
  },
  colors: ["#3051d3", "#e4cc37", "#f06543"],
  series: [44, 55, 67],
  labels: ["Facebook", "Twitter", "Instagram"]
};
(chart = new ApexCharts(document.querySelector("#radial-chart"), options)).render(), $("#usa-map").vectorMap({
  map: "usa_en",
  enableZoom: !0,
  showTooltip: !0,
  selectedColor: null,
  hoverColor: "#eaf0f1",
  backgroundColor: "transparent",
  color: "#f4f8f9",
  borderColor: "#7c8a96",
  colors: {
    ca: "#385ded",
    tx: "#385ded",
    mt: "#385ded",
    ny: "#385ded"
  },
  onRegionClick: function onRegionClick(e, t, a) {
    e.preventDefault();
  }
});

/***/ }),

/***/ "./resources/sass/admin/libs/air-datepicker/js/datepicker.min.js":
/*!***********************************************************************!*\
  !*** ./resources/sass/admin/libs/air-datepicker/js/datepicker.min.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (t, e, i) {
  !function () {
    var s,
        a,
        n,
        h = "2.2.3",
        o = "datepicker",
        r = ".datepicker-here",
        c = !1,
        d = '<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>',
        l = {
      classes: "",
      inline: !1,
      language: "ru",
      startDate: new Date(),
      firstDay: "",
      weekends: [6, 0],
      dateFormat: "",
      altField: "",
      altFieldDateFormat: "@",
      toggleSelected: !0,
      keyboardNav: !0,
      position: "bottom left",
      offset: 12,
      view: "days",
      minView: "days",
      showOtherMonths: !0,
      selectOtherMonths: !0,
      moveToOtherMonthsOnSelect: !0,
      showOtherYears: !0,
      selectOtherYears: !0,
      moveToOtherYearsOnSelect: !0,
      minDate: "",
      maxDate: "",
      disableNavWhenOutOfRange: !0,
      multipleDates: !1,
      multipleDatesSeparator: ",",
      range: !1,
      todayButton: !1,
      clearButton: !1,
      showEvent: "focus",
      autoClose: !1,
      monthsField: "monthsShort",
      prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',
      nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',
      navTitles: {
        days: "MM, <i>yyyy</i>",
        months: "yyyy",
        years: "yyyy1 - yyyy2"
      },
      timepicker: !1,
      onlyTimepicker: !1,
      dateTimeSeparator: " ",
      timeFormat: "",
      minHours: 0,
      maxHours: 24,
      minMinutes: 0,
      maxMinutes: 59,
      hoursStep: 1,
      minutesStep: 1,
      onSelect: "",
      onShow: "",
      onHide: "",
      onChangeMonth: "",
      onChangeYear: "",
      onChangeDecade: "",
      onChangeView: "",
      onRenderCell: ""
    },
        u = {
      ctrlRight: [17, 39],
      ctrlUp: [17, 38],
      ctrlLeft: [17, 37],
      ctrlDown: [17, 40],
      shiftRight: [16, 39],
      shiftUp: [16, 38],
      shiftLeft: [16, 37],
      shiftDown: [16, 40],
      altUp: [18, 38],
      altRight: [18, 39],
      altLeft: [18, 37],
      altDown: [18, 40],
      ctrlShiftUp: [16, 17, 38]
    },
        m = function m(t, a) {
      this.el = t, this.$el = e(t), this.opts = e.extend(!0, {}, l, a, this.$el.data()), s == i && (s = e("body")), this.opts.startDate || (this.opts.startDate = new Date()), "INPUT" == this.el.nodeName && (this.elIsInput = !0), this.opts.altField && (this.$altField = "string" == typeof this.opts.altField ? e(this.opts.altField) : this.opts.altField), this.inited = !1, this.visible = !1, this.silent = !1, this.currentDate = this.opts.startDate, this.currentView = this.opts.view, this._createShortCuts(), this.selectedDates = [], this.views = {}, this.keys = [], this.minRange = "", this.maxRange = "", this._prevOnSelectValue = "", this.init();
    };

    n = m, n.prototype = {
      VERSION: h,
      viewIndexes: ["days", "months", "years"],
      init: function init() {
        c || this.opts.inline || !this.elIsInput || this._buildDatepickersContainer(), this._buildBaseHtml(), this._defineLocale(this.opts.language), this._syncWithMinMaxDates(), this.elIsInput && (this.opts.inline || (this._setPositionClasses(this.opts.position), this._bindEvents()), this.opts.keyboardNav && !this.opts.onlyTimepicker && this._bindKeyboardEvents(), this.$datepicker.on("mousedown", this._onMouseDownDatepicker.bind(this)), this.$datepicker.on("mouseup", this._onMouseUpDatepicker.bind(this))), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.opts.timepicker && (this.timepicker = new e.fn.datepicker.Timepicker(this, this.opts), this._bindTimepickerEvents()), this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), this.views[this.currentView] = new e.fn.datepicker.Body(this, this.currentView, this.opts), this.views[this.currentView].show(), this.nav = new e.fn.datepicker.Navigation(this, this.opts), this.view = this.currentView, this.$el.on("clickCell.adp", this._onClickCell.bind(this)), this.$datepicker.on("mouseenter", ".datepicker--cell", this._onMouseEnterCell.bind(this)), this.$datepicker.on("mouseleave", ".datepicker--cell", this._onMouseLeaveCell.bind(this)), this.inited = !0;
      },
      _createShortCuts: function _createShortCuts() {
        this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-86399999136e5), this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(86399999136e5);
      },
      _bindEvents: function _bindEvents() {
        this.$el.on(this.opts.showEvent + ".adp", this._onShowEvent.bind(this)), this.$el.on("mouseup.adp", this._onMouseUpEl.bind(this)), this.$el.on("blur.adp", this._onBlur.bind(this)), this.$el.on("keyup.adp", this._onKeyUpGeneral.bind(this)), e(t).on("resize.adp", this._onResize.bind(this)), e("body").on("mouseup.adp", this._onMouseUpBody.bind(this));
      },
      _bindKeyboardEvents: function _bindKeyboardEvents() {
        this.$el.on("keydown.adp", this._onKeyDown.bind(this)), this.$el.on("keyup.adp", this._onKeyUp.bind(this)), this.$el.on("hotKey.adp", this._onHotKey.bind(this));
      },
      _bindTimepickerEvents: function _bindTimepickerEvents() {
        this.$el.on("timeChange.adp", this._onTimeChange.bind(this));
      },
      isWeekend: function isWeekend(t) {
        return -1 !== this.opts.weekends.indexOf(t);
      },
      _defineLocale: function _defineLocale(t) {
        "string" == typeof t ? (this.loc = e.fn.datepicker.language[t], this.loc || (console.warn("Can't find language \"" + t + '" in Datepicker.language, will use "ru" instead'), this.loc = e.extend(!0, {}, e.fn.datepicker.language.ru)), this.loc = e.extend(!0, {}, e.fn.datepicker.language.ru, e.fn.datepicker.language[t])) : this.loc = e.extend(!0, {}, e.fn.datepicker.language.ru, t), this.opts.dateFormat && (this.loc.dateFormat = this.opts.dateFormat), this.opts.timeFormat && (this.loc.timeFormat = this.opts.timeFormat), "" !== this.opts.firstDay && (this.loc.firstDay = this.opts.firstDay), this.opts.timepicker && (this.loc.dateFormat = [this.loc.dateFormat, this.loc.timeFormat].join(this.opts.dateTimeSeparator)), this.opts.onlyTimepicker && (this.loc.dateFormat = this.loc.timeFormat);
        var i = this._getWordBoundaryRegExp;
        (this.loc.timeFormat.match(i("aa")) || this.loc.timeFormat.match(i("AA"))) && (this.ampm = !0);
      },
      _buildDatepickersContainer: function _buildDatepickersContainer() {
        c = !0, s.append('<div class="datepickers-container" id="datepickers-container"></div>'), a = e("#datepickers-container");
      },
      _buildBaseHtml: function _buildBaseHtml() {
        var t,
            i = e('<div class="datepicker-inline">');
        t = "INPUT" == this.el.nodeName ? this.opts.inline ? i.insertAfter(this.$el) : a : i.appendTo(this.$el), this.$datepicker = e(d).appendTo(t), this.$content = e(".datepicker--content", this.$datepicker), this.$nav = e(".datepicker--nav", this.$datepicker);
      },
      _triggerOnChange: function _triggerOnChange() {
        if (!this.selectedDates.length) {
          if ("" === this._prevOnSelectValue) return;
          return this._prevOnSelectValue = "", this.opts.onSelect("", "", this);
        }

        var t,
            e = this.selectedDates,
            i = n.getParsedDate(e[0]),
            s = this,
            a = new Date(i.year, i.month, i.date, i.hours, i.minutes);
        t = e.map(function (t) {
          return s.formatDate(s.loc.dateFormat, t);
        }).join(this.opts.multipleDatesSeparator), (this.opts.multipleDates || this.opts.range) && (a = e.map(function (t) {
          var e = n.getParsedDate(t);
          return new Date(e.year, e.month, e.date, e.hours, e.minutes);
        })), this._prevOnSelectValue = t, this.opts.onSelect(t, a, this);
      },
      next: function next() {
        var t = this.parsedDate,
            e = this.opts;

        switch (this.view) {
          case "days":
            this.date = new Date(t.year, t.month + 1, 1), e.onChangeMonth && e.onChangeMonth(this.parsedDate.month, this.parsedDate.year);
            break;

          case "months":
            this.date = new Date(t.year + 1, t.month, 1), e.onChangeYear && e.onChangeYear(this.parsedDate.year);
            break;

          case "years":
            this.date = new Date(t.year + 10, 0, 1), e.onChangeDecade && e.onChangeDecade(this.curDecade);
        }
      },
      prev: function prev() {
        var t = this.parsedDate,
            e = this.opts;

        switch (this.view) {
          case "days":
            this.date = new Date(t.year, t.month - 1, 1), e.onChangeMonth && e.onChangeMonth(this.parsedDate.month, this.parsedDate.year);
            break;

          case "months":
            this.date = new Date(t.year - 1, t.month, 1), e.onChangeYear && e.onChangeYear(this.parsedDate.year);
            break;

          case "years":
            this.date = new Date(t.year - 10, 0, 1), e.onChangeDecade && e.onChangeDecade(this.curDecade);
        }
      },
      formatDate: function formatDate(t, e) {
        e = e || this.date;
        var i,
            s = t,
            a = this._getWordBoundaryRegExp,
            h = this.loc,
            o = n.getLeadingZeroNum,
            r = n.getDecade(e),
            c = n.getParsedDate(e),
            d = c.fullHours,
            l = c.hours,
            u = t.match(a("aa")) || t.match(a("AA")),
            m = "am",
            p = this._replacer;

        switch (this.opts.timepicker && this.timepicker && u && (i = this.timepicker._getValidHoursFromDate(e, u), d = o(i.hours), l = i.hours, m = i.dayPeriod), !0) {
          case /@/.test(s):
            s = s.replace(/@/, e.getTime());

          case /aa/.test(s):
            s = p(s, a("aa"), m);

          case /AA/.test(s):
            s = p(s, a("AA"), m.toUpperCase());

          case /dd/.test(s):
            s = p(s, a("dd"), c.fullDate);

          case /d/.test(s):
            s = p(s, a("d"), c.date);

          case /DD/.test(s):
            s = p(s, a("DD"), h.days[c.day]);

          case /D/.test(s):
            s = p(s, a("D"), h.daysShort[c.day]);

          case /mm/.test(s):
            s = p(s, a("mm"), c.fullMonth);

          case /m/.test(s):
            s = p(s, a("m"), c.month + 1);

          case /MM/.test(s):
            s = p(s, a("MM"), this.loc.months[c.month]);

          case /M/.test(s):
            s = p(s, a("M"), h.monthsShort[c.month]);

          case /ii/.test(s):
            s = p(s, a("ii"), c.fullMinutes);

          case /i/.test(s):
            s = p(s, a("i"), c.minutes);

          case /hh/.test(s):
            s = p(s, a("hh"), d);

          case /h/.test(s):
            s = p(s, a("h"), l);

          case /yyyy/.test(s):
            s = p(s, a("yyyy"), c.year);

          case /yyyy1/.test(s):
            s = p(s, a("yyyy1"), r[0]);

          case /yyyy2/.test(s):
            s = p(s, a("yyyy2"), r[1]);

          case /yy/.test(s):
            s = p(s, a("yy"), c.year.toString().slice(-2));
        }

        return s;
      },
      _replacer: function _replacer(t, e, i) {
        return t.replace(e, function (t, e, s, a) {
          return e + i + a;
        });
      },
      _getWordBoundaryRegExp: function _getWordBoundaryRegExp(t) {
        var e = "\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";
        return new RegExp("(^|>|" + e + ")(" + t + ")($|<|" + e + ")", "g");
      },
      selectDate: function selectDate(t) {
        var e = this,
            i = e.opts,
            s = e.parsedDate,
            a = e.selectedDates,
            h = a.length,
            o = "";
        if (Array.isArray(t)) return void t.forEach(function (t) {
          e.selectDate(t);
        });

        if (t instanceof Date) {
          if (this.lastSelectedDate = t, this.timepicker && this.timepicker._setTime(t), e._trigger("selectDate", t), this.timepicker && (t.setHours(this.timepicker.hours), t.setMinutes(this.timepicker.minutes)), "days" == e.view && t.getMonth() != s.month && i.moveToOtherMonthsOnSelect && (o = new Date(t.getFullYear(), t.getMonth(), 1)), "years" == e.view && t.getFullYear() != s.year && i.moveToOtherYearsOnSelect && (o = new Date(t.getFullYear(), 0, 1)), o && (e.silent = !0, e.date = o, e.silent = !1, e.nav._render()), i.multipleDates && !i.range) {
            if (h === i.multipleDates) return;
            e._isSelected(t) || e.selectedDates.push(t);
          } else i.range ? 2 == h ? (e.selectedDates = [t], e.minRange = t, e.maxRange = "") : 1 == h ? (e.selectedDates.push(t), e.maxRange ? e.minRange = t : e.maxRange = t, n.bigger(e.maxRange, e.minRange) && (e.maxRange = e.minRange, e.minRange = t), e.selectedDates = [e.minRange, e.maxRange]) : (e.selectedDates = [t], e.minRange = t) : e.selectedDates = [t];

          e._setInputValue(), i.onSelect && e._triggerOnChange(), i.autoClose && !this.timepickerIsActive && (i.multipleDates || i.range ? i.range && 2 == e.selectedDates.length && e.hide() : e.hide()), e.views[this.currentView]._render();
        }
      },
      removeDate: function removeDate(t) {
        var e = this.selectedDates,
            i = this;
        if (t instanceof Date) return e.some(function (s, a) {
          return n.isSame(s, t) ? (e.splice(a, 1), i.selectedDates.length ? i.lastSelectedDate = i.selectedDates[i.selectedDates.length - 1] : (i.minRange = "", i.maxRange = "", i.lastSelectedDate = ""), i.views[i.currentView]._render(), i._setInputValue(), i.opts.onSelect && i._triggerOnChange(), !0) : void 0;
        });
      },
      today: function today() {
        this.silent = !0, this.view = this.opts.minView, this.silent = !1, this.date = new Date(), this.opts.todayButton instanceof Date && this.selectDate(this.opts.todayButton);
      },
      clear: function clear() {
        this.selectedDates = [], this.minRange = "", this.maxRange = "", this.views[this.currentView]._render(), this._setInputValue(), this.opts.onSelect && this._triggerOnChange();
      },
      update: function update(t, i) {
        var s = arguments.length,
            a = this.lastSelectedDate;
        return 2 == s ? this.opts[t] = i : 1 == s && "object" == _typeof(t) && (this.opts = e.extend(!0, this.opts, t)), this._createShortCuts(), this._syncWithMinMaxDates(), this._defineLocale(this.opts.language), this.nav._addButtonsIfNeed(), this.opts.onlyTimepicker || this.nav._render(), this.views[this.currentView]._render(), this.elIsInput && !this.opts.inline && (this._setPositionClasses(this.opts.position), this.visible && this.setPosition(this.opts.position)), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), this.opts.timepicker && (a && this.timepicker._handleDate(a), this.timepicker._updateRanges(), this.timepicker._updateCurrentTime(), a && (a.setHours(this.timepicker.hours), a.setMinutes(this.timepicker.minutes))), this._setInputValue(), this;
      },
      _syncWithMinMaxDates: function _syncWithMinMaxDates() {
        var t = this.date.getTime();
        this.silent = !0, this.minTime > t && (this.date = this.minDate), this.maxTime < t && (this.date = this.maxDate), this.silent = !1;
      },
      _isSelected: function _isSelected(t, e) {
        var i = !1;
        return this.selectedDates.some(function (s) {
          return n.isSame(s, t, e) ? (i = s, !0) : void 0;
        }), i;
      },
      _setInputValue: function _setInputValue() {
        var t,
            e = this,
            i = e.opts,
            s = e.loc.dateFormat,
            a = i.altFieldDateFormat,
            n = e.selectedDates.map(function (t) {
          return e.formatDate(s, t);
        });
        i.altField && e.$altField.length && (t = this.selectedDates.map(function (t) {
          return e.formatDate(a, t);
        }), t = t.join(this.opts.multipleDatesSeparator), this.$altField.val(t)), n = n.join(this.opts.multipleDatesSeparator), this.$el.val(n);
      },
      _isInRange: function _isInRange(t, e) {
        var i = t.getTime(),
            s = n.getParsedDate(t),
            a = n.getParsedDate(this.minDate),
            h = n.getParsedDate(this.maxDate),
            o = new Date(s.year, s.month, a.date).getTime(),
            r = new Date(s.year, s.month, h.date).getTime(),
            c = {
          day: i >= this.minTime && i <= this.maxTime,
          month: o >= this.minTime && r <= this.maxTime,
          year: s.year >= a.year && s.year <= h.year
        };
        return e ? c[e] : c.day;
      },
      _getDimensions: function _getDimensions(t) {
        var e = t.offset();
        return {
          width: t.outerWidth(),
          height: t.outerHeight(),
          left: e.left,
          top: e.top
        };
      },
      _getDateFromCell: function _getDateFromCell(t) {
        var e = this.parsedDate,
            s = t.data("year") || e.year,
            a = t.data("month") == i ? e.month : t.data("month"),
            n = t.data("date") || 1;
        return new Date(s, a, n);
      },
      _setPositionClasses: function _setPositionClasses(t) {
        t = t.split(" ");
        var e = t[0],
            i = t[1],
            s = "datepicker -" + e + "-" + i + "- -from-" + e + "-";
        this.visible && (s += " active"), this.$datepicker.removeAttr("class").addClass(s);
      },
      setPosition: function setPosition(t) {
        t = t || this.opts.position;

        var e,
            i,
            s = this._getDimensions(this.$el),
            a = this._getDimensions(this.$datepicker),
            n = t.split(" "),
            h = this.opts.offset,
            o = n[0],
            r = n[1];

        switch (o) {
          case "top":
            e = s.top - a.height - h;
            break;

          case "right":
            i = s.left + s.width + h;
            break;

          case "bottom":
            e = s.top + s.height + h;
            break;

          case "left":
            i = s.left - a.width - h;
        }

        switch (r) {
          case "top":
            e = s.top;
            break;

          case "right":
            i = s.left + s.width - a.width;
            break;

          case "bottom":
            e = s.top + s.height - a.height;
            break;

          case "left":
            i = s.left;
            break;

          case "center":
            /left|right/.test(o) ? e = s.top + s.height / 2 - a.height / 2 : i = s.left + s.width / 2 - a.width / 2;
        }

        this.$datepicker.css({
          left: i,
          top: e
        });
      },
      show: function show() {
        var t = this.opts.onShow;
        this.setPosition(this.opts.position), this.$datepicker.addClass("active"), this.visible = !0, t && this._bindVisionEvents(t);
      },
      hide: function hide() {
        var t = this.opts.onHide;
        this.$datepicker.removeClass("active").css({
          left: "-100000px"
        }), this.focused = "", this.keys = [], this.inFocus = !1, this.visible = !1, this.$el.blur(), t && this._bindVisionEvents(t);
      },
      down: function down(t) {
        this._changeView(t, "down");
      },
      up: function up(t) {
        this._changeView(t, "up");
      },
      _bindVisionEvents: function _bindVisionEvents(t) {
        this.$datepicker.off("transitionend.dp"), t(this, !1), this.$datepicker.one("transitionend.dp", t.bind(this, this, !0));
      },
      _changeView: function _changeView(t, e) {
        t = t || this.focused || this.date;
        var i = "up" == e ? this.viewIndex + 1 : this.viewIndex - 1;
        i > 2 && (i = 2), 0 > i && (i = 0), this.silent = !0, this.date = new Date(t.getFullYear(), t.getMonth(), 1), this.silent = !1, this.view = this.viewIndexes[i];
      },
      _handleHotKey: function _handleHotKey(t) {
        var e,
            i,
            s,
            a = n.getParsedDate(this._getFocusedDate()),
            h = this.opts,
            o = !1,
            r = !1,
            c = !1,
            d = a.year,
            l = a.month,
            u = a.date;

        switch (t) {
          case "ctrlRight":
          case "ctrlUp":
            l += 1, o = !0;
            break;

          case "ctrlLeft":
          case "ctrlDown":
            l -= 1, o = !0;
            break;

          case "shiftRight":
          case "shiftUp":
            r = !0, d += 1;
            break;

          case "shiftLeft":
          case "shiftDown":
            r = !0, d -= 1;
            break;

          case "altRight":
          case "altUp":
            c = !0, d += 10;
            break;

          case "altLeft":
          case "altDown":
            c = !0, d -= 10;
            break;

          case "ctrlShiftUp":
            this.up();
        }

        s = n.getDaysCount(new Date(d, l)), i = new Date(d, l, u), u > s && (u = s), i.getTime() < this.minTime ? i = this.minDate : i.getTime() > this.maxTime && (i = this.maxDate), this.focused = i, e = n.getParsedDate(i), o && h.onChangeMonth && h.onChangeMonth(e.month, e.year), r && h.onChangeYear && h.onChangeYear(e.year), c && h.onChangeDecade && h.onChangeDecade(this.curDecade);
      },
      _registerKey: function _registerKey(t) {
        var e = this.keys.some(function (e) {
          return e == t;
        });
        e || this.keys.push(t);
      },
      _unRegisterKey: function _unRegisterKey(t) {
        var e = this.keys.indexOf(t);
        this.keys.splice(e, 1);
      },
      _isHotKeyPressed: function _isHotKeyPressed() {
        var t,
            e = !1,
            i = this,
            s = this.keys.sort();

        for (var a in u) {
          t = u[a], s.length == t.length && t.every(function (t, e) {
            return t == s[e];
          }) && (i._trigger("hotKey", a), e = !0);
        }

        return e;
      },
      _trigger: function _trigger(t, e) {
        this.$el.trigger(t, e);
      },
      _focusNextCell: function _focusNextCell(t, e) {
        e = e || this.cellType;
        var i = n.getParsedDate(this._getFocusedDate()),
            s = i.year,
            a = i.month,
            h = i.date;

        if (!this._isHotKeyPressed()) {
          switch (t) {
            case 37:
              "day" == e ? h -= 1 : "", "month" == e ? a -= 1 : "", "year" == e ? s -= 1 : "";
              break;

            case 38:
              "day" == e ? h -= 7 : "", "month" == e ? a -= 3 : "", "year" == e ? s -= 4 : "";
              break;

            case 39:
              "day" == e ? h += 1 : "", "month" == e ? a += 1 : "", "year" == e ? s += 1 : "";
              break;

            case 40:
              "day" == e ? h += 7 : "", "month" == e ? a += 3 : "", "year" == e ? s += 4 : "";
          }

          var o = new Date(s, a, h);
          o.getTime() < this.minTime ? o = this.minDate : o.getTime() > this.maxTime && (o = this.maxDate), this.focused = o;
        }
      },
      _getFocusedDate: function _getFocusedDate() {
        var t = this.focused || this.selectedDates[this.selectedDates.length - 1],
            e = this.parsedDate;
        if (!t) switch (this.view) {
          case "days":
            t = new Date(e.year, e.month, new Date().getDate());
            break;

          case "months":
            t = new Date(e.year, e.month, 1);
            break;

          case "years":
            t = new Date(e.year, 0, 1);
        }
        return t;
      },
      _getCell: function _getCell(t, i) {
        i = i || this.cellType;
        var s,
            a = n.getParsedDate(t),
            h = '.datepicker--cell[data-year="' + a.year + '"]';

        switch (i) {
          case "month":
            h = '[data-month="' + a.month + '"]';
            break;

          case "day":
            h += '[data-month="' + a.month + '"][data-date="' + a.date + '"]';
        }

        return s = this.views[this.currentView].$el.find(h), s.length ? s : e("");
      },
      destroy: function destroy() {
        var t = this;
        t.$el.off(".adp").data("datepicker", ""), t.selectedDates = [], t.focused = "", t.views = {}, t.keys = [], t.minRange = "", t.maxRange = "", t.opts.inline || !t.elIsInput ? t.$datepicker.closest(".datepicker-inline").remove() : t.$datepicker.remove();
      },
      _handleAlreadySelectedDates: function _handleAlreadySelectedDates(t, e) {
        this.opts.range ? this.opts.toggleSelected ? this.removeDate(e) : 2 != this.selectedDates.length && this._trigger("clickCell", e) : this.opts.toggleSelected && this.removeDate(e), this.opts.toggleSelected || (this.lastSelectedDate = t, this.opts.timepicker && (this.timepicker._setTime(t), this.timepicker.update()));
      },
      _onShowEvent: function _onShowEvent(t) {
        this.visible || this.show();
      },
      _onBlur: function _onBlur() {
        !this.inFocus && this.visible && this.hide();
      },
      _onMouseDownDatepicker: function _onMouseDownDatepicker(t) {
        this.inFocus = !0;
      },
      _onMouseUpDatepicker: function _onMouseUpDatepicker(t) {
        this.inFocus = !1, t.originalEvent.inFocus = !0, t.originalEvent.timepickerFocus || this.$el.focus();
      },
      _onKeyUpGeneral: function _onKeyUpGeneral(t) {
        var e = this.$el.val();
        e || this.clear();
      },
      _onResize: function _onResize() {
        this.visible && this.setPosition();
      },
      _onMouseUpBody: function _onMouseUpBody(t) {
        t.originalEvent.inFocus || this.visible && !this.inFocus && this.hide();
      },
      _onMouseUpEl: function _onMouseUpEl(t) {
        t.originalEvent.inFocus = !0, setTimeout(this._onKeyUpGeneral.bind(this), 4);
      },
      _onKeyDown: function _onKeyDown(t) {
        var e = t.which;

        if (this._registerKey(e), e >= 37 && 40 >= e && (t.preventDefault(), this._focusNextCell(e)), 13 == e && this.focused) {
          if (this._getCell(this.focused).hasClass("-disabled-")) return;
          if (this.view != this.opts.minView) this.down();else {
            var i = this._isSelected(this.focused, this.cellType);

            if (!i) return this.timepicker && (this.focused.setHours(this.timepicker.hours), this.focused.setMinutes(this.timepicker.minutes)), void this.selectDate(this.focused);

            this._handleAlreadySelectedDates(i, this.focused);
          }
        }

        27 == e && this.hide();
      },
      _onKeyUp: function _onKeyUp(t) {
        var e = t.which;

        this._unRegisterKey(e);
      },
      _onHotKey: function _onHotKey(t, e) {
        this._handleHotKey(e);
      },
      _onMouseEnterCell: function _onMouseEnterCell(t) {
        var i = e(t.target).closest(".datepicker--cell"),
            s = this._getDateFromCell(i);

        this.silent = !0, this.focused && (this.focused = ""), i.addClass("-focus-"), this.focused = s, this.silent = !1, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", n.less(this.minRange, this.focused) && (this.maxRange = this.minRange, this.minRange = ""), this.views[this.currentView]._update());
      },
      _onMouseLeaveCell: function _onMouseLeaveCell(t) {
        var i = e(t.target).closest(".datepicker--cell");
        i.removeClass("-focus-"), this.silent = !0, this.focused = "", this.silent = !1;
      },
      _onTimeChange: function _onTimeChange(t, e, i) {
        var s = new Date(),
            a = this.selectedDates,
            n = !1;
        a.length && (n = !0, s = this.lastSelectedDate), s.setHours(e), s.setMinutes(i), n || this._getCell(s).hasClass("-disabled-") ? (this._setInputValue(), this.opts.onSelect && this._triggerOnChange()) : this.selectDate(s);
      },
      _onClickCell: function _onClickCell(t, e) {
        this.timepicker && (e.setHours(this.timepicker.hours), e.setMinutes(this.timepicker.minutes)), this.selectDate(e);
      },

      set focused(t) {
        if (!t && this.focused) {
          var e = this._getCell(this.focused);

          e.length && e.removeClass("-focus-");
        }

        this._focused = t, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", n.less(this.minRange, this._focused) && (this.maxRange = this.minRange, this.minRange = "")), this.silent || (this.date = t);
      },

      get focused() {
        return this._focused;
      },

      get parsedDate() {
        return n.getParsedDate(this.date);
      },

      set date(t) {
        return t instanceof Date ? (this.currentDate = t, this.inited && !this.silent && (this.views[this.view]._render(), this.nav._render(), this.visible && this.elIsInput && this.setPosition()), t) : void 0;
      },

      get date() {
        return this.currentDate;
      },

      set view(t) {
        return this.viewIndex = this.viewIndexes.indexOf(t), this.viewIndex < 0 ? void 0 : (this.prevView = this.currentView, this.currentView = t, this.inited && (this.views[t] ? this.views[t]._render() : this.views[t] = new e.fn.datepicker.Body(this, t, this.opts), this.views[this.prevView].hide(), this.views[t].show(), this.nav._render(), this.opts.onChangeView && this.opts.onChangeView(t), this.elIsInput && this.visible && this.setPosition()), t);
      },

      get view() {
        return this.currentView;
      },

      get cellType() {
        return this.view.substring(0, this.view.length - 1);
      },

      get minTime() {
        var t = n.getParsedDate(this.minDate);
        return new Date(t.year, t.month, t.date).getTime();
      },

      get maxTime() {
        var t = n.getParsedDate(this.maxDate);
        return new Date(t.year, t.month, t.date).getTime();
      },

      get curDecade() {
        return n.getDecade(this.date);
      }

    }, n.getDaysCount = function (t) {
      return new Date(t.getFullYear(), t.getMonth() + 1, 0).getDate();
    }, n.getParsedDate = function (t) {
      return {
        year: t.getFullYear(),
        month: t.getMonth(),
        fullMonth: t.getMonth() + 1 < 10 ? "0" + (t.getMonth() + 1) : t.getMonth() + 1,
        date: t.getDate(),
        fullDate: t.getDate() < 10 ? "0" + t.getDate() : t.getDate(),
        day: t.getDay(),
        hours: t.getHours(),
        fullHours: t.getHours() < 10 ? "0" + t.getHours() : t.getHours(),
        minutes: t.getMinutes(),
        fullMinutes: t.getMinutes() < 10 ? "0" + t.getMinutes() : t.getMinutes()
      };
    }, n.getDecade = function (t) {
      var e = 10 * Math.floor(t.getFullYear() / 10);
      return [e, e + 9];
    }, n.template = function (t, e) {
      return t.replace(/#\{([\w]+)\}/g, function (t, i) {
        return e[i] || 0 === e[i] ? e[i] : void 0;
      });
    }, n.isSame = function (t, e, i) {
      if (!t || !e) return !1;
      var s = n.getParsedDate(t),
          a = n.getParsedDate(e),
          h = i ? i : "day",
          o = {
        day: s.date == a.date && s.month == a.month && s.year == a.year,
        month: s.month == a.month && s.year == a.year,
        year: s.year == a.year
      };
      return o[h];
    }, n.less = function (t, e, i) {
      return t && e ? e.getTime() < t.getTime() : !1;
    }, n.bigger = function (t, e, i) {
      return t && e ? e.getTime() > t.getTime() : !1;
    }, n.getLeadingZeroNum = function (t) {
      return parseInt(t) < 10 ? "0" + t : t;
    }, n.resetTime = function (t) {
      return "object" == _typeof(t) ? (t = n.getParsedDate(t), new Date(t.year, t.month, t.date)) : void 0;
    }, e.fn.datepicker = function (t) {
      return this.each(function () {
        if (e.data(this, o)) {
          var i = e.data(this, o);
          i.opts = e.extend(!0, i.opts, t), i.update();
        } else e.data(this, o, new m(this, t));
      });
    }, e.fn.datepicker.Constructor = m, e.fn.datepicker.language = {
      ru: {
        days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
        daysShort: ["Вос", "Пон", "Вто", "Сре", "Чет", "Пят", "Суб"],
        daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
        months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        today: "Сегодня",
        clear: "Очистить",
        dateFormat: "dd.mm.yyyy",
        timeFormat: "hh:ii",
        firstDay: 1
      }
    }, e(function () {
      e(r).datepicker();
    });
  }(), function () {
    var t = {
      days: '<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',
      months: '<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',
      years: '<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'
    },
        s = e.fn.datepicker,
        a = s.Constructor;
    s.Body = function (t, i, s) {
      this.d = t, this.type = i, this.opts = s, this.$el = e(""), this.opts.onlyTimepicker || this.init();
    }, s.Body.prototype = {
      init: function init() {
        this._buildBaseHtml(), this._render(), this._bindEvents();
      },
      _bindEvents: function _bindEvents() {
        this.$el.on("click", ".datepicker--cell", e.proxy(this._onClickCell, this));
      },
      _buildBaseHtml: function _buildBaseHtml() {
        this.$el = e(t[this.type]).appendTo(this.d.$content), this.$names = e(".datepicker--days-names", this.$el), this.$cells = e(".datepicker--cells", this.$el);
      },
      _getDayNamesHtml: function _getDayNamesHtml(t, e, s, a) {
        return e = e != i ? e : t, s = s ? s : "", a = a != i ? a : 0, a > 7 ? s : 7 == e ? this._getDayNamesHtml(t, 0, s, ++a) : (s += '<div class="datepicker--day-name' + (this.d.isWeekend(e) ? " -weekend-" : "") + '">' + this.d.loc.daysMin[e] + "</div>", this._getDayNamesHtml(t, ++e, s, ++a));
      },
      _getCellContents: function _getCellContents(t, e) {
        var i = "datepicker--cell datepicker--cell-" + e,
            s = new Date(),
            n = this.d,
            h = a.resetTime(n.minRange),
            o = a.resetTime(n.maxRange),
            r = n.opts,
            c = a.getParsedDate(t),
            d = {},
            l = c.date;

        switch (e) {
          case "day":
            n.isWeekend(c.day) && (i += " -weekend-"), c.month != this.d.parsedDate.month && (i += " -other-month-", r.selectOtherMonths || (i += " -disabled-"), r.showOtherMonths || (l = ""));
            break;

          case "month":
            l = n.loc[n.opts.monthsField][c.month];
            break;

          case "year":
            var u = n.curDecade;
            l = c.year, (c.year < u[0] || c.year > u[1]) && (i += " -other-decade-", r.selectOtherYears || (i += " -disabled-"), r.showOtherYears || (l = ""));
        }

        return r.onRenderCell && (d = r.onRenderCell(t, e) || {}, l = d.html ? d.html : l, i += d.classes ? " " + d.classes : ""), r.range && (a.isSame(h, t, e) && (i += " -range-from-"), a.isSame(o, t, e) && (i += " -range-to-"), 1 == n.selectedDates.length && n.focused ? ((a.bigger(h, t) && a.less(n.focused, t) || a.less(o, t) && a.bigger(n.focused, t)) && (i += " -in-range-"), a.less(o, t) && a.isSame(n.focused, t) && (i += " -range-from-"), a.bigger(h, t) && a.isSame(n.focused, t) && (i += " -range-to-")) : 2 == n.selectedDates.length && a.bigger(h, t) && a.less(o, t) && (i += " -in-range-")), a.isSame(s, t, e) && (i += " -current-"), n.focused && a.isSame(t, n.focused, e) && (i += " -focus-"), n._isSelected(t, e) && (i += " -selected-"), (!n._isInRange(t, e) || d.disabled) && (i += " -disabled-"), {
          html: l,
          classes: i
        };
      },
      _getDaysHtml: function _getDaysHtml(t) {
        var e = a.getDaysCount(t),
            i = new Date(t.getFullYear(), t.getMonth(), 1).getDay(),
            s = new Date(t.getFullYear(), t.getMonth(), e).getDay(),
            n = i - this.d.loc.firstDay,
            h = 6 - s + this.d.loc.firstDay;
        n = 0 > n ? n + 7 : n, h = h > 6 ? h - 7 : h;

        for (var o, r, c = -n + 1, d = "", l = c, u = e + h; u >= l; l++) {
          r = t.getFullYear(), o = t.getMonth(), d += this._getDayHtml(new Date(r, o, l));
        }

        return d;
      },
      _getDayHtml: function _getDayHtml(t) {
        var e = this._getCellContents(t, "day");

        return '<div class="' + e.classes + '" data-date="' + t.getDate() + '" data-month="' + t.getMonth() + '" data-year="' + t.getFullYear() + '">' + e.html + "</div>";
      },
      _getMonthsHtml: function _getMonthsHtml(t) {
        for (var e = "", i = a.getParsedDate(t), s = 0; 12 > s;) {
          e += this._getMonthHtml(new Date(i.year, s)), s++;
        }

        return e;
      },
      _getMonthHtml: function _getMonthHtml(t) {
        var e = this._getCellContents(t, "month");

        return '<div class="' + e.classes + '" data-month="' + t.getMonth() + '">' + e.html + "</div>";
      },
      _getYearsHtml: function _getYearsHtml(t) {
        var e = (a.getParsedDate(t), a.getDecade(t)),
            i = e[0] - 1,
            s = "",
            n = i;

        for (n; n <= e[1] + 1; n++) {
          s += this._getYearHtml(new Date(n, 0));
        }

        return s;
      },
      _getYearHtml: function _getYearHtml(t) {
        var e = this._getCellContents(t, "year");

        return '<div class="' + e.classes + '" data-year="' + t.getFullYear() + '">' + e.html + "</div>";
      },
      _renderTypes: {
        days: function days() {
          var t = this._getDayNamesHtml(this.d.loc.firstDay),
              e = this._getDaysHtml(this.d.currentDate);

          this.$cells.html(e), this.$names.html(t);
        },
        months: function months() {
          var t = this._getMonthsHtml(this.d.currentDate);

          this.$cells.html(t);
        },
        years: function years() {
          var t = this._getYearsHtml(this.d.currentDate);

          this.$cells.html(t);
        }
      },
      _render: function _render() {
        this.opts.onlyTimepicker || this._renderTypes[this.type].bind(this)();
      },
      _update: function _update() {
        var t,
            i,
            s,
            a = e(".datepicker--cell", this.$cells),
            n = this;
        a.each(function (a, h) {
          i = e(this), s = n.d._getDateFromCell(e(this)), t = n._getCellContents(s, n.d.cellType), i.attr("class", t.classes);
        });
      },
      show: function show() {
        this.opts.onlyTimepicker || (this.$el.addClass("active"), this.acitve = !0);
      },
      hide: function hide() {
        this.$el.removeClass("active"), this.active = !1;
      },
      _handleClick: function _handleClick(t) {
        var e = t.data("date") || 1,
            i = t.data("month") || 0,
            s = t.data("year") || this.d.parsedDate.year,
            a = this.d;
        if (a.view != this.opts.minView) return void a.down(new Date(s, i, e));

        var n = new Date(s, i, e),
            h = this.d._isSelected(n, this.d.cellType);

        return h ? void a._handleAlreadySelectedDates.bind(a, h, n)() : void a._trigger("clickCell", n);
      },
      _onClickCell: function _onClickCell(t) {
        var i = e(t.target).closest(".datepicker--cell");
        i.hasClass("-disabled-") || this._handleClick.bind(this)(i);
      }
    };
  }(), function () {
    var t = '<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',
        i = '<div class="datepicker--buttons"></div>',
        s = '<span class="datepicker--button" data-action="#{action}">#{label}</span>',
        a = e.fn.datepicker,
        n = a.Constructor;
    a.Navigation = function (t, e) {
      this.d = t, this.opts = e, this.$buttonsContainer = "", this.init();
    }, a.Navigation.prototype = {
      init: function init() {
        this._buildBaseHtml(), this._bindEvents();
      },
      _bindEvents: function _bindEvents() {
        this.d.$nav.on("click", ".datepicker--nav-action", e.proxy(this._onClickNavButton, this)), this.d.$nav.on("click", ".datepicker--nav-title", e.proxy(this._onClickNavTitle, this)), this.d.$datepicker.on("click", ".datepicker--button", e.proxy(this._onClickNavButton, this));
      },
      _buildBaseHtml: function _buildBaseHtml() {
        this.opts.onlyTimepicker || this._render(), this._addButtonsIfNeed();
      },
      _addButtonsIfNeed: function _addButtonsIfNeed() {
        this.opts.todayButton && this._addButton("today"), this.opts.clearButton && this._addButton("clear");
      },
      _render: function _render() {
        var i = this._getTitle(this.d.currentDate),
            s = n.template(t, e.extend({
          title: i
        }, this.opts));

        this.d.$nav.html(s), "years" == this.d.view && e(".datepicker--nav-title", this.d.$nav).addClass("-disabled-"), this.setNavStatus();
      },
      _getTitle: function _getTitle(t) {
        return this.d.formatDate(this.opts.navTitles[this.d.view], t);
      },
      _addButton: function _addButton(t) {
        this.$buttonsContainer.length || this._addButtonsContainer();
        var i = {
          action: t,
          label: this.d.loc[t]
        },
            a = n.template(s, i);
        e("[data-action=" + t + "]", this.$buttonsContainer).length || this.$buttonsContainer.append(a);
      },
      _addButtonsContainer: function _addButtonsContainer() {
        this.d.$datepicker.append(i), this.$buttonsContainer = e(".datepicker--buttons", this.d.$datepicker);
      },
      setNavStatus: function setNavStatus() {
        if ((this.opts.minDate || this.opts.maxDate) && this.opts.disableNavWhenOutOfRange) {
          var t = this.d.parsedDate,
              e = t.month,
              i = t.year,
              s = t.date;

          switch (this.d.view) {
            case "days":
              this.d._isInRange(new Date(i, e - 1, 1), "month") || this._disableNav("prev"), this.d._isInRange(new Date(i, e + 1, 1), "month") || this._disableNav("next");
              break;

            case "months":
              this.d._isInRange(new Date(i - 1, e, s), "year") || this._disableNav("prev"), this.d._isInRange(new Date(i + 1, e, s), "year") || this._disableNav("next");
              break;

            case "years":
              var a = n.getDecade(this.d.date);
              this.d._isInRange(new Date(a[0] - 1, 0, 1), "year") || this._disableNav("prev"), this.d._isInRange(new Date(a[1] + 1, 0, 1), "year") || this._disableNav("next");
          }
        }
      },
      _disableNav: function _disableNav(t) {
        e('[data-action="' + t + '"]', this.d.$nav).addClass("-disabled-");
      },
      _activateNav: function _activateNav(t) {
        e('[data-action="' + t + '"]', this.d.$nav).removeClass("-disabled-");
      },
      _onClickNavButton: function _onClickNavButton(t) {
        var i = e(t.target).closest("[data-action]"),
            s = i.data("action");
        this.d[s]();
      },
      _onClickNavTitle: function _onClickNavTitle(t) {
        return e(t.target).hasClass("-disabled-") ? void 0 : "days" == this.d.view ? this.d.view = "months" : void (this.d.view = "years");
      }
    };
  }(), function () {
    var t = '<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',
        i = e.fn.datepicker,
        s = i.Constructor;
    i.Timepicker = function (t, e) {
      this.d = t, this.opts = e, this.init();
    }, i.Timepicker.prototype = {
      init: function init() {
        var t = "input";
        this._setTime(this.d.date), this._buildHTML(), navigator.userAgent.match(/trident/gi) && (t = "change"), this.d.$el.on("selectDate", this._onSelectDate.bind(this)), this.$ranges.on(t, this._onChangeRange.bind(this)), this.$ranges.on("mouseup", this._onMouseUpRange.bind(this)), this.$ranges.on("mousemove focus ", this._onMouseEnterRange.bind(this)), this.$ranges.on("mouseout blur", this._onMouseOutRange.bind(this));
      },
      _setTime: function _setTime(t) {
        var e = s.getParsedDate(t);
        this._handleDate(t), this.hours = e.hours < this.minHours ? this.minHours : e.hours, this.minutes = e.minutes < this.minMinutes ? this.minMinutes : e.minutes;
      },
      _setMinTimeFromDate: function _setMinTimeFromDate(t) {
        this.minHours = t.getHours(), this.minMinutes = t.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() > t.getHours() && (this.minMinutes = this.opts.minMinutes);
      },
      _setMaxTimeFromDate: function _setMaxTimeFromDate(t) {
        this.maxHours = t.getHours(), this.maxMinutes = t.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() < t.getHours() && (this.maxMinutes = this.opts.maxMinutes);
      },
      _setDefaultMinMaxTime: function _setDefaultMinMaxTime() {
        var t = 23,
            e = 59,
            i = this.opts;
        this.minHours = i.minHours < 0 || i.minHours > t ? 0 : i.minHours, this.minMinutes = i.minMinutes < 0 || i.minMinutes > e ? 0 : i.minMinutes, this.maxHours = i.maxHours < 0 || i.maxHours > t ? t : i.maxHours, this.maxMinutes = i.maxMinutes < 0 || i.maxMinutes > e ? e : i.maxMinutes;
      },
      _validateHoursMinutes: function _validateHoursMinutes(t) {
        this.hours < this.minHours ? this.hours = this.minHours : this.hours > this.maxHours && (this.hours = this.maxHours), this.minutes < this.minMinutes ? this.minutes = this.minMinutes : this.minutes > this.maxMinutes && (this.minutes = this.maxMinutes);
      },
      _buildHTML: function _buildHTML() {
        var i = s.getLeadingZeroNum,
            a = {
          hourMin: this.minHours,
          hourMax: i(this.maxHours),
          hourStep: this.opts.hoursStep,
          hourValue: this.hours,
          hourVisible: i(this.displayHours),
          minMin: this.minMinutes,
          minMax: i(this.maxMinutes),
          minStep: this.opts.minutesStep,
          minValue: i(this.minutes)
        },
            n = s.template(t, a);
        this.$timepicker = e(n).appendTo(this.d.$datepicker), this.$ranges = e('[type="range"]', this.$timepicker), this.$hours = e('[name="hours"]', this.$timepicker), this.$minutes = e('[name="minutes"]', this.$timepicker), this.$hoursText = e(".datepicker--time-current-hours", this.$timepicker), this.$minutesText = e(".datepicker--time-current-minutes", this.$timepicker), this.d.ampm && (this.$ampm = e('<span class="datepicker--time-current-ampm">').appendTo(e(".datepicker--time-current", this.$timepicker)).html(this.dayPeriod), this.$timepicker.addClass("-am-pm-"));
      },
      _updateCurrentTime: function _updateCurrentTime() {
        var t = s.getLeadingZeroNum(this.displayHours),
            e = s.getLeadingZeroNum(this.minutes);
        this.$hoursText.html(t), this.$minutesText.html(e), this.d.ampm && this.$ampm.html(this.dayPeriod);
      },
      _updateRanges: function _updateRanges() {
        this.$hours.attr({
          min: this.minHours,
          max: this.maxHours
        }).val(this.hours), this.$minutes.attr({
          min: this.minMinutes,
          max: this.maxMinutes
        }).val(this.minutes);
      },
      _handleDate: function _handleDate(t) {
        this._setDefaultMinMaxTime(), t && (s.isSame(t, this.d.opts.minDate) ? this._setMinTimeFromDate(this.d.opts.minDate) : s.isSame(t, this.d.opts.maxDate) && this._setMaxTimeFromDate(this.d.opts.maxDate)), this._validateHoursMinutes(t);
      },
      update: function update() {
        this._updateRanges(), this._updateCurrentTime();
      },
      _getValidHoursFromDate: function _getValidHoursFromDate(t, e) {
        var i = t,
            a = t;
        t instanceof Date && (i = s.getParsedDate(t), a = i.hours);
        var n = e || this.d.ampm,
            h = "am";
        if (n) switch (!0) {
          case 0 == a:
            a = 12;
            break;

          case 12 == a:
            h = "pm";
            break;

          case a > 11:
            a -= 12, h = "pm";
        }
        return {
          hours: a,
          dayPeriod: h
        };
      },

      set hours(t) {
        this._hours = t;

        var e = this._getValidHoursFromDate(t);

        this.displayHours = e.hours, this.dayPeriod = e.dayPeriod;
      },

      get hours() {
        return this._hours;
      },

      _onChangeRange: function _onChangeRange(t) {
        var i = e(t.target),
            s = i.attr("name");
        this.d.timepickerIsActive = !0, this[s] = i.val(), this._updateCurrentTime(), this.d._trigger("timeChange", [this.hours, this.minutes]), this._handleDate(this.d.lastSelectedDate), this.update();
      },
      _onSelectDate: function _onSelectDate(t, e) {
        this._handleDate(e), this.update();
      },
      _onMouseEnterRange: function _onMouseEnterRange(t) {
        var i = e(t.target).attr("name");
        e(".datepicker--time-current-" + i, this.$timepicker).addClass("-focus-");
      },
      _onMouseOutRange: function _onMouseOutRange(t) {
        var i = e(t.target).attr("name");
        this.d.inFocus || e(".datepicker--time-current-" + i, this.$timepicker).removeClass("-focus-");
      },
      _onMouseUpRange: function _onMouseUpRange(t) {
        this.d.timepickerIsActive = !1;
      }
    };
  }();
}(window, jQuery);

/***/ }),

/***/ "./resources/sass/admin/libs/air-datepicker/js/i18n/datepicker.en.js":
/*!***************************************************************************!*\
  !*** ./resources/sass/admin/libs/air-datepicker/js/i18n/datepicker.en.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

;

(function ($) {
  $.fn.datepicker.language['en'] = {
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    daysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    daysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    today: 'Today',
    clear: 'Clear',
    dateFormat: 'mm/dd/yyyy',
    timeFormat: 'hh:ii aa',
    firstDay: 0
  };
})(jQuery);

/***/ }),

/***/ "./resources/sass/admin/libs/apexcharts/apexcharts.min.js":
/*!****************************************************************!*\
  !*** ./resources/sass/admin/libs/apexcharts/apexcharts.min.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * ApexCharts v3.15.2
 * (c) 2018-2020 Juned Chhipa
 * Released under the MIT License.
 */
!function (t, e) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  "use strict";

  function t(e) {
    return (t = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : _typeof(t);
    })(e);
  }

  function e(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }

  function i(t, e) {
    for (var i = 0; i < e.length; i++) {
      var a = e[i];
      a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(t, a.key, a);
    }
  }

  function a(t, e, a) {
    return e && i(t.prototype, e), a && i(t, a), t;
  }

  function s(t, e, i) {
    return e in t ? Object.defineProperty(t, e, {
      value: i,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : t[e] = i, t;
  }

  function r(t, e) {
    var i = Object.keys(t);

    if (Object.getOwnPropertySymbols) {
      var a = Object.getOwnPropertySymbols(t);
      e && (a = a.filter(function (e) {
        return Object.getOwnPropertyDescriptor(t, e).enumerable;
      })), i.push.apply(i, a);
    }

    return i;
  }

  function n(t) {
    for (var e = 1; e < arguments.length; e++) {
      var i = null != arguments[e] ? arguments[e] : {};
      e % 2 ? r(Object(i), !0).forEach(function (e) {
        s(t, e, i[e]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : r(Object(i)).forEach(function (e) {
        Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e));
      });
    }

    return t;
  }

  function o(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), e && h(t, e);
  }

  function l(t) {
    return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    })(t);
  }

  function h(t, e) {
    return (h = Object.setPrototypeOf || function (t, e) {
      return t.__proto__ = e, t;
    })(t, e);
  }

  function c(t, e) {
    return !e || "object" != _typeof(e) && "function" != typeof e ? function (t) {
      if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return t;
    }(t) : e;
  }

  function d(t) {
    return function (t) {
      if (Array.isArray(t)) {
        for (var e = 0, i = new Array(t.length); e < t.length; e++) {
          i[e] = t[e];
        }

        return i;
      }
    }(t) || function (t) {
      if (Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t)) return Array.from(t);
    }(t) || function () {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }();
  }

  var g = function () {
    function i() {
      e(this, i);
    }

    return a(i, [{
      key: "shadeRGBColor",
      value: function value(t, e) {
        var i = e.split(","),
            a = t < 0 ? 0 : 255,
            s = t < 0 ? -1 * t : t,
            r = parseInt(i[0].slice(4), 10),
            n = parseInt(i[1], 10),
            o = parseInt(i[2], 10);
        return "rgb(" + (Math.round((a - r) * s) + r) + "," + (Math.round((a - n) * s) + n) + "," + (Math.round((a - o) * s) + o) + ")";
      }
    }, {
      key: "shadeHexColor",
      value: function value(t, e) {
        var i = parseInt(e.slice(1), 16),
            a = t < 0 ? 0 : 255,
            s = t < 0 ? -1 * t : t,
            r = i >> 16,
            n = i >> 8 & 255,
            o = 255 & i;
        return "#" + (16777216 + 65536 * (Math.round((a - r) * s) + r) + 256 * (Math.round((a - n) * s) + n) + (Math.round((a - o) * s) + o)).toString(16).slice(1);
      }
    }, {
      key: "shadeColor",
      value: function value(t, e) {
        return e.length > 7 ? this.shadeRGBColor(t, e) : this.shadeHexColor(t, e);
      }
    }], [{
      key: "bind",
      value: function value(t, e) {
        return function () {
          return t.apply(e, arguments);
        };
      }
    }, {
      key: "isObject",
      value: function value(e) {
        return e && "object" === t(e) && !Array.isArray(e) && null != e;
      }
    }, {
      key: "listToArray",
      value: function value(t) {
        var e,
            i = [];

        for (e = 0; e < t.length; e++) {
          i[e] = t[e];
        }

        return i;
      }
    }, {
      key: "extend",
      value: function value(t, e) {
        var i = this;
        "function" != typeof Object.assign && (Object.assign = function (t) {
          if (null == t) throw new TypeError("Cannot convert undefined or null to object");

          for (var e = Object(t), i = 1; i < arguments.length; i++) {
            var a = arguments[i];
            if (null != a) for (var s in a) {
              a.hasOwnProperty(s) && (e[s] = a[s]);
            }
          }

          return e;
        });
        var a = Object.assign({}, t);
        return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach(function (r) {
          i.isObject(e[r]) && r in t ? a[r] = i.extend(t[r], e[r]) : Object.assign(a, s({}, r, e[r]));
        }), a;
      }
    }, {
      key: "extendArray",
      value: function value(t, e) {
        var a = [];
        return t.map(function (t) {
          a.push(i.extend(e, t));
        }), t = a;
      }
    }, {
      key: "monthMod",
      value: function value(t) {
        return t % 12;
      }
    }, {
      key: "clone",
      value: function value(e) {
        if ("[object Array]" === Object.prototype.toString.call(e)) {
          for (var i = [], a = 0; a < e.length; a++) {
            i[a] = this.clone(e[a]);
          }

          return i;
        }

        if ("object" === t(e)) {
          var s = {};

          for (var r in e) {
            e.hasOwnProperty(r) && (s[r] = this.clone(e[r]));
          }

          return s;
        }

        return e;
      }
    }, {
      key: "log10",
      value: function value(t) {
        return Math.log(t) / Math.LN10;
      }
    }, {
      key: "roundToBase10",
      value: function value(t) {
        return Math.pow(10, Math.floor(Math.log10(t)));
      }
    }, {
      key: "roundToBase",
      value: function value(t, e) {
        return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));
      }
    }, {
      key: "parseNumber",
      value: function value(t) {
        return null === t ? t : parseFloat(t);
      }
    }, {
      key: "randomId",
      value: function value() {
        return (Math.random() + 1).toString(36).substring(4);
      }
    }, {
      key: "noExponents",
      value: function value(t) {
        var e = String(t).split(/[eE]/);
        if (1 === e.length) return e[0];
        var i = "",
            a = t < 0 ? "-" : "",
            s = e[0].replace(".", ""),
            r = Number(e[1]) + 1;

        if (r < 0) {
          for (i = a + "0."; r++;) {
            i += "0";
          }

          return i + s.replace(/^-/, "");
        }

        for (r -= s.length; r--;) {
          i += "0";
        }

        return s + i;
      }
    }, {
      key: "getDimensions",
      value: function value(t) {
        var e = getComputedStyle(t),
            i = [],
            a = t.clientHeight,
            s = t.clientWidth;
        return a -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), s -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight), i.push(s), i.push(a), i;
      }
    }, {
      key: "getBoundingClientRect",
      value: function value(t) {
        var e = t.getBoundingClientRect();
        return {
          top: e.top,
          right: e.right,
          bottom: e.bottom,
          left: e.left,
          width: e.width,
          height: e.height,
          x: e.x,
          y: e.y
        };
      }
    }, {
      key: "getLargestStringFromArr",
      value: function value(t) {
        return t.reduce(function (t, e) {
          return Array.isArray(e) && (e = e.reduce(function (t, e) {
            return t.length > e.length ? t : e;
          })), t.length > e.length ? t : e;
        }, 0);
      }
    }, {
      key: "hexToRgba",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999",
            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;
        "#" !== t.substring(0, 1) && (t = "#999999");
        var i = t.replace("#", "");
        i = i.match(new RegExp("(.{" + i.length / 3 + "})", "g"));

        for (var a = 0; a < i.length; a++) {
          i[a] = parseInt(1 === i[a].length ? i[a] + i[a] : i[a], 16);
        }

        return void 0 !== e && i.push(e), "rgba(" + i.join(",") + ")";
      }
    }, {
      key: "getOpacityFromRGBA",
      value: function value(t) {
        return (t = t.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i))[3];
      }
    }, {
      key: "rgb2hex",
      value: function value(t) {
        return (t = t.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t.length ? "#" + ("0" + parseInt(t[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t[3], 10).toString(16)).slice(-2) : "";
      }
    }, {
      key: "isColorHex",
      value: function value(t) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t);
      }
    }, {
      key: "polarToCartesian",
      value: function value(t, e, i, a) {
        var s = (a - 90) * Math.PI / 180;
        return {
          x: t + i * Math.cos(s),
          y: e + i * Math.sin(s)
        };
      }
    }, {
      key: "escapeString",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x",
            i = t.toString().slice();
        return i = i.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi, e);
      }
    }, {
      key: "negToZero",
      value: function value(t) {
        return t < 0 ? 0 : t;
      }
    }, {
      key: "moveIndexInArray",
      value: function value(t, e, i) {
        if (i >= t.length) for (var a = i - t.length + 1; a--;) {
          t.push(void 0);
        }
        return t.splice(i, 0, t.splice(e, 1)[0]), t;
      }
    }, {
      key: "extractNumber",
      value: function value(t) {
        return parseFloat(t.replace(/[^\d.]*/g, ""));
      }
    }, {
      key: "findAncestor",
      value: function value(t, e) {
        for (; (t = t.parentElement) && !t.classList.contains(e);) {
          ;
        }

        return t;
      }
    }, {
      key: "setELstyles",
      value: function value(t, e) {
        for (var i in e) {
          e.hasOwnProperty(i) && (t.style.key = e[i]);
        }
      }
    }, {
      key: "isNumber",
      value: function value(t) {
        return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));
      }
    }, {
      key: "isFloat",
      value: function value(t) {
        return Number(t) === t && t % 1 != 0;
      }
    }, {
      key: "isSafari",
      value: function value() {
        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      }
    }, {
      key: "isFirefox",
      value: function value() {
        return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      }
    }, {
      key: "isIE11",
      value: function value() {
        if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1) return !0;
      }
    }, {
      key: "isIE",
      value: function value() {
        var t = window.navigator.userAgent,
            e = t.indexOf("MSIE ");
        if (e > 0) return parseInt(t.substring(e + 5, t.indexOf(".", e)), 10);

        if (t.indexOf("Trident/") > 0) {
          var i = t.indexOf("rv:");
          return parseInt(t.substring(i + 3, t.indexOf(".", i)), 10);
        }

        var a = t.indexOf("Edge/");
        return a > 0 && parseInt(t.substring(a + 5, t.indexOf(".", a)), 10);
      }
    }]), i;
  }(),
      u = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "getDefaultFilter",
      value: function value(t, e) {
        var i = this.w;
        t.unfilter(!0), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i.config.states.normal.filter ? this.applyFilter(t, e, i.config.states.normal.filter.type, i.config.states.normal.filter.value) : i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);
      }
    }, {
      key: "addNormalFilter",
      value: function value(t, e) {
        var i = this.w;
        i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);
      }
    }, {
      key: "addLightenFilter",
      value: function value(t, e, i) {
        var a = this,
            s = this.w,
            r = i.intensity;

        if (!g.isFirefox()) {
          t.unfilter(!0);
          var n = new window.SVG.Filter();
          n.size("120%", "180%", "-5%", "-40%"), t.filter(function (t) {
            var i = s.config.chart.dropShadow;
            (n = i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({
              rgb: {
                type: "linear",
                slope: 1.5,
                intercept: r
              }
            });
          }), t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse");
        }
      }
    }, {
      key: "addDarkenFilter",
      value: function value(t, e, i) {
        var a = this,
            s = this.w,
            r = i.intensity;

        if (!g.isFirefox()) {
          t.unfilter(!0);
          var n = new window.SVG.Filter();
          n.size("120%", "180%", "-5%", "-40%"), t.filter(function (t) {
            var i = s.config.chart.dropShadow;
            (n = i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({
              rgb: {
                type: "linear",
                slope: r
              }
            });
          }), t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse");
        }
      }
    }, {
      key: "applyFilter",
      value: function value(t, e, i) {
        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;

        switch (i) {
          case "none":
            this.addNormalFilter(t, e);
            break;

          case "lighten":
            this.addLightenFilter(t, e, {
              intensity: a
            });
            break;

          case "darken":
            this.addDarkenFilter(t, e, {
              intensity: a
            });
        }
      }
    }, {
      key: "addShadow",
      value: function value(t, e, i) {
        var a = i.blur,
            s = i.top,
            r = i.left,
            n = i.color,
            o = i.opacity,
            l = t.flood(Array.isArray(n) ? n[e] : n, o).composite(t.sourceAlpha, "in").offset(r, s).gaussianBlur(a).merge(t.source);
        return t.blend(t.source, l);
      }
    }, {
      key: "dropShadow",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
            a = e.top,
            s = e.left,
            r = e.blur,
            n = e.color,
            o = e.opacity,
            l = e.noUserSpaceOnUse,
            h = this.w;
        if (t.unfilter(!0), g.isIE() && "radialBar" === h.config.chart.type) return t;
        n = Array.isArray(n) ? n[i] : n;
        var c = new window.SVG.Filter();
        return c.size("120%", "180%", "-5%", "-40%"), t.filter(function (t) {
          var e = null;
          e = g.isSafari() || g.isFirefox() || g.isIE() ? t.flood(n, o).composite(t.sourceAlpha, "in").offset(s, a).gaussianBlur(r) : t.flood(n, o).composite(t.sourceAlpha, "in").offset(s, a).gaussianBlur(r).merge(t.source), t.blend(t.source, e);
        }), l || t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), t;
      }
    }, {
      key: "setSelectionFilter",
      value: function value(t, e, i) {
        var a = this.w;

        if (void 0 !== a.globals.selectedDataPoints[e] && a.globals.selectedDataPoints[e].indexOf(i) > -1) {
          t.node.setAttribute("selected", !0);
          var s = a.config.states.active.filter;
          "none" !== s && this.applyFilter(t, e, s.type, s.value);
        }
      }
    }]), t;
  }(),
      f = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.setEasingFunctions();
    }

    return a(t, [{
      key: "setEasingFunctions",
      value: function value() {
        var t;

        if (!this.w.globals.easing) {
          switch (this.w.config.chart.animations.easing) {
            case "linear":
              t = "-";
              break;

            case "easein":
              t = "<";
              break;

            case "easeout":
              t = ">";
              break;

            case "easeinout":
              t = "<>";
              break;

            case "swing":
              t = function t(_t) {
                var e = 1.70158;
                return (_t -= 1) * _t * ((e + 1) * _t + e) + 1;
              };

              break;

            case "bounce":
              t = function t(_t2) {
                return _t2 < 1 / 2.75 ? 7.5625 * _t2 * _t2 : _t2 < 2 / 2.75 ? 7.5625 * (_t2 -= 1.5 / 2.75) * _t2 + .75 : _t2 < 2.5 / 2.75 ? 7.5625 * (_t2 -= 2.25 / 2.75) * _t2 + .9375 : 7.5625 * (_t2 -= 2.625 / 2.75) * _t2 + .984375;
              };

              break;

            case "elastic":
              t = function t(_t3) {
                return _t3 === !!_t3 ? _t3 : Math.pow(2, -10 * _t3) * Math.sin((_t3 - .075) * (2 * Math.PI) / .3) + 1;
              };

              break;

            default:
              t = "<>";
          }

          this.w.globals.easing = t;
        }
      }
    }, {
      key: "animateLine",
      value: function value(t, e, i, a) {
        t.attr(e).animate(a).attr(i);
      }
    }, {
      key: "animateCircleRadius",
      value: function value(t, e, i, a, s, r) {
        e || (e = 0), t.attr({
          r: e
        }).animate(a, s).attr({
          r: i
        }).afterAll(function () {
          r();
        });
      }
    }, {
      key: "animateCircle",
      value: function value(t, e, i, a, s) {
        t.attr({
          r: e.r,
          cx: e.cx,
          cy: e.cy
        }).animate(a, s).attr({
          r: i.r,
          cx: i.cx,
          cy: i.cy
        });
      }
    }, {
      key: "animateRect",
      value: function value(t, e, i, a, s) {
        t.attr(e).animate(a).attr(i).afterAll(function () {
          return s();
        });
      }
    }, {
      key: "animatePathsGradually",
      value: function value(t) {
        var e = t.el,
            i = t.realIndex,
            a = t.j,
            s = t.fill,
            r = t.pathFrom,
            n = t.pathTo,
            o = t.speed,
            l = t.delay,
            h = this.w,
            c = 0;
        h.config.chart.animations.animateGradually.enabled && (c = h.config.chart.animations.animateGradually.delay), h.config.chart.animations.dynamicAnimation.enabled && h.globals.dataChanged && (c = 0), this.morphSVG(e, i, a, "line" !== h.config.chart.type || h.globals.comboCharts ? s : "stroke", r, n, o, l * c);
      }
    }, {
      key: "showDelayedElements",
      value: function value() {
        this.w.globals.delayedElements.forEach(function (t) {
          t.el.classList.remove("apexcharts-element-hidden");
        });
      }
    }, {
      key: "animationCompleted",
      value: function value(t) {
        var e = this.w;
        e.globals.animationEnded || (e.globals.animationEnded = !0, "function" == typeof e.config.chart.events.animationEnd && e.config.chart.events.animationEnd(this.ctx, {
          el: t,
          w: e
        }));
      }
    }, {
      key: "morphSVG",
      value: function value(t, e, i, a, s, r, n, o) {
        var l = this,
            h = this.w;
        s || (s = t.attr("pathFrom")), r || (r = t.attr("pathTo")), (!s || s.indexOf("undefined") > -1 || s.indexOf("NaN") > -1) && (s = "M 0 ".concat(h.globals.gridHeight), n = 1), (r.indexOf("undefined") > -1 || r.indexOf("NaN") > -1) && (r = "M 0 ".concat(h.globals.gridHeight), n = 1), h.globals.shouldAnimate || (n = 1), t.plot(s).animate(1, h.globals.easing, o).plot(s).animate(n, h.globals.easing, o).plot(r).afterAll(function () {
          g.isNumber(i) ? i === h.globals.series[h.globals.maxValsInArrayIndex].length - 2 && h.globals.shouldAnimate && l.animationCompleted(t) : "none" !== a && h.globals.shouldAnimate && (!h.globals.comboCharts && e === h.globals.series.length - 1 || h.globals.comboCharts) && l.animationCompleted(t), l.showDelayedElements();
        });
      }
    }]), t;
  }(),
      p = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "drawLine",
      value: function value(t, e, i, a) {
        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8",
            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,
            n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
            o = this.w,
            l = o.globals.dom.Paper.line().attr({
          x1: t,
          y1: e,
          x2: i,
          y2: a,
          stroke: s,
          "stroke-dasharray": r,
          "stroke-width": n
        });
        return l;
      }
    }, {
      key: "drawRect",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe",
            n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,
            o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
            l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,
            h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,
            c = this.w,
            d = c.globals.dom.Paper.rect();
        return d.attr({
          x: t,
          y: e,
          width: i > 0 ? i : 0,
          height: a > 0 ? a : 0,
          rx: s,
          ry: s,
          fill: r,
          opacity: n,
          "stroke-width": null !== o ? o : 0,
          stroke: null !== l ? l : "none",
          "stroke-dasharray": h
        }), d;
      }
    }, {
      key: "drawPolygon",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1",
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "none",
            a = this.w,
            s = a.globals.dom.Paper.polygon(t).attr({
          fill: i,
          stroke: e
        });
        return s;
      }
    }, {
      key: "drawCircle",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            i = this.w,
            a = i.globals.dom.Paper.circle(2 * t);
        return null !== e && a.attr(e), a;
      }
    }, {
      key: "drawPath",
      value: function value(t) {
        var e = t.d,
            i = void 0 === e ? "" : e,
            a = t.stroke,
            s = void 0 === a ? "#a8a8a8" : a,
            r = t.strokeWidth,
            n = void 0 === r ? 1 : r,
            o = t.fill,
            l = t.fillOpacity,
            h = void 0 === l ? 1 : l,
            c = t.strokeOpacity,
            d = void 0 === c ? 1 : c,
            g = t.classes,
            u = t.strokeLinecap,
            f = void 0 === u ? null : u,
            p = t.strokeDashArray,
            x = void 0 === p ? 0 : p,
            b = this.w;
        return null === f && (f = b.config.stroke.lineCap), (i.indexOf("undefined") > -1 || i.indexOf("NaN") > -1) && (i = "M 0 ".concat(b.globals.gridHeight)), b.globals.dom.Paper.path(i).attr({
          fill: o,
          "fill-opacity": h,
          stroke: s,
          "stroke-opacity": d,
          "stroke-linecap": f,
          "stroke-width": n,
          "stroke-dasharray": x,
          "class": g
        });
      }
    }, {
      key: "group",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            e = this.w,
            i = e.globals.dom.Paper.group();
        return null !== t && i.attr(t), i;
      }
    }, {
      key: "move",
      value: function value(t, e) {
        var i = ["M", t, e].join(" ");
        return i;
      }
    }, {
      key: "line",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            a = null;
        return null === i ? a = ["L", t, e].join(" ") : "H" === i ? a = ["H", t].join(" ") : "V" === i && (a = ["V", e].join(" ")), a;
      }
    }, {
      key: "curve",
      value: function value(t, e, i, a, s, r) {
        var n = ["C", t, e, i, a, s, r].join(" ");
        return n;
      }
    }, {
      key: "quadraticCurve",
      value: function value(t, e, i, a) {
        return ["Q", t, e, i, a].join(" ");
      }
    }, {
      key: "arc",
      value: function value(t, e, i, a, s, r, n) {
        var o = arguments.length > 7 && void 0 !== arguments[7] && arguments[7],
            l = "A";
        o && (l = "a");
        var h = [l, t, e, i, a, s, r, n].join(" ");
        return h;
      }
    }, {
      key: "renderPaths",
      value: function value(t) {
        var e,
            i = t.j,
            a = t.realIndex,
            s = t.pathFrom,
            r = t.pathTo,
            o = t.stroke,
            l = t.strokeWidth,
            h = t.strokeLinecap,
            c = t.fill,
            d = t.animationDelay,
            g = t.initialSpeed,
            p = t.dataChangeSpeed,
            x = t.className,
            b = t.shouldClipToGrid,
            m = void 0 === b || b,
            v = t.bindEventsOnPaths,
            y = void 0 === v || v,
            w = t.drawShadow,
            k = void 0 === w || w,
            A = this.w,
            S = new u(this.ctx),
            C = new f(this.ctx),
            L = this.w.config.chart.animations.enabled,
            P = L && this.w.config.chart.animations.dynamicAnimation.enabled,
            z = !!(L && !A.globals.resized || P && A.globals.dataChanged && A.globals.shouldAnimate);
        z ? e = s : (e = r, A.globals.animationEnded = !0);
        var T = A.config.stroke.dashArray,
            E = 0;
        E = Array.isArray(T) ? T[a] : A.config.stroke.dashArray;
        var M = this.drawPath({
          d: e,
          stroke: o,
          strokeWidth: l,
          fill: c,
          fillOpacity: 1,
          classes: x,
          strokeLinecap: h,
          strokeDashArray: E
        });
        if (M.attr("index", a), m && M.attr({
          "clip-path": "url(#gridRectMask".concat(A.globals.cuid, ")")
        }), "none" !== A.config.states.normal.filter.type) S.getDefaultFilter(M, a);else if (A.config.chart.dropShadow.enabled && k && (!A.config.chart.dropShadow.enabledSeries || A.config.chart.dropShadow.enabledSeries && -1 !== A.config.chart.dropShadow.enabledSeries.indexOf(a))) {
          var I = A.config.chart.dropShadow;
          S.dropShadow(M, I, a);
        }
        y && (M.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, M)), M.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, M)), M.node.addEventListener("mousedown", this.pathMouseDown.bind(this, M))), M.attr({
          pathTo: r,
          pathFrom: s
        });
        var X = {
          el: M,
          j: i,
          realIndex: a,
          pathFrom: s,
          pathTo: r,
          fill: c,
          strokeWidth: l
        };
        return !L || A.globals.resized || A.globals.dataChanged ? !A.globals.resized && A.globals.dataChanged || C.showDelayedElements() : C.animatePathsGradually(n({}, X, {
          speed: g,
          delay: d
        })), A.globals.dataChanged && P && z && C.animatePathsGradually(n({}, X, {
          speed: p
        })), M;
      }
    }, {
      key: "drawPattern",
      value: function value(t, e, i) {
        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8",
            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
            r = this.w,
            n = r.globals.dom.Paper.pattern(e, i, function (r) {
          "horizontalLines" === t ? r.line(0, 0, i, 0).stroke({
            color: a,
            width: s + 1
          }) : "verticalLines" === t ? r.line(0, 0, 0, e).stroke({
            color: a,
            width: s + 1
          }) : "slantedLines" === t ? r.line(0, 0, e, i).stroke({
            color: a,
            width: s
          }) : "squares" === t ? r.rect(e, i).fill("none").stroke({
            color: a,
            width: s
          }) : "circles" === t && r.circle(e).fill("none").stroke({
            color: a,
            width: s
          });
        });
        return n;
      }
    }, {
      key: "drawGradient",
      value: function value(t, e, i, a, s) {
        var r,
            n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
            o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
            l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
            h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,
            c = this.w;
        e = g.hexToRgba(e, a), i = g.hexToRgba(i, s);
        var d = 0,
            u = 1,
            f = 1,
            p = null;
        null !== o && (d = void 0 !== o[0] ? o[0] / 100 : 0, u = void 0 !== o[1] ? o[1] / 100 : 1, f = void 0 !== o[2] ? o[2] / 100 : 1, p = void 0 !== o[3] ? o[3] / 100 : null);
        var x = !("donut" !== c.config.chart.type && "pie" !== c.config.chart.type && "bubble" !== c.config.chart.type);

        if (r = null === l || 0 === l.length ? c.globals.dom.Paper.gradient(x ? "radial" : "linear", function (t) {
          t.at(d, e, a), t.at(u, i, s), t.at(f, i, s), null !== p && t.at(p, e, a);
        }) : c.globals.dom.Paper.gradient(x ? "radial" : "linear", function (t) {
          (Array.isArray(l[h]) ? l[h] : l).forEach(function (e) {
            t.at(e.offset / 100, e.color, e.opacity);
          });
        }), x) {
          var b = c.globals.gridWidth / 2,
              m = c.globals.gridHeight / 2;
          "bubble" !== c.config.chart.type ? r.attr({
            gradientUnits: "userSpaceOnUse",
            cx: b,
            cy: m,
            r: n
          }) : r.attr({
            cx: .5,
            cy: .5,
            r: .8,
            fx: .2,
            fy: .2
          });
        } else "vertical" === t ? r.from(0, 0).to(0, 1) : "diagonal" === t ? r.from(0, 0).to(1, 1) : "horizontal" === t ? r.from(0, 1).to(1, 1) : "diagonal2" === t && r.from(0, 1).to(2, 2);

        return r;
      }
    }, {
      key: "drawText",
      value: function value(t) {
        var e,
            i = t.x,
            a = t.y,
            s = t.text,
            r = t.textAnchor,
            n = t.fontSize,
            o = t.fontFamily,
            l = t.fontWeight,
            h = t.foreColor,
            c = t.opacity,
            d = t.cssClass,
            g = void 0 === d ? "" : d,
            u = t.isPlainText,
            f = void 0 === u || u,
            p = this.w;
        return void 0 === s && (s = ""), r || (r = "start"), h || (h = p.config.chart.foreColor), o = o || p.config.chart.fontFamily, l = l || "regular", (e = Array.isArray(s) ? p.globals.dom.Paper.text(function (t) {
          for (var e = 0; e < s.length; e++) {
            0 === e ? t.tspan(s[e]) : t.tspan(s[e]).newLine();
          }
        }) : f ? p.globals.dom.Paper.plain(s) : p.globals.dom.Paper.text(function (t) {
          return t.tspan(s);
        })).attr({
          x: i,
          y: a,
          "text-anchor": r,
          "dominant-baseline": "auto",
          "font-size": n,
          "font-family": o,
          "font-weight": l,
          fill: h,
          "class": "apexcharts-text " + g
        }), e.node.style.fontFamily = o, e.node.style.opacity = c, e;
      }
    }, {
      key: "drawMarker",
      value: function value(t, e, i) {
        t = t || 0;
        var a = i.pSize || 0,
            s = null;

        if ("square" === i.shape) {
          var r = void 0 === i.pRadius ? a / 2 : i.pRadius;
          null !== e && a || (a = 0, r = 0);
          var n = 1.2 * a + r,
              o = this.drawRect(n, n, n, n, r);
          o.attr({
            x: t - n / 2,
            y: e - n / 2,
            cx: t,
            cy: e,
            "class": i["class"] ? i["class"] : "",
            fill: i.pointFillColor,
            "fill-opacity": i.pointFillOpacity ? i.pointFillOpacity : 1,
            stroke: i.pointStrokeColor,
            "stroke-width": i.pWidth ? i.pWidth : 0,
            "stroke-opacity": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1
          }), s = o;
        } else "circle" !== i.shape && i.shape || (g.isNumber(e) || (a = 0, e = 0), s = this.drawCircle(a, {
          cx: t,
          cy: e,
          "class": i["class"] ? i["class"] : "",
          stroke: i.pointStrokeColor,
          fill: i.pointFillColor,
          "fill-opacity": i.pointFillOpacity ? i.pointFillOpacity : 1,
          "stroke-width": i.pWidth ? i.pWidth : 0,
          "stroke-opacity": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1
        }));

        return s;
      }
    }, {
      key: "pathMouseEnter",
      value: function value(t, e) {
        var i = this.w,
            a = new u(this.ctx),
            s = parseInt(t.node.getAttribute("index"), 10),
            r = parseInt(t.node.getAttribute("j"), 10);

        if ("function" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, {
          seriesIndex: s,
          dataPointIndex: r,
          w: i
        }), this.ctx.events.fireEvent("dataPointMouseEnter", [e, this.ctx, {
          seriesIndex: s,
          dataPointIndex: r,
          w: i
        }]), ("none" === i.config.states.active.filter.type || "true" !== t.node.getAttribute("selected")) && "none" !== i.config.states.hover.filter.type && "none" !== i.config.states.active.filter.type && !i.globals.isTouchDevice) {
          var n = i.config.states.hover.filter;
          a.applyFilter(t, s, n.type, n.value);
        }
      }
    }, {
      key: "pathMouseLeave",
      value: function value(t, e) {
        var i = this.w,
            a = new u(this.ctx),
            s = parseInt(t.node.getAttribute("index"), 10),
            r = parseInt(t.node.getAttribute("j"), 10);
        "function" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, {
          seriesIndex: s,
          dataPointIndex: r,
          w: i
        }), this.ctx.events.fireEvent("dataPointMouseLeave", [e, this.ctx, {
          seriesIndex: s,
          dataPointIndex: r,
          w: i
        }]), "none" !== i.config.states.active.filter.type && "true" === t.node.getAttribute("selected") || "none" !== i.config.states.hover.filter.type && a.getDefaultFilter(t, s);
      }
    }, {
      key: "pathMouseDown",
      value: function value(t, e) {
        var i = this.w,
            a = new u(this.ctx),
            s = parseInt(t.node.getAttribute("index"), 10),
            r = parseInt(t.node.getAttribute("j"), 10),
            n = "false";

        if ("true" === t.node.getAttribute("selected")) {
          if (t.node.setAttribute("selected", "false"), i.globals.selectedDataPoints[s].indexOf(r) > -1) {
            var o = i.globals.selectedDataPoints[s].indexOf(r);
            i.globals.selectedDataPoints[s].splice(o, 1);
          }
        } else {
          if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {
            i.globals.selectedDataPoints = [];

            var l = i.globals.dom.Paper.select(".apexcharts-series path").members,
                h = i.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members,
                c = function c(t) {
              Array.prototype.forEach.call(t, function (t) {
                t.node.setAttribute("selected", "false"), a.getDefaultFilter(t, s);
              });
            };

            c(l), c(h);
          }

          t.node.setAttribute("selected", "true"), n = "true", void 0 === i.globals.selectedDataPoints[s] && (i.globals.selectedDataPoints[s] = []), i.globals.selectedDataPoints[s].push(r);
        }

        if ("true" === n) {
          var d = i.config.states.active.filter;
          "none" !== d && a.applyFilter(t, s, d.type, d.value);
        } else "none" !== i.config.states.active.filter.type && a.getDefaultFilter(t, s);

        "function" == typeof i.config.chart.events.dataPointSelection && i.config.chart.events.dataPointSelection(e, this.ctx, {
          selectedDataPoints: i.globals.selectedDataPoints,
          seriesIndex: s,
          dataPointIndex: r,
          w: i
        }), e && this.ctx.events.fireEvent("dataPointSelection", [e, this.ctx, {
          selectedDataPoints: i.globals.selectedDataPoints,
          seriesIndex: s,
          dataPointIndex: r,
          w: i
        }]);
      }
    }, {
      key: "rotateAroundCenter",
      value: function value(t) {
        var e = t.getBBox();
        return {
          x: e.x + e.width / 2,
          y: e.y + e.height / 2
        };
      }
    }, {
      key: "getTextRects",
      value: function value(t, e, i, a) {
        var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
            r = this.w,
            n = this.drawText({
          x: -200,
          y: -200,
          text: t,
          textAnchor: "start",
          fontSize: e,
          fontFamily: i,
          foreColor: "#fff",
          opacity: 0
        });
        a && n.attr("transform", a), r.globals.dom.Paper.add(n);
        var o = n.bbox();
        return s || (o = n.node.getBoundingClientRect()), n.remove(), {
          width: o.width,
          height: o.height
        };
      }
    }, {
      key: "placeTextWithEllipsis",
      value: function value(t, e, i) {
        if ("function" == typeof t.getComputedTextLength && (t.textContent = e, e.length > 0 && t.getComputedTextLength() >= i / .8)) {
          for (var a = e.length - 3; a > 0; a -= 3) {
            if (t.getSubStringLength(0, a) <= i / .8) return void (t.textContent = e.substring(0, a) + "...");
          }

          t.textContent = ".";
        }
      }
    }], [{
      key: "setAttrs",
      value: function value(t, e) {
        for (var i in e) {
          e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
        }
      }
    }]), t;
  }(),
      x = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.annoCtx = i;
    }

    return a(t, [{
      key: "setOrientations",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            i = this.w;

        if ("vertical" === t.label.orientation) {
          var a = null !== e ? e : 0,
              s = i.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a, "']"));

          if (null !== s) {
            var r = s.getBoundingClientRect();
            s.setAttribute("x", parseFloat(s.getAttribute("x")) - r.height + 4), "top" === t.label.position ? s.setAttribute("y", parseFloat(s.getAttribute("y")) + r.width) : s.setAttribute("y", parseFloat(s.getAttribute("y")) - r.width);
            var n = this.annoCtx.graphics.rotateAroundCenter(s),
                o = n.x,
                l = n.y;
            s.setAttribute("transform", "rotate(-90 ".concat(o, " ").concat(l, ")"));
          }
        }
      }
    }, {
      key: "addBackgroundToAnno",
      value: function value(t, e) {
        var i = this.w;
        if (!e.label.text || e.label.text && !e.label.text.trim()) return null;
        var a = i.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),
            s = t.getBoundingClientRect(),
            r = e.label.style.padding.left,
            n = e.label.style.padding.right,
            o = e.label.style.padding.top,
            l = e.label.style.padding.bottom;
        "vertical" === e.label.orientation && (o = e.label.style.padding.left, l = e.label.style.padding.right, r = e.label.style.padding.top, n = e.label.style.padding.bottom);
        var h = s.left - a.left - r,
            c = s.top - a.top - o,
            d = this.annoCtx.graphics.drawRect(h, c, s.width + r + n, s.height + o + l, 0, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);
        return e.id && d.node.classList.add(e.id), d;
      }
    }, {
      key: "annotationsBackground",
      value: function value() {
        var t = this,
            e = this.w,
            i = function i(_i, a, s) {
          var r = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(s, "-annotations .apexcharts-").concat(s, "-annotation-label[rel='").concat(a, "']"));

          if (r) {
            var n = r.parentNode,
                o = t.addBackgroundToAnno(r, _i);
            o && n.insertBefore(o.node, r);
          }
        };

        e.config.annotations.xaxis.map(function (t, e) {
          i(t, e, "xaxis");
        }), e.config.annotations.yaxis.map(function (t, e) {
          i(t, e, "yaxis");
        }), e.config.annotations.points.map(function (t, e) {
          i(t, e, "point");
        });
      }
    }, {
      key: "getStringX",
      value: function value(t) {
        var e = this.w,
            i = t;
        e.config.xaxis.convertedCatToNumeric && (t = e.globals.categoryLabels.indexOf(t) + 1);
        var a = e.globals.labels.indexOf(t),
            s = e.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a + 1) + ")");
        return s && (i = parseFloat(s.getAttribute("x"))), i;
      }
    }]), t;
  }(),
      b = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.annoCtx = i, this.invertAxis = this.annoCtx.invertAxis;
    }

    return a(t, [{
      key: "addXaxisAnnotation",
      value: function value(t, e, i) {
        var a = this.w,
            s = this.invertAxis ? a.globals.minY : a.globals.minX,
            r = this.invertAxis ? a.globals.maxY : a.globals.maxX,
            n = this.invertAxis ? a.globals.yRange[0] : a.globals.xRange,
            o = (t.x - s) / (n / a.globals.gridWidth);
        this.annoCtx.inversedReversedAxis && (o = (r - t.x) / (n / a.globals.gridWidth));
        var l = t.label.text;
        "category" !== a.config.xaxis.type && !a.config.xaxis.convertedCatToNumeric || this.invertAxis || (o = this.annoCtx.helpers.getStringX(t.x));
        var h = t.strokeDashArray;

        if (!(o < 0 || o > a.globals.gridWidth)) {
          if (null === t.x2) {
            var c = this.annoCtx.graphics.drawLine(o + t.offsetX, 0 + t.offsetY, o + t.offsetX, a.globals.gridHeight + t.offsetY, t.borderColor, h, t.borderWidth);
            e.appendChild(c.node), t.id && c.node.classList.add(t.id);
          } else {
            var d = (t.x2 - s) / (n / a.globals.gridWidth);

            if (this.annoCtx.inversedReversedAxis && (d = (r - t.x2) / (n / a.globals.gridWidth)), "category" !== a.config.xaxis.type && !a.config.xaxis.convertedCatToNumeric || this.invertAxis || (d = this.annoCtx.helpers.getStringX(t.x2)), d < o) {
              var g = o;
              o = d, d = g;
            }

            if (l) {
              var u = this.annoCtx.graphics.drawRect(o + t.offsetX, 0 + t.offsetY, d - o, a.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, h);
              e.appendChild(u.node), t.id && u.node.classList.add(t.id);
            }
          }

          var f = "top" === t.label.position ? -3 : a.globals.gridHeight,
              p = this.annoCtx.graphics.getTextRects(l, parseFloat(t.label.style.fontSize)),
              x = this.annoCtx.graphics.drawText({
            x: o + t.label.offsetX,
            y: f + t.label.offsetY - ("top" === t.label.position ? p.width / 2 - 12 : -p.width / 2),
            text: l,
            textAnchor: t.label.textAnchor,
            fontSize: t.label.style.fontSize,
            fontFamily: t.label.style.fontFamily,
            foreColor: t.label.style.color,
            cssClass: "apexcharts-xaxis-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : "")
          });
          x.attr({
            rel: i
          }), e.appendChild(x.node), this.annoCtx.helpers.setOrientations(t, i);
        }
      }
    }, {
      key: "drawXAxisAnnotations",
      value: function value() {
        var t = this,
            e = this.w,
            i = this.annoCtx.graphics.group({
          "class": "apexcharts-xaxis-annotations"
        });
        return e.config.annotations.xaxis.map(function (e, a) {
          t.addXaxisAnnotation(e, i.node, a);
        }), i;
      }
    }]), t;
  }(),
      m = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.annoCtx = i;
    }

    return a(t, [{
      key: "addYaxisAnnotation",
      value: function value(t, e, i) {
        var a,
            s = this.w,
            r = t.strokeDashArray,
            n = this._getY1Y2("y1", t),
            o = t.label.text;

        if (null === t.y2) {
          var l = this.annoCtx.graphics.drawLine(0 + t.offsetX, n + t.offsetY, s.globals.gridWidth + t.offsetX, n + t.offsetY, t.borderColor, r, t.borderWidth);
          e.appendChild(l.node), t.id && l.node.classList.add(t.id);
        } else {
          if ((a = this._getY1Y2("y2", t)) > n) {
            var h = n;
            n = a, a = h;
          }

          if (o) {
            var c = this.annoCtx.graphics.drawRect(0 + t.offsetX, a + t.offsetY, s.globals.gridWidth + t.offsetX, n - a, 0, t.fillColor, t.opacity, 1, t.borderColor, r);
            e.appendChild(c.node), t.id && c.node.classList.add(t.id);
          }
        }

        var d = "right" === t.label.position ? s.globals.gridWidth : 0,
            g = this.annoCtx.graphics.drawText({
          x: d + t.label.offsetX,
          y: (a || n) + t.label.offsetY - 3,
          text: o,
          textAnchor: t.label.textAnchor,
          fontSize: t.label.style.fontSize,
          fontFamily: t.label.style.fontFamily,
          foreColor: t.label.style.color,
          cssClass: "apexcharts-yaxis-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : "")
        });
        g.attr({
          rel: i
        }), e.appendChild(g.node);
      }
    }, {
      key: "_getY1Y2",
      value: function value(t, e) {
        var i,
            a = "y1" === t ? e.y : e.y2,
            s = this.w;

        if (this.annoCtx.invertAxis) {
          var r = s.globals.labels.indexOf(a);
          s.config.xaxis.convertedCatToNumeric && (r = s.globals.categoryLabels.indexOf(a));
          var n = s.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (r + 1) + ")");
          n && (i = parseFloat(n.getAttribute("y")));
        } else i = s.globals.gridHeight - (a - s.globals.minYArr[e.yAxisIndex]) / (s.globals.yRange[e.yAxisIndex] / s.globals.gridHeight), s.config.yaxis[e.yAxisIndex] && s.config.yaxis[e.yAxisIndex].reversed && (i = (a - s.globals.minYArr[e.yAxisIndex]) / (s.globals.yRange[e.yAxisIndex] / s.globals.gridHeight));

        return i;
      }
    }, {
      key: "drawYAxisAnnotations",
      value: function value() {
        var t = this,
            e = this.w,
            i = this.annoCtx.graphics.group({
          "class": "apexcharts-yaxis-annotations"
        });
        return e.config.annotations.yaxis.map(function (e, a) {
          t.addYaxisAnnotation(e, i.node, a);
        }), i;
      }
    }]), t;
  }(),
      v = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.annoCtx = i;
    }

    return a(t, [{
      key: "addPointAnnotation",
      value: function value(t, e, i) {
        var a = this.w,
            s = 0,
            r = 0,
            n = 0;

        if (this.annoCtx.invertAxis && console.warn("Point annotation is not supported in horizontal bar charts."), "string" == typeof t.x) {
          var o = a.globals.labels.indexOf(t.x);
          a.config.xaxis.convertedCatToNumeric && (o = a.globals.categoryLabels.indexOf(t.x)), s = this.annoCtx.helpers.getStringX(t.x);
          var l = t.y;
          null === t.y && (l = a.globals.series[t.seriesIndex][o]), r = a.globals.gridHeight - (l - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight) - parseFloat(t.label.style.fontSize) - t.marker.size, n = a.globals.gridHeight - (l - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight), a.config.yaxis[t.yAxisIndex] && a.config.yaxis[t.yAxisIndex].reversed && (r = (l - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight) + parseFloat(t.label.style.fontSize) + t.marker.size, n = (l - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight));
        } else s = (t.x - a.globals.minX) / (a.globals.xRange / a.globals.gridWidth), r = a.globals.gridHeight - (parseFloat(t.y) - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight) - parseFloat(t.label.style.fontSize) - t.marker.size, n = a.globals.gridHeight - (t.y - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight), a.config.yaxis[t.yAxisIndex] && a.config.yaxis[t.yAxisIndex].reversed && (r = (parseFloat(t.y) - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight) - parseFloat(t.label.style.fontSize) - t.marker.size, n = (t.y - a.globals.minYArr[t.yAxisIndex]) / (a.globals.yRange[t.yAxisIndex] / a.globals.gridHeight));

        if (!(s < 0 || s > a.globals.gridWidth)) {
          var h = {
            pSize: t.marker.size,
            pWidth: t.marker.strokeWidth,
            pointFillColor: t.marker.fillColor,
            pointStrokeColor: t.marker.strokeColor,
            shape: t.marker.shape,
            radius: t.marker.radius,
            "class": "apexcharts-point-annotation-marker ".concat(t.marker.cssClass, " ").concat(t.id ? t.id : "")
          },
              c = this.annoCtx.graphics.drawMarker(s + t.marker.offsetX, n + t.marker.offsetY, h);
          e.appendChild(c.node);
          var d = t.label.text ? t.label.text : "",
              g = this.annoCtx.graphics.drawText({
            x: s + t.label.offsetX,
            y: r + t.label.offsetY,
            text: d,
            textAnchor: t.label.textAnchor,
            fontSize: t.label.style.fontSize,
            fontFamily: t.label.style.fontFamily,
            foreColor: t.label.style.color,
            cssClass: "apexcharts-point-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : "")
          });

          if (g.attr({
            rel: i
          }), e.appendChild(g.node), t.customSVG.SVG) {
            var u = this.annoCtx.graphics.group({
              "class": "apexcharts-point-annotations-custom-svg " + t.customSVG.cssClass
            });
            u.attr({
              transform: "translate(".concat(s + t.customSVG.offsetX, ", ").concat(r + t.customSVG.offsetY, ")")
            }), u.node.innerHTML = t.customSVG.SVG, e.appendChild(u.node);
          }
        }
      }
    }, {
      key: "drawPointAnnotations",
      value: function value() {
        var t = this,
            e = this.w,
            i = this.annoCtx.graphics.group({
          "class": "apexcharts-point-annotations"
        });
        return e.config.annotations.points.map(function (e, a) {
          t.addPointAnnotation(e, i.node, a);
        }), i;
      }
    }]), t;
  }();

  var y,
      w,
      k = {
    name: "en",
    options: {
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      toolbar: {
        exportToSVG: "Download SVG",
        exportToPNG: "Download PNG",
        exportToCSV: "Download CSV",
        menu: "Menu",
        selection: "Selection",
        selectionZoom: "Selection Zoom",
        zoomIn: "Zoom In",
        zoomOut: "Zoom Out",
        pan: "Panning",
        reset: "Reset Zoom"
      }
    }
  },
      A = function () {
    function t() {
      e(this, t), this.yAxis = {
        show: !0,
        showAlways: !1,
        seriesName: void 0,
        opposite: !1,
        reversed: !1,
        logarithmic: !1,
        tickAmount: void 0,
        forceNiceScale: !1,
        max: void 0,
        min: void 0,
        floating: !1,
        decimalsInFloat: void 0,
        labels: {
          show: !0,
          minWidth: 0,
          maxWidth: 160,
          offsetX: 0,
          offsetY: 0,
          align: void 0,
          rotate: 0,
          padding: 20,
          style: {
            colors: [],
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: ""
          },
          formatter: void 0
        },
        axisBorder: {
          show: !1,
          color: "#e0e0e0",
          width: 1,
          offsetX: 0,
          offsetY: 0
        },
        axisTicks: {
          show: !1,
          color: "#e0e0e0",
          width: 6,
          offsetX: 0,
          offsetY: 0
        },
        title: {
          text: void 0,
          rotate: 90,
          offsetY: 0,
          offsetX: 0,
          style: {
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: ""
          }
        },
        tooltip: {
          enabled: !1,
          offsetX: 0
        },
        crosshairs: {
          show: !0,
          position: "front",
          stroke: {
            color: "#b6b6b6",
            width: 1,
            dashArray: 0
          }
        }
      }, this.pointAnnotation = {
        x: 0,
        y: null,
        yAxisIndex: 0,
        seriesIndex: 0,
        marker: {
          size: 4,
          fillColor: "#fff",
          strokeWidth: 2,
          strokeColor: "#333",
          shape: "circle",
          offsetX: 0,
          offsetY: 0,
          radius: 2,
          cssClass: ""
        },
        label: {
          borderColor: "#c2c2c2",
          borderWidth: 1,
          text: void 0,
          textAnchor: "middle",
          offsetX: 0,
          offsetY: -15,
          style: {
            background: "#fff",
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: "",
            padding: {
              left: 5,
              right: 5,
              top: 2,
              bottom: 2
            }
          }
        },
        customSVG: {
          SVG: void 0,
          cssClass: void 0,
          offsetX: 0,
          offsetY: 0
        }
      }, this.yAxisAnnotation = {
        y: 0,
        y2: null,
        strokeDashArray: 1,
        fillColor: "#c2c2c2",
        borderColor: "#c2c2c2",
        borderWidth: 1,
        opacity: .3,
        offsetX: 0,
        offsetY: 0,
        yAxisIndex: 0,
        label: {
          borderColor: "#c2c2c2",
          borderWidth: 1,
          text: void 0,
          textAnchor: "end",
          position: "right",
          offsetX: 0,
          offsetY: -3,
          style: {
            background: "#fff",
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: "",
            padding: {
              left: 5,
              right: 5,
              top: 2,
              bottom: 2
            }
          }
        }
      }, this.xAxisAnnotation = {
        x: 0,
        x2: null,
        strokeDashArray: 1,
        fillColor: "#c2c2c2",
        borderColor: "#c2c2c2",
        borderWidth: 1,
        opacity: .3,
        offsetX: 0,
        offsetY: 0,
        label: {
          borderColor: "#c2c2c2",
          borderWidth: 1,
          text: void 0,
          textAnchor: "middle",
          orientation: "vertical",
          position: "top",
          offsetX: 0,
          offsetY: 0,
          style: {
            background: "#fff",
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: "",
            padding: {
              left: 5,
              right: 5,
              top: 2,
              bottom: 2
            }
          }
        }
      };
    }

    return a(t, [{
      key: "init",
      value: function value() {
        return {
          annotations: {
            position: "front",
            yaxis: [this.yAxisAnnotation],
            xaxis: [this.xAxisAnnotation],
            points: [this.pointAnnotation]
          },
          chart: {
            animations: {
              enabled: !0,
              easing: "easeinout",
              speed: 800,
              animateGradually: {
                delay: 150,
                enabled: !0
              },
              dynamicAnimation: {
                enabled: !0,
                speed: 350
              }
            },
            background: "transparent",
            locales: [k],
            defaultLocale: "en",
            dropShadow: {
              enabled: !1,
              enabledSeries: void 0,
              top: 2,
              left: 2,
              blur: 4,
              color: "#000",
              opacity: .35
            },
            events: {
              animationEnd: void 0,
              beforeMount: void 0,
              mounted: void 0,
              updated: void 0,
              click: void 0,
              mouseMove: void 0,
              legendClick: void 0,
              markerClick: void 0,
              selection: void 0,
              dataPointSelection: void 0,
              dataPointMouseEnter: void 0,
              dataPointMouseLeave: void 0,
              beforeZoom: void 0,
              zoomed: void 0,
              scrolled: void 0
            },
            foreColor: "#373d3f",
            fontFamily: "Helvetica, Arial, sans-serif",
            height: "auto",
            parentHeightOffset: 15,
            redrawOnParentResize: !0,
            id: void 0,
            group: void 0,
            offsetX: 0,
            offsetY: 0,
            selection: {
              enabled: !1,
              type: "x",
              fill: {
                color: "#24292e",
                opacity: .1
              },
              stroke: {
                width: 1,
                color: "#24292e",
                opacity: .4,
                dashArray: 3
              },
              xaxis: {
                min: void 0,
                max: void 0
              },
              yaxis: {
                min: void 0,
                max: void 0
              }
            },
            sparkline: {
              enabled: !1
            },
            brush: {
              enabled: !1,
              autoScaleYaxis: !0,
              target: void 0
            },
            stacked: !1,
            stackType: "normal",
            toolbar: {
              show: !0,
              tools: {
                download: !0,
                selection: !0,
                zoom: !0,
                zoomin: !0,
                zoomout: !0,
                pan: !0,
                reset: !0,
                customIcons: []
              },
              autoSelected: "zoom"
            },
            type: "line",
            width: "100%",
            zoom: {
              enabled: !0,
              type: "x",
              autoScaleYaxis: !1,
              zoomedArea: {
                fill: {
                  color: "#90CAF9",
                  opacity: .4
                },
                stroke: {
                  color: "#0D47A1",
                  opacity: .4,
                  width: 1
                }
              }
            }
          },
          plotOptions: {
            bar: {
              horizontal: !1,
              columnWidth: "70%",
              barHeight: "70%",
              distributed: !1,
              endingShape: "flat",
              colors: {
                ranges: [],
                backgroundBarColors: [],
                backgroundBarOpacity: 1
              },
              dataLabels: {
                position: "top",
                maxItems: 100,
                hideOverflowingLabels: !0,
                orientation: "horizontal"
              }
            },
            bubble: {
              minBubbleRadius: void 0,
              maxBubbleRadius: void 0
            },
            candlestick: {
              colors: {
                upward: "#00B746",
                downward: "#EF403C"
              },
              wick: {
                useFillColor: !0
              }
            },
            heatmap: {
              radius: 2,
              enableShades: !0,
              shadeIntensity: .5,
              reverseNegativeShade: !1,
              distributed: !1,
              colorScale: {
                inverse: !1,
                ranges: [],
                min: void 0,
                max: void 0
              }
            },
            radialBar: {
              size: void 0,
              inverseOrder: !1,
              startAngle: 0,
              endAngle: 360,
              offsetX: 0,
              offsetY: 0,
              hollow: {
                margin: 5,
                size: "50%",
                background: "transparent",
                image: void 0,
                imageWidth: 150,
                imageHeight: 150,
                imageOffsetX: 0,
                imageOffsetY: 0,
                imageClipped: !0,
                position: "front",
                dropShadow: {
                  enabled: !1,
                  top: 0,
                  left: 0,
                  blur: 3,
                  color: "#000",
                  opacity: .5
                }
              },
              track: {
                show: !0,
                startAngle: void 0,
                endAngle: void 0,
                background: "#f2f2f2",
                strokeWidth: "97%",
                opacity: 1,
                margin: 5,
                dropShadow: {
                  enabled: !1,
                  top: 0,
                  left: 0,
                  blur: 3,
                  color: "#000",
                  opacity: .5
                }
              },
              dataLabels: {
                show: !0,
                name: {
                  show: !0,
                  fontSize: "16px",
                  fontFamily: void 0,
                  color: void 0,
                  offsetY: 0,
                  formatter: function formatter(t) {
                    return t;
                  }
                },
                value: {
                  show: !0,
                  fontSize: "14px",
                  fontFamily: void 0,
                  color: void 0,
                  offsetY: 16,
                  formatter: function formatter(t) {
                    return t + "%";
                  }
                },
                total: {
                  show: !1,
                  label: "Total",
                  color: void 0,
                  formatter: function formatter(t) {
                    return t.globals.seriesTotals.reduce(function (t, e) {
                      return t + e;
                    }, 0) / t.globals.series.length + "%";
                  }
                }
              }
            },
            pie: {
              size: void 0,
              customScale: 1,
              offsetX: 0,
              offsetY: 0,
              expandOnClick: !0,
              dataLabels: {
                offset: 0,
                minAngleToShowLabel: 10
              },
              donut: {
                size: "65%",
                background: "transparent",
                labels: {
                  show: !1,
                  name: {
                    show: !0,
                    fontSize: "16px",
                    fontFamily: void 0,
                    color: void 0,
                    offsetY: -10,
                    formatter: function formatter(t) {
                      return t;
                    }
                  },
                  value: {
                    show: !0,
                    fontSize: "20px",
                    fontFamily: void 0,
                    color: void 0,
                    offsetY: 10,
                    formatter: function formatter(t) {
                      return t;
                    }
                  },
                  total: {
                    show: !1,
                    showAlways: !1,
                    label: "Total",
                    color: void 0,
                    formatter: function formatter(t) {
                      return t.globals.seriesTotals.reduce(function (t, e) {
                        return t + e;
                      }, 0);
                    }
                  }
                }
              }
            },
            radar: {
              size: void 0,
              offsetX: 0,
              offsetY: 0,
              polygons: {
                strokeColors: "#e8e8e8",
                connectorColors: "#e8e8e8",
                fill: {
                  colors: void 0
                }
              }
            }
          },
          colors: void 0,
          dataLabels: {
            enabled: !0,
            enabledOnSeries: void 0,
            formatter: function formatter(t) {
              return null !== t ? t : "";
            },
            textAnchor: "middle",
            offsetX: 0,
            offsetY: 0,
            style: {
              fontSize: "12px",
              fontFamily: void 0,
              fontWeight: "bold",
              colors: void 0
            },
            background: {
              enabled: !0,
              foreColor: "#fff",
              borderRadius: 2,
              padding: 4,
              opacity: .9,
              borderWidth: 1,
              borderColor: "#fff"
            },
            dropShadow: {
              enabled: !1,
              top: 1,
              left: 1,
              blur: 1,
              color: "#000",
              opacity: .45
            }
          },
          fill: {
            type: "solid",
            colors: void 0,
            opacity: .85,
            gradient: {
              shade: "dark",
              type: "horizontal",
              shadeIntensity: .5,
              gradientToColors: void 0,
              inverseColors: !0,
              opacityFrom: 1,
              opacityTo: 1,
              stops: [0, 50, 100],
              colorStops: []
            },
            image: {
              src: [],
              width: void 0,
              height: void 0
            },
            pattern: {
              style: "squares",
              width: 6,
              height: 6,
              strokeWidth: 2
            }
          },
          grid: {
            show: !0,
            borderColor: "#e0e0e0",
            strokeDashArray: 0,
            position: "back",
            xaxis: {
              lines: {
                show: !1
              }
            },
            yaxis: {
              lines: {
                show: !0
              }
            },
            row: {
              colors: void 0,
              opacity: .5
            },
            column: {
              colors: void 0,
              opacity: .5
            },
            padding: {
              top: 0,
              right: 10,
              bottom: 0,
              left: 12
            }
          },
          labels: [],
          legend: {
            show: !0,
            showForSingleSeries: !1,
            showForNullSeries: !0,
            showForZeroSeries: !0,
            floating: !1,
            position: "bottom",
            horizontalAlign: "center",
            inverseOrder: !1,
            fontSize: "12px",
            fontFamily: void 0,
            width: void 0,
            height: void 0,
            formatter: void 0,
            tooltipHoverFormatter: void 0,
            offsetX: -20,
            offsetY: 0,
            labels: {
              colors: void 0,
              useSeriesColors: !1
            },
            markers: {
              width: 12,
              height: 12,
              strokeWidth: 0,
              fillColors: void 0,
              strokeColor: "#fff",
              radius: 12,
              customHTML: void 0,
              offsetX: 0,
              offsetY: 0,
              onClick: void 0
            },
            itemMargin: {
              horizontal: 5,
              vertical: 0
            },
            onItemClick: {
              toggleDataSeries: !0
            },
            onItemHover: {
              highlightDataSeries: !0
            }
          },
          markers: {
            discrete: [],
            size: 0,
            colors: void 0,
            strokeColors: "#fff",
            strokeWidth: 2,
            strokeOpacity: .9,
            strokeDashArray: 0,
            fillOpacity: 1,
            shape: "circle",
            radius: 2,
            offsetX: 0,
            offsetY: 0,
            onClick: void 0,
            onDblClick: void 0,
            hover: {
              size: void 0,
              sizeOffset: 3
            }
          },
          noData: {
            text: void 0,
            align: "center",
            verticalAlign: "middle",
            offsetX: 0,
            offsetY: 0,
            style: {
              color: void 0,
              fontSize: "14px",
              fontFamily: void 0
            }
          },
          responsive: [],
          series: void 0,
          states: {
            normal: {
              filter: {
                type: "none",
                value: 0
              }
            },
            hover: {
              filter: {
                type: "lighten",
                value: .15
              }
            },
            active: {
              allowMultipleDataPointsSelection: !1,
              filter: {
                type: "darken",
                value: .65
              }
            }
          },
          title: {
            text: void 0,
            align: "left",
            margin: 5,
            offsetX: 0,
            offsetY: 0,
            floating: !1,
            style: {
              fontSize: "14px",
              fontFamily: void 0,
              color: void 0
            }
          },
          subtitle: {
            text: void 0,
            align: "left",
            margin: 5,
            offsetX: 0,
            offsetY: 30,
            floating: !1,
            style: {
              fontSize: "12px",
              fontFamily: void 0,
              color: void 0
            }
          },
          stroke: {
            show: !0,
            curve: "smooth",
            lineCap: "butt",
            width: 2,
            colors: void 0,
            dashArray: 0
          },
          tooltip: {
            enabled: !0,
            enabledOnSeries: void 0,
            shared: !0,
            followCursor: !1,
            intersect: !1,
            inverseOrder: !1,
            custom: void 0,
            fillSeriesColor: !1,
            theme: "light",
            style: {
              fontSize: "12px",
              fontFamily: void 0
            },
            onDatasetHover: {
              highlightDataSeries: !1
            },
            x: {
              show: !0,
              format: "dd MMM",
              formatter: void 0
            },
            y: {
              formatter: void 0,
              title: {
                formatter: function formatter(t) {
                  return t;
                }
              }
            },
            z: {
              formatter: void 0,
              title: "Size: "
            },
            marker: {
              show: !0,
              fillColors: void 0
            },
            items: {
              display: "flex"
            },
            fixed: {
              enabled: !1,
              position: "topRight",
              offsetX: 0,
              offsetY: 0
            }
          },
          xaxis: {
            type: "category",
            categories: [],
            convertedCatToNumeric: !1,
            offsetX: 0,
            offsetY: 0,
            labels: {
              show: !0,
              rotate: -45,
              rotateAlways: !1,
              hideOverlappingLabels: !0,
              trim: !0,
              minHeight: void 0,
              maxHeight: 120,
              showDuplicates: !0,
              style: {
                colors: [],
                fontSize: "12px",
                fontFamily: void 0,
                cssClass: ""
              },
              offsetX: 0,
              offsetY: 0,
              format: void 0,
              formatter: void 0,
              datetimeUTC: !0,
              datetimeFormatter: {
                year: "yyyy",
                month: "MMM 'yy",
                day: "dd MMM",
                hour: "HH:mm",
                minute: "HH:mm:ss"
              }
            },
            axisBorder: {
              show: !0,
              color: "#e0e0e0",
              width: "100%",
              height: 1,
              offsetX: 0,
              offsetY: 0
            },
            axisTicks: {
              show: !0,
              color: "#e0e0e0",
              height: 6,
              offsetX: 0,
              offsetY: 0
            },
            tickAmount: void 0,
            tickPlacement: "on",
            min: void 0,
            max: void 0,
            range: void 0,
            floating: !1,
            position: "bottom",
            title: {
              text: void 0,
              offsetX: 0,
              offsetY: 0,
              style: {
                color: void 0,
                fontSize: "12px",
                fontFamily: void 0,
                cssClass: ""
              }
            },
            crosshairs: {
              show: !0,
              width: 1,
              position: "back",
              opacity: .9,
              stroke: {
                color: "#b6b6b6",
                width: 1,
                dashArray: 3
              },
              fill: {
                type: "solid",
                color: "#B1B9C4",
                gradient: {
                  colorFrom: "#D8E3F0",
                  colorTo: "#BED1E6",
                  stops: [0, 100],
                  opacityFrom: .4,
                  opacityTo: .5
                }
              },
              dropShadow: {
                enabled: !1,
                left: 0,
                top: 0,
                blur: 1,
                opacity: .4
              }
            },
            tooltip: {
              enabled: !0,
              offsetY: 0,
              formatter: void 0,
              style: {
                fontSize: "12px",
                fontFamily: void 0
              }
            }
          },
          yaxis: this.yAxis,
          theme: {
            mode: "light",
            palette: "palette1",
            monochrome: {
              enabled: !1,
              color: "#008FFB",
              shadeTo: "light",
              shadeIntensity: .65
            }
          }
        };
      }
    }]), t;
  }(),
      S = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.graphics = new p(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new x(this), this.xAxisAnnotations = new b(this), this.yAxisAnnotations = new m(this), this.pointsAnnotations = new v(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
    }

    return a(t, [{
      key: "drawAnnotations",
      value: function value() {
        var t = this.w;

        if (t.globals.axisCharts) {
          for (var e = this.yAxisAnnotations.drawYAxisAnnotations(), i = this.xAxisAnnotations.drawXAxisAnnotations(), a = this.pointsAnnotations.drawPointAnnotations(), s = t.config.chart.animations.enabled, r = [e, i, a], n = [i.node, e.node, a.node], o = 0; o < 3; o++) {
            t.globals.dom.elGraphical.add(r[o]), !s || t.globals.resized || t.globals.dataChanged || "scatter" !== t.config.chart.type && "bubble" !== t.config.chart.type && n[o].classList.add("apexcharts-element-hidden"), t.globals.delayedElements.push({
              el: n[o],
              index: 0
            });
          }

          this.helpers.annotationsBackground();
        }
      }
    }, {
      key: "addXaxisAnnotation",
      value: function value(t, e, i) {
        this.xAxisAnnotations.addXaxisAnnotation(t, e, i);
      }
    }, {
      key: "addYaxisAnnotation",
      value: function value(t, e, i) {
        this.yAxisAnnotations.addYaxisAnnotation(t, e, i);
      }
    }, {
      key: "addPointAnnotation",
      value: function value(t, e, i) {
        this.pointsAnnotations.addPointAnnotation(t, e, i);
      }
    }, {
      key: "clearAnnotations",
      value: function value(t) {
        var e = t.w,
            i = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
        e.globals.memory.methodsToExec.map(function (t, i) {
          "addText" !== t.label && "addAnnotation" !== t.label || e.globals.memory.methodsToExec.splice(i, 1);
        }), i = g.listToArray(i), Array.prototype.forEach.call(i, function (t) {
          for (; t.firstChild;) {
            t.removeChild(t.firstChild);
          }
        });
      }
    }, {
      key: "removeAnnotation",
      value: function value(t, e) {
        var i = t.w,
            a = i.globals.dom.baseEl.querySelectorAll(".".concat(e));
        a && (i.globals.memory.methodsToExec.map(function (t, a) {
          t.id === e && i.globals.memory.methodsToExec.splice(a, 1);
        }), Array.prototype.forEach.call(a, function (t) {
          t.parentElement.removeChild(t);
        }));
      }
    }, {
      key: "addText",
      value: function value(t, e, i) {
        var a = t.x,
            s = t.y,
            r = t.text,
            n = t.textAnchor,
            o = t.appendTo,
            l = void 0 === o ? ".apexcharts-inner" : o,
            h = t.foreColor,
            c = t.fontSize,
            d = t.fontFamily,
            g = t.cssClass,
            u = t.backgroundColor,
            f = t.borderWidth,
            p = t.strokeDashArray,
            x = t.radius,
            b = t.borderColor,
            m = t.paddingLeft,
            v = void 0 === m ? 4 : m,
            y = t.paddingRight,
            w = void 0 === y ? 4 : y,
            k = t.paddingBottom,
            A = void 0 === k ? 2 : k,
            S = t.paddingTop,
            C = void 0 === S ? 2 : S,
            L = i,
            P = L.w,
            z = P.globals.dom.baseEl.querySelector(l),
            T = this.graphics.drawText({
          x: a,
          y: s,
          text: r,
          textAnchor: n || "start",
          fontSize: c || "12px",
          fontFamily: d || P.config.chart.fontFamily,
          foreColor: h || P.config.chart.foreColor,
          cssClass: g
        });
        z.appendChild(T.node);
        var E = T.bbox();

        if (r) {
          var M = this.graphics.drawRect(E.x - v, E.y - C, E.width + v + w, E.height + A + C, x, u, 1, f, b, p);
          z.insertBefore(M.node, T.node);
        }

        return e && P.globals.memory.methodsToExec.push({
          context: L,
          method: L.addText,
          label: "addText",
          params: t
        }), i;
      }
    }, {
      key: "addXaxisAnnotationExternal",
      value: function value(t, e, i) {
        return this.addAnnotationExternal({
          params: t,
          pushToMemory: e,
          context: i,
          type: "xaxis",
          contextMethod: i.addXaxisAnnotation
        }), i;
      }
    }, {
      key: "addYaxisAnnotationExternal",
      value: function value(t, e, i) {
        return this.addAnnotationExternal({
          params: t,
          pushToMemory: e,
          context: i,
          type: "yaxis",
          contextMethod: i.addYaxisAnnotation
        }), i;
      }
    }, {
      key: "addPointAnnotationExternal",
      value: function value(t, e, i) {
        return void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal), this.addAnnotationExternal({
          params: t,
          pushToMemory: e,
          context: i,
          type: "point",
          contextMethod: i.addPointAnnotation
        }), i;
      }
    }, {
      key: "addAnnotationExternal",
      value: function value(t) {
        var e = t.params,
            i = t.pushToMemory,
            a = t.context,
            s = t.type,
            r = t.contextMethod,
            n = a,
            o = n.w,
            l = o.globals.dom.baseEl.querySelector(".apexcharts-".concat(s, "-annotations")),
            h = l.childNodes.length + 1,
            c = new A(),
            d = Object.assign({}, "xaxis" === s ? c.xAxisAnnotation : "yaxis" === s ? c.yAxisAnnotation : c.pointAnnotation),
            u = g.extend(d, e);

        switch (s) {
          case "xaxis":
            this.addXaxisAnnotation(u, l, h);
            break;

          case "yaxis":
            this.addYaxisAnnotation(u, l, h);
            break;

          case "point":
            this.addPointAnnotation(u, l, h);
        }

        var f = o.globals.dom.baseEl.querySelector(".apexcharts-".concat(s, "-annotations .apexcharts-").concat(s, "-annotation-label[rel='").concat(h, "']")),
            p = this.helpers.addBackgroundToAnno(f, u);
        return p && l.insertBefore(p.node, f), i && o.globals.memory.methodsToExec.push({
          context: n,
          id: u.id ? u.id : g.randomId(),
          method: r,
          label: "addAnnotation",
          params: e
        }), a;
      }
    }]), t;
  }(),
      C = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    }

    return a(t, [{
      key: "isValidDate",
      value: function value(t) {
        return !isNaN(this.parseDate(t));
      }
    }, {
      key: "getTimeStamp",
      value: function value(t) {
        return Date.parse(t) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : new Date(t).getTime() : t;
      }
    }, {
      key: "getDate",
      value: function value(t) {
        return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toUTCString()) : new Date(t);
      }
    }, {
      key: "parseDate",
      value: function value(t) {
        var e = Date.parse(t);
        if (!isNaN(e)) return this.getTimeStamp(t);
        var i = Date.parse(t.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
        return i = this.getTimeStamp(i);
      }
    }, {
      key: "formatDate",
      value: function value(t, e) {
        var i = this.w.globals.locale,
            a = this.w.config.xaxis.labels.datetimeUTC,
            s = ["\0"].concat(d(i.months)),
            r = ["\x01"].concat(d(i.shortMonths)),
            n = ["\x02"].concat(d(i.days)),
            o = ["\x03"].concat(d(i.shortDays));

        function l(t, e) {
          var i = t + "";

          for (e = e || 2; i.length < e;) {
            i = "0" + i;
          }

          return i;
        }

        var h = a ? t.getUTCFullYear() : t.getFullYear();
        e = (e = (e = e.replace(/(^|[^\\])yyyy+/g, "$1" + h)).replace(/(^|[^\\])yy/g, "$1" + h.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h);
        var c = (a ? t.getUTCMonth() : t.getMonth()) + 1;
        e = (e = (e = (e = e.replace(/(^|[^\\])MMMM+/g, "$1" + s[0])).replace(/(^|[^\\])MMM/g, "$1" + r[0])).replace(/(^|[^\\])MM/g, "$1" + l(c))).replace(/(^|[^\\])M/g, "$1" + c);
        var g = a ? t.getUTCDate() : t.getDate();
        e = (e = (e = (e = e.replace(/(^|[^\\])dddd+/g, "$1" + n[0])).replace(/(^|[^\\])ddd/g, "$1" + o[0])).replace(/(^|[^\\])dd/g, "$1" + l(g))).replace(/(^|[^\\])d/g, "$1" + g);
        var u = a ? t.getUTCHours() : t.getHours(),
            f = u > 12 ? u - 12 : 0 === u ? 12 : u;
        e = (e = (e = (e = e.replace(/(^|[^\\])HH+/g, "$1" + l(u))).replace(/(^|[^\\])H/g, "$1" + u)).replace(/(^|[^\\])hh+/g, "$1" + l(f))).replace(/(^|[^\\])h/g, "$1" + f);
        var p = a ? t.getUTCMinutes() : t.getMinutes();
        e = (e = e.replace(/(^|[^\\])mm+/g, "$1" + l(p))).replace(/(^|[^\\])m/g, "$1" + p);
        var x = a ? t.getUTCSeconds() : t.getSeconds();
        e = (e = e.replace(/(^|[^\\])ss+/g, "$1" + l(x))).replace(/(^|[^\\])s/g, "$1" + x);
        var b = a ? t.getUTCMilliseconds() : t.getMilliseconds();
        e = e.replace(/(^|[^\\])fff+/g, "$1" + l(b, 3)), b = Math.round(b / 10), e = e.replace(/(^|[^\\])ff/g, "$1" + l(b)), b = Math.round(b / 10);
        var m = u < 12 ? "AM" : "PM";
        e = (e = (e = e.replace(/(^|[^\\])f/g, "$1" + b)).replace(/(^|[^\\])TT+/g, "$1" + m)).replace(/(^|[^\\])T/g, "$1" + m.charAt(0));
        var v = m.toLowerCase();
        e = (e = e.replace(/(^|[^\\])tt+/g, "$1" + v)).replace(/(^|[^\\])t/g, "$1" + v.charAt(0));
        var y = -t.getTimezoneOffset(),
            w = a || !y ? "Z" : y > 0 ? "+" : "-";

        if (!a) {
          var k = (y = Math.abs(y)) % 60;
          w += l(Math.floor(y / 60)) + ":" + l(k);
        }

        e = e.replace(/(^|[^\\])K/g, "$1" + w);
        var A = (a ? t.getUTCDay() : t.getDay()) + 1;
        return e = (e = (e = (e = (e = e.replace(new RegExp(n[0], "g"), n[A])).replace(new RegExp(o[0], "g"), o[A])).replace(new RegExp(s[0], "g"), s[c])).replace(new RegExp(r[0], "g"), r[c])).replace(/\\(.)/g, "$1");
      }
    }, {
      key: "getTimeUnitsfromTimestamp",
      value: function value(t, e, i) {
        var a = this.w;
        void 0 !== a.config.xaxis.min && (t = a.config.xaxis.min), void 0 !== a.config.xaxis.max && (e = a.config.xaxis.max);
        var s = this.getDate(t),
            r = this.getDate(e),
            n = this.formatDate(s, "yyyy MM dd HH mm").split(" "),
            o = this.formatDate(r, "yyyy MM dd HH mm").split(" ");
        return {
          minMinute: parseInt(n[4], 10),
          maxMinute: parseInt(o[4], 10),
          minHour: parseInt(n[3], 10),
          maxHour: parseInt(o[3], 10),
          minDate: parseInt(n[2], 10),
          maxDate: parseInt(o[2], 10),
          minMonth: parseInt(n[1], 10) - 1,
          maxMonth: parseInt(o[1], 10) - 1,
          minYear: parseInt(n[0], 10),
          maxYear: parseInt(o[0], 10)
        };
      }
    }, {
      key: "isLeapYear",
      value: function value(t) {
        return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;
      }
    }, {
      key: "calculcateLastDaysOfMonth",
      value: function value(t, e, i) {
        return this.determineDaysOfMonths(t, e) - i;
      }
    }, {
      key: "determineDaysOfYear",
      value: function value(t) {
        var e = 365;
        return this.isLeapYear(t) && (e = 366), e;
      }
    }, {
      key: "determineRemainingDaysOfYear",
      value: function value(t, e, i) {
        var a = this.daysCntOfYear[e] + i;
        return e > 1 && this.isLeapYear() && a++, a;
      }
    }, {
      key: "determineDaysOfMonths",
      value: function value(t, e) {
        var i = 30;

        switch (t = g.monthMod(t), !0) {
          case this.months30.indexOf(t) > -1:
            2 === t && (i = this.isLeapYear(e) ? 29 : 28);
            break;

          case this.months31.indexOf(t) > -1:
          default:
            i = 31;
        }

        return i;
      }
    }]), t;
  }(),
      L = function () {
    function t(i) {
      e(this, t), this.opts = i;
    }

    return a(t, [{
      key: "line",
      value: function value() {
        return {
          chart: {
            animations: {
              easing: "swing"
            }
          },
          dataLabels: {
            enabled: !1
          },
          stroke: {
            width: 5,
            curve: "straight"
          },
          markers: {
            size: 0,
            hover: {
              sizeOffset: 6
            }
          },
          xaxis: {
            crosshairs: {
              width: 1
            }
          }
        };
      }
    }, {
      key: "sparkline",
      value: function value(t) {
        this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0;
        return g.extend(t, {
          grid: {
            show: !1,
            padding: {
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
            }
          },
          legend: {
            show: !1
          },
          xaxis: {
            labels: {
              show: !1
            },
            tooltip: {
              enabled: !1
            },
            axisBorder: {
              show: !1
            },
            axisTicks: {
              show: !1
            }
          },
          chart: {
            toolbar: {
              show: !1
            },
            zoom: {
              enabled: !1
            }
          },
          dataLabels: {
            enabled: !1
          }
        });
      }
    }, {
      key: "bar",
      value: function value() {
        return {
          chart: {
            stacked: !1,
            animations: {
              easing: "swing"
            }
          },
          plotOptions: {
            bar: {
              dataLabels: {
                position: "center"
              }
            }
          },
          dataLabels: {
            style: {
              colors: ["#fff"]
            }
          },
          stroke: {
            width: 0
          },
          fill: {
            opacity: .85
          },
          legend: {
            markers: {
              shape: "square",
              radius: 2,
              size: 8
            }
          },
          tooltip: {
            shared: !1
          },
          xaxis: {
            tooltip: {
              enabled: !1
            },
            tickPlacement: "between",
            crosshairs: {
              width: "barWidth",
              position: "back",
              fill: {
                type: "gradient"
              },
              dropShadow: {
                enabled: !1
              },
              stroke: {
                width: 0
              }
            }
          }
        };
      }
    }, {
      key: "candlestick",
      value: function value() {
        return {
          stroke: {
            width: 1,
            colors: ["#333"]
          },
          dataLabels: {
            enabled: !1
          },
          tooltip: {
            shared: !0,
            custom: function custom(t) {
              var e = t.seriesIndex,
                  i = t.dataPointIndex,
                  a = t.w;
              return '<div class="apexcharts-tooltip-candlestick"><div>Open: <span class="value">' + a.globals.seriesCandleO[e][i] + '</span></div><div>High: <span class="value">' + a.globals.seriesCandleH[e][i] + '</span></div><div>Low: <span class="value">' + a.globals.seriesCandleL[e][i] + '</span></div><div>Close: <span class="value">' + a.globals.seriesCandleC[e][i] + "</span></div></div>";
            }
          },
          states: {
            active: {
              filter: {
                type: "none"
              }
            }
          },
          xaxis: {
            crosshairs: {
              width: 1
            }
          }
        };
      }
    }, {
      key: "rangeBar",
      value: function value() {
        return {
          stroke: {
            width: 0
          },
          plotOptions: {
            bar: {
              dataLabels: {
                position: "center"
              }
            }
          },
          dataLabels: {
            enabled: !1,
            formatter: function formatter(t, e) {
              e.ctx;
              var i = e.seriesIndex,
                  a = e.dataPointIndex,
                  s = e.w,
                  r = s.globals.seriesRangeStart[i][a];
              return s.globals.seriesRangeEnd[i][a] - r;
            },
            style: {
              colors: ["#fff"]
            }
          },
          tooltip: {
            shared: !1,
            followCursor: !0,
            custom: function custom(t) {
              var e = t.ctx,
                  i = t.seriesIndex,
                  a = t.dataPointIndex,
                  s = t.y1,
                  r = t.y2,
                  n = t.w,
                  o = n.globals.seriesRangeStart[i][a],
                  l = n.globals.seriesRangeEnd[i][a],
                  h = n.globals.labels[a];
              s && r && (o = s, l = r, n.config.series[i].data[a].x && (h = n.config.series[i].data[a].x));
              var c = "",
                  d = "",
                  g = n.globals.colors[i];
              if (void 0 === n.config.tooltip.x.formatter) {
                if ("datetime" === n.config.xaxis.type) {
                  var u = new C(e);
                  c = u.formatDate(u.getDate(o), n.config.tooltip.x.format), d = u.formatDate(u.getDate(l), n.config.tooltip.x.format);
                } else c = o, d = l;
              } else c = n.config.tooltip.x.formatter(o), d = n.config.tooltip.x.formatter(l);
              return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + g + '">' + (n.config.series[i].name ? n.config.series[i].name : "") + '</span></div><div> <span class="category">' + h + ': </span> <span class="value start-value">' + c + '</span> <span class="separator">-</span> <span class="value end-value">' + d + "</span></div></div>";
            }
          },
          xaxis: {
            tickPlacement: "between",
            tooltip: {
              enabled: !1
            },
            crosshairs: {
              stroke: {
                width: 0
              }
            }
          }
        };
      }
    }, {
      key: "area",
      value: function value() {
        return {
          stroke: {
            width: 4
          },
          fill: {
            type: "gradient",
            gradient: {
              inverseColors: !1,
              shade: "light",
              type: "vertical",
              opacityFrom: .65,
              opacityTo: .5,
              stops: [0, 100, 100]
            }
          },
          markers: {
            size: 0,
            hover: {
              sizeOffset: 6
            }
          },
          tooltip: {
            followCursor: !1
          }
        };
      }
    }, {
      key: "brush",
      value: function value(t) {
        return g.extend(t, {
          chart: {
            toolbar: {
              autoSelected: "selection",
              show: !1
            },
            zoom: {
              enabled: !1
            }
          },
          dataLabels: {
            enabled: !1
          },
          stroke: {
            width: 1
          },
          tooltip: {
            enabled: !1
          },
          xaxis: {
            tooltip: {
              enabled: !1
            }
          }
        });
      }
    }, {
      key: "stacked100",
      value: function value(t) {
        t.dataLabels = t.dataLabels || {}, t.dataLabels.formatter = t.dataLabels.formatter || void 0;
        var e = t.dataLabels.formatter;
        return t.yaxis.forEach(function (e, i) {
          t.yaxis[i].min = 0, t.yaxis[i].max = 100;
        }), "bar" === t.chart.type && (t.dataLabels.formatter = e || function (t) {
          return "number" == typeof t && t ? t.toFixed(0) + "%" : t;
        }), t;
      }
    }, {
      key: "convertCatToNumeric",
      value: function value(t) {
        return t.xaxis.convertedCatToNumeric = !0, t;
      }
    }, {
      key: "convertCatToNumericXaxis",
      value: function value(t, e, i) {
        t.xaxis.type = "numeric", t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function (t) {
          return g.isNumber(t) ? Math.floor(t) : t;
        };
        var a = t.xaxis.labels.formatter,
            s = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;
        return i && i.length && (s = i.map(function (t) {
          return t.toString();
        })), s && s.length && (t.xaxis.labels.formatter = function (t) {
          return g.isNumber(t) ? a(s[Math.floor(t) - 1]) : a(t);
        }), t.xaxis.categories = [], t.labels = [], t.xaxis.tickAmount = "dataPoints", t;
      }
    }, {
      key: "bubble",
      value: function value() {
        return {
          dataLabels: {
            style: {
              colors: ["#fff"]
            }
          },
          tooltip: {
            shared: !1,
            intersect: !0
          },
          xaxis: {
            crosshairs: {
              width: 0
            }
          },
          fill: {
            type: "solid",
            gradient: {
              shade: "light",
              inverse: !0,
              shadeIntensity: .55,
              opacityFrom: .4,
              opacityTo: .8
            }
          }
        };
      }
    }, {
      key: "scatter",
      value: function value() {
        return {
          dataLabels: {
            enabled: !1
          },
          tooltip: {
            shared: !1,
            intersect: !0
          },
          markers: {
            size: 6,
            strokeWidth: 1,
            hover: {
              sizeOffset: 2
            }
          }
        };
      }
    }, {
      key: "heatmap",
      value: function value() {
        return {
          chart: {
            stacked: !1
          },
          fill: {
            opacity: 1
          },
          dataLabels: {
            style: {
              colors: ["#fff"]
            }
          },
          stroke: {
            colors: ["#fff"]
          },
          tooltip: {
            followCursor: !0,
            marker: {
              show: !1
            },
            x: {
              show: !1
            }
          },
          legend: {
            position: "top",
            markers: {
              shape: "square",
              size: 10,
              offsetY: 2
            }
          },
          grid: {
            padding: {
              right: 20
            }
          }
        };
      }
    }, {
      key: "pie",
      value: function value() {
        return {
          chart: {
            toolbar: {
              show: !1
            }
          },
          plotOptions: {
            pie: {
              donut: {
                labels: {
                  show: !1
                }
              }
            }
          },
          dataLabels: {
            formatter: function formatter(t) {
              return t.toFixed(1) + "%";
            },
            style: {
              colors: ["#fff"]
            },
            dropShadow: {
              enabled: !0
            }
          },
          stroke: {
            colors: ["#fff"]
          },
          fill: {
            opacity: 1,
            gradient: {
              shade: "dark",
              shadeIntensity: .35,
              inverseColors: !1,
              stops: [0, 100, 100]
            }
          },
          padding: {
            right: 0,
            left: 0
          },
          tooltip: {
            theme: "dark",
            fillSeriesColor: !0
          },
          legend: {
            position: "right"
          }
        };
      }
    }, {
      key: "donut",
      value: function value() {
        return {
          chart: {
            toolbar: {
              show: !1
            }
          },
          dataLabels: {
            formatter: function formatter(t) {
              return t.toFixed(1) + "%";
            },
            style: {
              colors: ["#fff"]
            },
            dropShadow: {
              enabled: !0
            }
          },
          stroke: {
            colors: ["#fff"]
          },
          fill: {
            opacity: 1,
            gradient: {
              shade: "dark",
              shadeIntensity: .4,
              inverseColors: !1,
              type: "vertical",
              opacityFrom: 1,
              opacityTo: 1,
              stops: [70, 98, 100]
            }
          },
          padding: {
            right: 0,
            left: 0
          },
          tooltip: {
            theme: "dark",
            fillSeriesColor: !0
          },
          legend: {
            position: "right"
          }
        };
      }
    }, {
      key: "radar",
      value: function value() {
        return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {
          dataLabels: {
            enabled: !1,
            style: {
              fontSize: "11px"
            }
          },
          stroke: {
            width: 2
          },
          markers: {
            size: 3,
            strokeWidth: 1,
            strokeOpacity: 1
          },
          fill: {
            opacity: .2
          },
          tooltip: {
            shared: !1,
            intersect: !0,
            followCursor: !0
          },
          grid: {
            show: !1
          },
          xaxis: {
            labels: {
              formatter: function formatter(t) {
                return t;
              },
              style: {
                colors: ["#a8a8a8"],
                fontSize: "11px"
              }
            },
            tooltip: {
              enabled: !1
            },
            crosshairs: {
              show: !1
            }
          }
        };
      }
    }, {
      key: "radialBar",
      value: function value() {
        return {
          chart: {
            animations: {
              dynamicAnimation: {
                enabled: !0,
                speed: 800
              }
            },
            toolbar: {
              show: !1
            }
          },
          fill: {
            gradient: {
              shade: "dark",
              shadeIntensity: .4,
              inverseColors: !1,
              type: "diagonal2",
              opacityFrom: 1,
              opacityTo: 1,
              stops: [70, 98, 100]
            }
          },
          padding: {
            right: 0,
            left: 0
          },
          legend: {
            show: !1,
            position: "right"
          },
          tooltip: {
            enabled: !1,
            fillSeriesColor: !0
          }
        };
      }
    }]), t;
  }(),
      P = function () {
    function i(t) {
      e(this, i), this.opts = t;
    }

    return a(i, [{
      key: "init",
      value: function value(e) {
        var i = e.responsiveOverride,
            a = this.opts,
            s = new A(),
            r = new L(a);
        this.chartType = a.chart.type, "histogram" === this.chartType && (a.chart.type = "bar", a = g.extend({
          plotOptions: {
            bar: {
              columnWidth: "99.99%"
            }
          }
        }, a)), a = this.extendYAxis(a), a = this.extendAnnotations(a);
        var n = s.init(),
            o = {};

        if (a && "object" === t(a)) {
          var l = {};
          l = -1 !== ["line", "area", "bar", "candlestick", "rangeBar", "histogram", "bubble", "scatter", "heatmap", "pie", "donut", "radar", "radialBar"].indexOf(a.chart.type) ? r[a.chart.type]() : r.line(), a.chart.brush && a.chart.brush.enabled && (l = r.brush(l)), a.chart.stacked && "100%" === a.chart.stackType && (a = r.stacked100(a)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a), a.xaxis = a.xaxis || window.Apex.xaxis || {}, i || (a.xaxis.convertedCatToNumeric = !1), ((a = this.checkForCatToNumericXAxis(this.chartType, l, a)).chart.sparkline && a.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (l = r.sparkline(l)), o = g.extend(n, l);
        }

        var h = g.extend(o, window.Apex);
        return n = g.extend(h, a), n = this.handleUserInputErrors(n);
      }
    }, {
      key: "checkForCatToNumericXAxis",
      value: function value(t, e, i) {
        var a = new L(i),
            s = "bar" === t && i.plotOptions && i.plotOptions.bar && i.plotOptions.bar.horizontal,
            r = "pie" === t || "donut" === t || "radar" === t || "radialBar" === t || "heatmap" === t,
            n = "datetime" !== i.xaxis.type && "numeric" !== i.xaxis.type,
            o = i.xaxis.tickPlacement ? i.xaxis.tickPlacement : e.xaxis && e.xaxis.tickPlacement;
        return s || r || !n || "between" === o || (i = a.convertCatToNumeric(i)), i;
      }
    }, {
      key: "extendYAxis",
      value: function value(t) {
        var e = new A();
        (void 0 === t.yaxis || !t.yaxis || Array.isArray(t.yaxis) && 0 === t.yaxis.length) && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = g.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [g.extend(e.yAxis, t.yaxis)] : t.yaxis = g.extendArray(t.yaxis, e.yAxis);
        var i = !1;
        return t.yaxis.forEach(function (t) {
          t.logarithmic && (i = !0);
        }), i && t.series.length !== t.yaxis.length && (t.yaxis = t.series.map(function (i, a) {
          if (i.name || (t.series[a].name = "series-".concat(a + 1)), t.yaxis[a]) return t.yaxis[a].seriesName = t.series[a].name, t.yaxis[a];
          var s = g.extend(e.yAxis, t.yaxis[0]);
          return s.show = !1, s;
        })), t;
      }
    }, {
      key: "extendAnnotations",
      value: function value(t) {
        return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), t = this.extendPointAnnotations(t);
      }
    }, {
      key: "extendYAxisAnnotations",
      value: function value(t) {
        var e = new A();
        return t.annotations.yaxis = g.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t;
      }
    }, {
      key: "extendXAxisAnnotations",
      value: function value(t) {
        var e = new A();
        return t.annotations.xaxis = g.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t;
      }
    }, {
      key: "extendPointAnnotations",
      value: function value(t) {
        var e = new A();
        return t.annotations.points = g.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t;
      }
    }, {
      key: "checkForDarkTheme",
      value: function value(t) {
        t.theme && "dark" === t.theme.mode && (t.tooltip || (t.tooltip = {}), "light" !== t.tooltip.theme && (t.tooltip.theme = "dark"), t.chart.foreColor || (t.chart.foreColor = "#f6f7f8"), t.theme.palette || (t.theme.palette = "palette4"));
      }
    }, {
      key: "handleUserInputErrors",
      value: function value(t) {
        var e = t;
        if (e.tooltip.shared && e.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");

        if (("bar" === e.chart.type || "rangeBar" === e.chart.type) && e.plotOptions.bar.horizontal) {
          if (e.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
          e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1;
        }

        return "bar" !== e.chart.type && "rangeBar" !== e.chart.type || e.tooltip.shared && ("barWidth" === e.xaxis.crosshairs.width && e.series.length > 1 && (console.warn('crosshairs.width = "barWidth" is only supported in single series, not in a multi-series barChart.'), e.xaxis.crosshairs.width = "tickWidth"), e.plotOptions.bar.horizontal && (e.states.hover.type = "none", e.tooltip.shared = !1), e.tooltip.followCursor || (console.warn("followCursor option in shared columns cannot be turned off. Please set %ctooltip.followCursor: true", "color: blue;"), e.tooltip.followCursor = !0)), "candlestick" === e.chart.type && e.yaxis[0].reversed && (console.warn("Reversed y-axis in candlestick chart is not supported."), e.yaxis[0].reversed = !1), e.chart.group && 0 === e.yaxis[0].labels.minWidth && console.warn("It looks like you have multiple charts in synchronization. You must provide yaxis.labels.minWidth which must be EQUAL for all grouped charts to prevent incorrect behaviour."), Array.isArray(e.stroke.width) && "line" !== e.chart.type && "area" !== e.chart.type && (console.warn("stroke.width option accepts array only for line and area charts. Reverted back to Number"), e.stroke.width = e.stroke.width[0]), e;
      }
    }]), i;
  }(),
      z = function () {
    function t() {
      e(this, t);
    }

    return a(t, [{
      key: "initGlobalVars",
      value: function value(t) {
        t.series = [], t.seriesCandleO = [], t.seriesCandleH = [], t.seriesCandleL = [], t.seriesCandleC = [], t.seriesRangeStart = [], t.seriesRangeEnd = [], t.seriesRangeBarTimeline = [], t.seriesPercent = [], t.seriesX = [], t.seriesZ = [], t.seriesNames = [], t.seriesTotals = [], t.seriesLog = [], t.stackedSeriesTotals = [], t.seriesXvalues = [], t.seriesYvalues = [], t.labels = [], t.categoryLabels = [], t.timescaleLabels = [], t.noLabelsProvided = !1, t.resizeTimer = null, t.selectionResizeTimer = null, t.delayedElements = [], t.pointsArray = [], t.dataLabelsRects = [], t.isXNumeric = !1, t.skipLastTimelinelabel = !1, t.skipFirstTimelinelabel = !1, t.x2SpaceAvailable = 0, t.isDataXYZ = !1, t.isMultiLineX = !1, t.isMultipleYAxis = !1, t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE, t.minYArr = [], t.maxYArr = [], t.maxX = -Number.MAX_VALUE, t.minX = Number.MAX_VALUE, t.initialMaxX = -Number.MAX_VALUE, t.initialMinX = Number.MAX_VALUE, t.maxDate = 0, t.minDate = Number.MAX_VALUE, t.minZ = Number.MAX_VALUE, t.maxZ = -Number.MAX_VALUE, t.minXDiff = Number.MAX_VALUE, t.yAxisScale = [], t.xAxisScale = null, t.xAxisTicksPositions = [], t.yLabelsCoords = [], t.yTitleCoords = [], t.barPadForNumericAxis = 0, t.padHorizontal = 0, t.xRange = 0, t.yRange = [], t.zRange = 0, t.dataPoints = 0, t.xTickAmount = 0;
      }
    }, {
      key: "globalVars",
      value: function value(t) {
        return {
          chartID: null,
          cuid: null,
          events: {
            beforeMount: [],
            mounted: [],
            updated: [],
            clicked: [],
            selection: [],
            dataPointSelection: [],
            zoomed: [],
            scrolled: []
          },
          colors: [],
          clientX: null,
          clientY: null,
          fill: {
            colors: []
          },
          stroke: {
            colors: []
          },
          dataLabels: {
            style: {
              colors: []
            }
          },
          radarPolygons: {
            fill: {
              colors: []
            }
          },
          markers: {
            colors: [],
            size: t.markers.size,
            largestSize: 0
          },
          animationEnded: !1,
          isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints,
          isDirty: !1,
          isExecCalled: !1,
          initialConfig: null,
          lastXAxis: [],
          lastYAxis: [],
          columnSeries: null,
          labels: [],
          timescaleLabels: [],
          noLabelsProvided: !1,
          allSeriesCollapsed: !1,
          collapsedSeries: [],
          collapsedSeriesIndices: [],
          ancillaryCollapsedSeries: [],
          ancillaryCollapsedSeriesIndices: [],
          risingSeries: [],
          dataFormatXNumeric: !1,
          capturedSeriesIndex: -1,
          capturedDataPointIndex: -1,
          selectedDataPoints: [],
          goldenPadding: 35,
          invalidLogScale: !1,
          ignoreYAxisIndexes: [],
          yAxisSameScaleIndices: [],
          maxValsInArrayIndex: 0,
          radialSize: 0,
          zoomEnabled: "zoom" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,
          panEnabled: "pan" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,
          selectionEnabled: "selection" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,
          yaxis: null,
          mousedown: !1,
          lastClientPosition: {},
          visibleXRange: void 0,
          yValueDecimal: 0,
          total: 0,
          SVGNS: "http://www.w3.org/2000/svg",
          svgWidth: 0,
          svgHeight: 0,
          noData: !1,
          locale: {},
          dom: {},
          memory: {
            methodsToExec: []
          },
          shouldAnimate: !0,
          skipLastTimelinelabel: !1,
          skipFirstTimelinelabel: !1,
          delayedElements: [],
          axisCharts: !0,
          isDataXYZ: !1,
          resized: !1,
          resizeTimer: null,
          comboCharts: !1,
          dataChanged: !1,
          previousPaths: [],
          allSeriesHasEqualX: !0,
          pointsArray: [],
          dataLabelsRects: [],
          lastDrawnDataLabelsIndexes: [],
          x2SpaceAvailable: 0,
          hasNullValues: !1,
          easing: null,
          zoomed: !1,
          gridWidth: 0,
          gridHeight: 0,
          rotateXLabels: !1,
          defaultLabels: !1,
          xLabelFormatter: void 0,
          yLabelFormatters: [],
          xaxisTooltipFormatter: void 0,
          ttKeyFormatter: void 0,
          ttVal: void 0,
          ttZFormatter: void 0,
          LINE_HEIGHT_RATIO: 1.618,
          xAxisLabelsHeight: 0,
          yAxisLabelsWidth: 0,
          scaleX: 1,
          scaleY: 1,
          translateX: 0,
          translateY: 0,
          translateYAxisX: [],
          yAxisWidths: [],
          translateXAxisY: 0,
          translateXAxisX: 0,
          tooltip: null
        };
      }
    }, {
      key: "init",
      value: function value(t) {
        var e = this.globalVars(t);
        return this.initGlobalVars(e), e.initialConfig = g.extend({}, t), e.initialSeries = JSON.parse(JSON.stringify(e.initialConfig.series)), e.lastXAxis = JSON.parse(JSON.stringify(e.initialConfig.xaxis)), e.lastYAxis = JSON.parse(JSON.stringify(e.initialConfig.yaxis)), e;
      }
    }]), t;
  }(),
      T = function () {
    function t(i) {
      e(this, t), this.opts = i;
    }

    return a(t, [{
      key: "init",
      value: function value() {
        var t = new P(this.opts).init({
          responsiveOverride: !1
        });
        return {
          config: t,
          globals: new z().init(t)
        };
      }
    }]), t;
  }(),
      E = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "getStackedSeriesTotals",
      value: function value() {
        var t = this.w,
            e = [];
        if (0 === t.globals.series.length) return e;

        for (var i = 0; i < t.globals.series[t.globals.maxValsInArrayIndex].length; i++) {
          for (var a = 0, s = 0; s < t.globals.series.length; s++) {
            void 0 !== t.globals.series[s][i] && (a += t.globals.series[s][i]);
          }

          e.push(a);
        }

        return t.globals.stackedSeriesTotals = e, e;
      }
    }, {
      key: "getSeriesTotalByIndex",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return null === t ? this.w.config.series.reduce(function (t, e) {
          return t + e;
        }, 0) : this.w.globals.series[t].reduce(function (t, e) {
          return t + e;
        }, 0);
      }
    }, {
      key: "isSeriesNull",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return 0 === (null === t ? this.w.config.series.filter(function (t) {
          return null !== t;
        }) : this.w.globals.series[t].filter(function (t) {
          return null !== t;
        })).length;
      }
    }, {
      key: "seriesHaveSameValues",
      value: function value(t) {
        return this.w.globals.series[t].every(function (t, e, i) {
          return t === i[0];
        });
      }
    }, {
      key: "getCategoryLabels",
      value: function value(t) {
        var e = this.w,
            i = t.slice();
        return e.config.xaxis.convertedCatToNumeric && (i = t.map(function (t) {
          return e.config.xaxis.labels.formatter(t - e.globals.minX + 1);
        })), i;
      }
    }, {
      key: "getLargestSeries",
      value: function value() {
        var t = this.w;
        t.globals.maxValsInArrayIndex = t.globals.series.map(function (t) {
          return t.length;
        }).indexOf(Math.max.apply(Math, t.globals.series.map(function (t) {
          return t.length;
        })));
      }
    }, {
      key: "getLargestMarkerSize",
      value: function value() {
        var t = this.w,
            e = 0;
        return t.globals.markers.size.forEach(function (t) {
          e = Math.max(e, t);
        }), t.globals.markers.largestSize = e, e;
      }
    }, {
      key: "getSeriesTotals",
      value: function value() {
        var t = this.w;
        t.globals.seriesTotals = t.globals.series.map(function (t, e) {
          var i = 0;
          if (Array.isArray(t)) for (var a = 0; a < t.length; a++) {
            i += t[a];
          } else i += t;
          return i;
        });
      }
    }, {
      key: "getSeriesTotalsXRange",
      value: function value(t, e) {
        var i = this.w;
        return i.globals.series.map(function (a, s) {
          for (var r = 0, n = 0; n < a.length; n++) {
            i.globals.seriesX[s][n] > t && i.globals.seriesX[s][n] < e && (r += a[n]);
          }

          return r;
        });
      }
    }, {
      key: "getPercentSeries",
      value: function value() {
        var t = this.w;
        t.globals.seriesPercent = t.globals.series.map(function (e, i) {
          var a = [];
          if (Array.isArray(e)) for (var s = 0; s < e.length; s++) {
            var r = t.globals.stackedSeriesTotals[s],
                n = 0;
            r && (n = 100 * e[s] / r), a.push(n);
          } else {
            var o = 100 * e / t.globals.seriesTotals.reduce(function (t, e) {
              return t + e;
            }, 0);
            a.push(o);
          }
          return a;
        });
      }
    }, {
      key: "getCalculatedRatios",
      value: function value() {
        var t,
            e,
            i,
            a,
            s = this.w.globals,
            r = [],
            n = 0,
            o = [],
            l = .1,
            h = 0;
        if (s.yRange = [], s.isMultipleYAxis) for (var c = 0; c < s.minYArr.length; c++) {
          s.yRange.push(Math.abs(s.minYArr[c] - s.maxYArr[c])), o.push(0);
        } else s.yRange.push(Math.abs(s.minY - s.maxY));
        s.xRange = Math.abs(s.maxX - s.minX), s.zRange = Math.abs(s.maxZ - s.minZ);

        for (var d = 0; d < s.yRange.length; d++) {
          r.push(s.yRange[d] / s.gridHeight);
        }

        if (e = s.xRange / s.gridWidth, i = Math.abs(s.initialMaxX - s.initialMinX) / s.gridWidth, t = s.yRange / s.gridWidth, a = s.xRange / s.gridHeight, (n = s.zRange / s.gridHeight * 16) || (n = 1), s.minY !== Number.MIN_VALUE && 0 !== Math.abs(s.minY) && (s.hasNegs = !0), s.isMultipleYAxis) {
          o = [];

          for (var g = 0; g < r.length; g++) {
            o.push(-s.minYArr[g] / r[g]);
          }
        } else o.push(-s.minY / r[0]), s.minY !== Number.MIN_VALUE && 0 !== Math.abs(s.minY) && (l = -s.minY / t, h = s.minX / e);

        return {
          yRatio: r,
          invertedYRatio: t,
          zRatio: n,
          xRatio: e,
          initialXRatio: i,
          invertedXRatio: a,
          baseLineInvertedY: l,
          baseLineY: o,
          baseLineX: h
        };
      }
    }, {
      key: "getLogSeries",
      value: function value(t) {
        var e = this.w;
        return e.globals.seriesLog = t.map(function (t, i) {
          return e.config.yaxis[i] && e.config.yaxis[i].logarithmic ? t.map(function (t) {
            return null === t ? null : (Math.log(t) - Math.log(e.globals.minYArr[i])) / (Math.log(e.globals.maxYArr[i]) - Math.log(e.globals.minYArr[i]));
          }) : t;
        }), e.globals.invalidLogScale ? t : e.globals.seriesLog;
      }
    }, {
      key: "getLogYRatios",
      value: function value(t) {
        var e = this,
            i = this.w,
            a = this.w.globals;
        return a.yLogRatio = t.slice(), a.logYRange = a.yRange.map(function (t, s) {
          if (i.config.yaxis[s] && e.w.config.yaxis[s].logarithmic) {
            var r,
                n = -Number.MAX_VALUE,
                o = Number.MIN_VALUE;
            return a.seriesLog.forEach(function (t, e) {
              t.forEach(function (t) {
                i.config.yaxis[e] && i.config.yaxis[e].logarithmic && (n = Math.max(t, n), o = Math.min(t, o));
              });
            }), r = Math.pow(a.yRange[s], Math.abs(o - n) / a.yRange[s]), a.yLogRatio[s] = r / a.gridHeight, r;
          }
        }), a.invalidLogScale ? t.slice() : a.yLogRatio;
      }
    }], [{
      key: "checkComboSeries",
      value: function value(t) {
        var e = !1,
            i = 0;
        return t.length && void 0 !== t[0].type && (e = !0, t.forEach(function (t) {
          "bar" !== t.type && "column" !== t.type && "candlestick" !== t.type || i++;
        })), {
          comboBarCount: i,
          comboCharts: e
        };
      }
    }, {
      key: "extendArrayProps",
      value: function value(t, e) {
        return e.yaxis && (e = t.extendYAxis(e)), e.annotations && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)), e.annotations.points && (e = t.extendPointAnnotations(e))), e;
      }
    }]), t;
  }(),
      M = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.opts = null, this.seriesIndex = 0;
    }

    return a(t, [{
      key: "clippedImgArea",
      value: function value(t) {
        var e = this.w,
            i = e.config,
            a = parseInt(e.globals.gridWidth, 10),
            s = parseInt(e.globals.gridHeight, 10),
            r = a > s ? a : s,
            n = t.image,
            o = 0,
            l = 0;
        void 0 === t.width && void 0 === t.height ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height ? (o = i.fill.image.width + 1, l = i.fill.image.height) : (o = r + 1, l = r) : (o = t.width, l = t.height);
        var h = document.createElementNS(e.globals.SVGNS, "pattern");
        p.setAttrs(h, {
          id: t.patternID,
          patternUnits: t.patternUnits ? t.patternUnits : "userSpaceOnUse",
          width: o + "px",
          height: l + "px"
        });
        var c = document.createElementNS(e.globals.SVGNS, "image");
        h.appendChild(c), c.setAttributeNS("http://www.w3.org/1999/xlink", "href", n), p.setAttrs(c, {
          x: 0,
          y: 0,
          preserveAspectRatio: "none",
          width: o + "px",
          height: l + "px"
        }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h);
      }
    }, {
      key: "getSeriesIndex",
      value: function value(t) {
        var e = this.w;
        return ("bar" === e.config.chart.type || "rangeBar" === e.config.chart.type) && e.config.plotOptions.bar.distributed || "heatmap" === e.config.chart.type ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex;
      }
    }, {
      key: "fillPath",
      value: function value(t) {
        var e = this.w;
        this.opts = t;
        var i,
            a,
            s,
            r = this.w.config;
        this.seriesIndex = this.getSeriesIndex(t);
        var n = this.getFillColors()[this.seriesIndex];
        "function" == typeof n && (n = n({
          seriesIndex: this.seriesIndex,
          value: t.value,
          w: e
        }));
        var o = this.getFillType(this.seriesIndex),
            l = Array.isArray(r.fill.opacity) ? r.fill.opacity[this.seriesIndex] : r.fill.opacity,
            h = n;

        if (t.color && (n = t.color), -1 === n.indexOf("rgb") ? h = g.hexToRgba(n, l) : n.indexOf("rgba") > -1 && (l = "0." + g.getOpacityFromRGBA(n)), t.opacity && (l = t.opacity), "pattern" === o && (a = this.handlePatternFill(a, n, l, h)), "gradient" === o && (s = this.handleGradientFill(s, n, l, this.seriesIndex)), "image" === o) {
          var c = r.fill.image.src,
              d = t.patternID ? t.patternID : "";
          this.clippedImgArea({
            opacity: l,
            image: Array.isArray(c) ? t.seriesNumber < c.length ? c[t.seriesNumber] : c[0] : c,
            width: t.width ? t.width : void 0,
            height: t.height ? t.height : void 0,
            patternUnits: t.patternUnits,
            patternID: "pattern".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d)
          }), i = "url(#pattern".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d, ")");
        } else i = "gradient" === o ? s : "pattern" === o ? a : h;

        return t.solid && (i = h), i;
      }
    }, {
      key: "getFillType",
      value: function value(t) {
        var e = this.w;
        return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;
      }
    }, {
      key: "getFillColors",
      value: function value() {
        var t = this.w,
            e = t.config,
            i = this.opts,
            a = [];
        return t.globals.comboCharts ? "line" === t.config.series[this.seriesIndex].type ? t.globals.stroke.colors instanceof Array ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : t.globals.fill.colors instanceof Array ? a = t.globals.fill.colors : a.push(t.globals.fill.colors) : "line" === e.chart.type ? t.globals.stroke.colors instanceof Array ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : t.globals.fill.colors instanceof Array ? a = t.globals.fill.colors : a.push(t.globals.fill.colors), void 0 !== i.fillColors && (a = [], i.fillColors instanceof Array ? a = i.fillColors.slice() : a.push(i.fillColors)), a;
      }
    }, {
      key: "handlePatternFill",
      value: function value(t, e, i, a) {
        var s = this.w.config,
            r = this.opts,
            n = new p(this.ctx),
            o = void 0 === s.fill.pattern.strokeWidth ? Array.isArray(s.stroke.width) ? s.stroke.width[this.seriesIndex] : s.stroke.width : Array.isArray(s.fill.pattern.strokeWidth) ? s.fill.pattern.strokeWidth[this.seriesIndex] : s.fill.pattern.strokeWidth,
            l = e;
        s.fill.pattern.style instanceof Array ? t = void 0 !== s.fill.pattern.style[r.seriesNumber] ? n.drawPattern(s.fill.pattern.style[r.seriesNumber], s.fill.pattern.width, s.fill.pattern.height, l, o, i) : a : t = n.drawPattern(s.fill.pattern.style, s.fill.pattern.width, s.fill.pattern.height, l, o, i);
        return t;
      }
    }, {
      key: "handleGradientFill",
      value: function value(t, e, i, a) {
        var s,
            r,
            n = this.w.config,
            o = this.opts,
            l = new p(this.ctx),
            h = new g(),
            c = n.fill.gradient.type,
            d = void 0 === n.fill.gradient.opacityFrom ? i : Array.isArray(n.fill.gradient.opacityFrom) ? n.fill.gradient.opacityFrom[a] : n.fill.gradient.opacityFrom,
            u = void 0 === n.fill.gradient.opacityTo ? i : Array.isArray(n.fill.gradient.opacityTo) ? n.fill.gradient.opacityTo[a] : n.fill.gradient.opacityTo;

        if (s = e, r = void 0 === n.fill.gradient.gradientToColors || 0 === n.fill.gradient.gradientToColors.length ? "dark" === n.fill.gradient.shade ? h.shadeColor(-1 * parseFloat(n.fill.gradient.shadeIntensity), e) : h.shadeColor(parseFloat(n.fill.gradient.shadeIntensity), e) : n.fill.gradient.gradientToColors[o.seriesNumber], n.fill.gradient.inverseColors) {
          var f = s;
          s = r, r = f;
        }

        return l.drawGradient(c, s, r, d, u, o.size, n.fill.gradient.stops, n.fill.gradient.colorStops, a);
      }
    }]), t;
  }(),
      I = function () {
    function t(i, a) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "setGlobalMarkerSize",
      value: function value() {
        var t = this.w;

        if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [t.config.markers.size], t.globals.markers.size.length > 0) {
          if (t.globals.markers.size.length < t.globals.series.length + 1) for (var e = 0; e <= t.globals.series.length; e++) {
            void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);
          }
        } else t.globals.markers.size = t.config.series.map(function (e) {
          return t.config.markers.size;
        });
      }
    }, {
      key: "plotChartMarkers",
      value: function value(t, e, i) {
        var a,
            s = this.w,
            r = e,
            n = t,
            o = null,
            l = new p(this.ctx);
        if (s.globals.markers.size[e] > 0 && (o = l.group({
          "class": "apexcharts-series-markers"
        })).attr("clip-path", "url(#gridRectMarkerMask".concat(s.globals.cuid, ")")), n.x instanceof Array) for (var h = 0; h < n.x.length; h++) {
          var c = i;
          1 === i && 0 === h && (c = 0), 1 === i && 1 === h && (c = 1);
          var d = "apexcharts-marker";

          if ("line" !== s.config.chart.type && "area" !== s.config.chart.type || s.globals.comboCharts || s.config.tooltip.intersect || (d += " no-pointer-events"), Array.isArray(s.config.markers.size) ? s.globals.markers.size[e] > 0 : s.config.markers.size > 0) {
            g.isNumber(n.y[h]) ? d += " w".concat(g.randomId()) : d = "apexcharts-nullpoint";
            var f = this.getMarkerConfig(d, e, c);
            s.config.series[r].data[i] && (s.config.series[r].data[i].fillColor && (f.pointFillColor = s.config.series[r].data[i].fillColor), s.config.series[r].data[i].strokeColor && (f.pointStrokeColor = s.config.series[r].data[i].strokeColor)), (a = l.drawMarker(n.x[h], n.y[h], f)).attr("rel", c), a.attr("j", c), a.attr("index", e), a.node.setAttribute("default-marker-size", f.pSize), new u(this.ctx).setSelectionFilter(a, e, c), this.addEvents(a), o && o.add(a);
          } else void 0 === s.globals.pointsArray[e] && (s.globals.pointsArray[e] = []), s.globals.pointsArray[e].push([n.x[h], n.y[h]]);
        }
        return o;
      }
    }, {
      key: "getMarkerConfig",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            a = this.w,
            s = this.getMarkerStyle(e),
            r = a.globals.markers.size[e],
            n = a.config.markers;
        return null !== i && n.discrete.length && n.discrete.map(function (t) {
          t.seriesIndex === e && t.dataPointIndex === i && (s.pointStrokeColor = t.strokeColor, s.pointFillColor = t.fillColor, r = t.size);
        }), {
          pSize: r,
          pRadius: n.radius,
          pWidth: n.strokeWidth instanceof Array ? n.strokeWidth[e] : n.strokeWidth,
          pointStrokeColor: s.pointStrokeColor,
          pointFillColor: s.pointFillColor,
          shape: n.shape instanceof Array ? n.shape[e] : n.shape,
          "class": t,
          pointStrokeOpacity: n.strokeOpacity instanceof Array ? n.strokeOpacity[e] : n.strokeOpacity,
          pointStrokeDashArray: n.strokeDashArray instanceof Array ? n.strokeDashArray[e] : n.strokeDashArray,
          pointFillOpacity: n.fillOpacity instanceof Array ? n.fillOpacity[e] : n.fillOpacity,
          seriesIndex: e
        };
      }
    }, {
      key: "addEvents",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx);
        t.node.addEventListener("mouseenter", i.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener("mouseleave", i.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener("mousedown", i.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener("click", e.config.markers.onClick), t.node.addEventListener("dblclick", e.config.markers.onDblClick), t.node.addEventListener("touchstart", i.pathMouseDown.bind(this.ctx, t), {
          passive: !0
        });
      }
    }, {
      key: "getMarkerStyle",
      value: function value(t) {
        var e = this.w,
            i = e.globals.markers.colors,
            a = e.config.markers.strokeColor || e.config.markers.strokeColors;
        return {
          pointStrokeColor: a instanceof Array ? a[t] : a,
          pointFillColor: i instanceof Array ? i[t] : i
        };
      }
    }]), t;
  }(),
      X = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
    }

    return a(t, [{
      key: "draw",
      value: function value(t, e, i) {
        var a = this.w,
            s = new p(this.ctx),
            r = i.realIndex,
            n = i.pointsPos,
            o = i.zRatio,
            l = i.elParent,
            h = s.group({
          "class": "apexcharts-series-markers apexcharts-series-".concat(a.config.chart.type)
        });
        if (h.attr("clip-path", "url(#gridRectMarkerMask".concat(a.globals.cuid, ")")), n.x instanceof Array) for (var c = 0; c < n.x.length; c++) {
          var d = e + 1,
              g = !0;
          0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);
          var u = 0,
              f = a.globals.markers.size[r];

          if (o !== 1 / 0) {
            f = a.globals.seriesZ[r][d] / o;
            var x = a.config.plotOptions.bubble;
            x.minBubbleRadius && f < x.minBubbleRadius && (f = x.minBubbleRadius), x.maxBubbleRadius && f > x.maxBubbleRadius && (f = x.maxBubbleRadius);
          }

          a.config.chart.animations.enabled || (u = f);
          var b = n.x[c],
              m = n.y[c];

          if (u = u || 0, null !== m && void 0 !== a.globals.series[r][d] || (g = !1), g) {
            var v = this.drawPoint(b, m, u, f, r, d, e);
            h.add(v);
          }

          l.add(h);
        }
      }
    }, {
      key: "drawPoint",
      value: function value(t, e, i, a, s, r, n) {
        var o = this.w,
            l = s,
            h = new f(this.ctx),
            c = new u(this.ctx),
            d = new M(this.ctx),
            g = new I(this.ctx),
            x = new p(this.ctx),
            b = g.getMarkerConfig("apexcharts-marker", l),
            m = d.fillPath({
          seriesNumber: s,
          patternUnits: "objectBoundingBox",
          value: o.globals.series[s][n]
        }),
            v = x.drawCircle(i);

        if (o.config.series[l].data[r] && o.config.series[l].data[r].fillColor && (m = o.config.series[l].data[r].fillColor), v.attr({
          cx: t,
          cy: e,
          fill: m,
          stroke: b.pointStrokeColor,
          "stroke-width": b.pWidth,
          "stroke-dasharray": b.pointStrokeDashArray,
          "stroke-opacity": b.pointStrokeOpacity
        }), o.config.chart.dropShadow.enabled) {
          var y = o.config.chart.dropShadow;
          c.dropShadow(v, y, s);
        }

        if (this.initialAnim && !o.globals.dataChanged) {
          var w = 1;
          o.globals.resized || (w = o.config.chart.animations.speed), h.animateCircleRadius(v, 0, a, w, o.globals.easing, function () {
            window.setTimeout(function () {
              h.animationCompleted(v);
            }, 100);
          });
        }

        if (o.globals.dataChanged) if (this.dynamicAnim) {
          var k,
              A,
              S,
              C,
              L = o.config.chart.animations.dynamicAnimation.speed;
          null != (C = o.globals.previousPaths[s] && o.globals.previousPaths[s][n]) && (k = C.x, A = C.y, S = void 0 !== C.r ? C.r : a);

          for (var P = 0; P < o.globals.collapsedSeries.length; P++) {
            o.globals.collapsedSeries[P].index === s && (L = 1, a = 0);
          }

          0 === t && 0 === e && (a = 0), h.animateCircle(v, {
            cx: k,
            cy: A,
            r: S
          }, {
            cx: t,
            cy: e,
            r: a
          }, L, o.globals.easing);
        } else v.attr({
          r: a
        });
        return v.attr({
          rel: r,
          j: r,
          index: s,
          "default-marker-size": a
        }), c.setSelectionFilter(v, s, r), g.addEvents(v), v.node.classList.add("apexcharts-marker"), v;
      }
    }, {
      key: "centerTextInBubble",
      value: function value(t) {
        var e = this.w;
        return {
          y: t += parseInt(e.config.dataLabels.style.fontSize, 10) / 4
        };
      }
    }]), t;
  }(),
      Y = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "dataLabelsCorrection",
      value: function value(t, e, i, a, s, r, n) {
        var o = this.w,
            l = !1,
            h = new p(this.ctx).getTextRects(i, n),
            c = h.width,
            d = h.height;
        void 0 === o.globals.dataLabelsRects[a] && (o.globals.dataLabelsRects[a] = []), o.globals.dataLabelsRects[a].push({
          x: t,
          y: e,
          width: c,
          height: d
        });
        var g = o.globals.dataLabelsRects[a].length - 2,
            u = void 0 !== o.globals.lastDrawnDataLabelsIndexes[a] ? o.globals.lastDrawnDataLabelsIndexes[a][o.globals.lastDrawnDataLabelsIndexes[a].length - 1] : 0;

        if (void 0 !== o.globals.dataLabelsRects[a][g]) {
          var f = o.globals.dataLabelsRects[a][u];
          (t > f.x + f.width + 2 || e > f.y + f.height + 2 || t + c < f.x) && (l = !0);
        }

        return (0 === s || r) && (l = !0), {
          x: t,
          y: e,
          textRects: h,
          drawnextLabel: l
        };
      }
    }, {
      key: "drawDataLabel",
      value: function value(t, e, i) {
        var a = this,
            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 2,
            r = this.w,
            n = new p(this.ctx),
            o = r.config.dataLabels,
            l = 0,
            h = 0,
            c = i,
            d = null;
        if (!o.enabled || t.x instanceof Array != !0) return d;
        d = n.group({
          "class": "apexcharts-data-labels"
        });

        for (var g = 0; g < t.x.length; g++) {
          if (l = t.x[g] + o.offsetX, h = t.y[g] + o.offsetY + s, !isNaN(l)) {
            1 === i && 0 === g && (c = 0), 1 === i && 1 === g && (c = 1);

            var u = r.globals.series[e][c],
                f = "",
                x = function x(t) {
              return r.config.dataLabels.formatter(t, {
                ctx: a.ctx,
                seriesIndex: e,
                dataPointIndex: c,
                w: r
              });
            };

            if ("bubble" === r.config.chart.type) {
              f = x(u = r.globals.seriesZ[e][c]), h = t.y[g] + r.config.dataLabels.offsetY;
              var b = new X(this.ctx),
                  m = b.centerTextInBubble(h, e, c);
              h = m.y;
            } else void 0 !== u && (f = x(u));

            this.plotDataLabelsText({
              x: l,
              y: h,
              text: f,
              i: e,
              j: c,
              parent: d,
              offsetCorrection: !0,
              dataLabelsConfig: r.config.dataLabels
            });
          }
        }

        return d;
      }
    }, {
      key: "plotDataLabelsText",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = t.x,
            s = t.y,
            r = t.i,
            n = t.j,
            o = t.text,
            l = t.textAnchor,
            h = t.parent,
            c = t.dataLabelsConfig,
            d = t.color,
            g = t.alwaysDrawDataLabel,
            f = t.offsetCorrection;

        if (!(Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(r) < 0)) {
          var x = {
            x: a,
            y: s,
            drawnextLabel: !0
          };
          f && (x = this.dataLabelsCorrection(a, s, o, r, n, g, parseInt(c.style.fontSize, 10))), e.globals.zoomed || (a = x.x, s = x.y), x.textRects && (a + x.textRects.width < 10 || a > e.globals.gridWidth + 10) && (o = "");
          var b = e.globals.dataLabels.style.colors[r];

          if ("bar" !== e.config.chart.type && "rangeBar" !== e.config.chart.type || !e.config.plotOptions.bar.distributed || (b = e.globals.dataLabels.style.colors[n]), d && (b = d), x.drawnextLabel) {
            var m = i.drawText({
              width: 100,
              height: parseInt(c.style.fontSize, 10),
              x: a,
              y: s,
              foreColor: b,
              textAnchor: l || c.textAnchor,
              text: o,
              fontSize: c.style.fontSize,
              fontFamily: c.style.fontFamily,
              fontWeight: c.style.fontWeight || "normal"
            });

            if (m.attr({
              "class": "apexcharts-datalabel",
              cx: a,
              cy: s
            }), c.dropShadow.enabled) {
              var v = c.dropShadow;
              new u(this.ctx).dropShadow(m, v);
            }

            h.add(m), void 0 === e.globals.lastDrawnDataLabelsIndexes[r] && (e.globals.lastDrawnDataLabelsIndexes[r] = []), e.globals.lastDrawnDataLabelsIndexes[r].push(n);
          }
        }
      }
    }, {
      key: "addBackgroundToDataLabel",
      value: function value(t, e) {
        var i = this.w,
            a = i.config.dataLabels.background,
            s = a.padding,
            r = a.padding / 2,
            n = e.width,
            o = e.height;
        return new p(this.ctx).drawRect(e.x - s, e.y - r / 2, n + 2 * s, o + r, a.borderRadius, "transparent" === i.config.chart.background ? "#fff" : i.config.chart.background, a.opacity, a.borderWidth, a.borderColor);
      }
    }, {
      key: "dataLabelsBackground",
      value: function value() {
        var t = this.w,
            e = t.config.chart.type;
        if ("bar" !== e && "rangeBar" !== e && "bubble" !== e) for (var i = t.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), a = 0; a < i.length; a++) {
          var s = i[a],
              r = s.getBBox(),
              n = null;

          if (r.width && r.height && (n = this.addBackgroundToDataLabel(s, r)), n) {
            s.parentNode.insertBefore(n.node, s);
            var o = s.getAttribute("fill");
            t.config.chart.animations.enabled && !t.globals.resized && !t.globals.dataChanged ? n.animate().attr({
              fill: o
            }) : n.attr({
              fill: o
            }), s.setAttribute("fill", t.config.dataLabels.background.foreColor);
          }
        }
      }
    }, {
      key: "bringForward",
      value: function value() {
        for (var t = this.w, e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i = t.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a = 0; a < e.length; a++) {
          i && i.insertBefore(e[a], i.nextSibling);
        }
      }
    }]), t;
  }(),
      R = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "getAllSeriesEls",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
      }
    }, {
      key: "getSeriesByName",
      value: function value(t) {
        return this.w.globals.dom.baseEl.querySelector("[seriesName='".concat(g.escapeString(t), "']"));
      }
    }, {
      key: "isSeriesHidden",
      value: function value(t) {
        var e = this.getSeriesByName(t),
            i = parseInt(e.getAttribute("data:realIndex"), 10);
        return {
          isHidden: e.classList.contains("apexcharts-series-collapsed"),
          realIndex: i
        };
      }
    }, {
      key: "addCollapsedClassToSeries",
      value: function value(t, e) {
        var i = this.w;

        function a(i) {
          for (var a = 0; a < i.length; a++) {
            i[a].index === e && t.node.classList.add("apexcharts-series-collapsed");
          }
        }

        a(i.globals.collapsedSeries), a(i.globals.ancillaryCollapsedSeries);
      }
    }, {
      key: "toggleSeries",
      value: function value(t) {
        var e = this.isSeriesHidden(t);
        return this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, e.isHidden), e.isHidden;
      }
    }, {
      key: "showSeries",
      value: function value(t) {
        var e = this.isSeriesHidden(t);
        e.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !0);
      }
    }, {
      key: "hideSeries",
      value: function value(t) {
        var e = this.isSeriesHidden(t);
        e.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !1);
      }
    }, {
      key: "resetSeries",
      value: function value() {
        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
            e = this.w,
            i = e.globals.initialSeries.slice();
        e.config.series = i, e.globals.collapsedSeries = [], e.globals.ancillaryCollapsedSeries = [], e.globals.collapsedSeriesIndices = [], e.globals.ancillaryCollapsedSeriesIndices = [], e.globals.previousPaths = [], t && this.ctx.updateHelpers._updateSeries(i, e.config.chart.animations.dynamicAnimation.enabled);
      }
    }, {
      key: "toggleSeriesOnHover",
      value: function value(t, e) {
        var i = this.w,
            a = i.globals.dom.baseEl.querySelectorAll(".apexcharts-series");

        if ("mousemove" === t.type) {
          var s = parseInt(e.getAttribute("rel"), 10) - 1,
              r = null;
          r = i.globals.axisCharts || "radialBar" === i.config.chart.type ? i.globals.axisCharts ? i.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s, "']")) : i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s + 1, "']")) : i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s + 1, "'] path"));

          for (var n = 0; n < a.length; n++) {
            a[n].classList.add("legend-mouseover-inactive");
          }

          null !== r && (i.globals.axisCharts || r.parentNode.classList.remove("legend-mouseover-inactive"), r.classList.remove("legend-mouseover-inactive"));
        } else if ("mouseout" === t.type) for (var o = 0; o < a.length; o++) {
          a[o].classList.remove("legend-mouseover-inactive");
        }
      }
    }, {
      key: "highlightRangeInSeries",
      value: function value(t, e) {
        var i = this.w,
            a = i.globals.dom.baseEl.querySelectorAll(".apexcharts-heatmap-rect"),
            s = function s() {
          for (var t = 0; t < a.length; t++) {
            a[t].classList.remove("legend-mouseover-inactive");
          }
        };

        if ("mousemove" === t.type) {
          var r = parseInt(e.getAttribute("rel"), 10) - 1;
          s(), function () {
            for (var t = 0; t < a.length; t++) {
              a[t].classList.add("legend-mouseover-inactive");
            }
          }(), function (t) {
            for (var e = 0; e < a.length; e++) {
              var i = parseInt(a[e].getAttribute("val"), 10);
              i >= t.from && i <= t.to && a[e].classList.remove("legend-mouseover-inactive");
            }
          }(i.config.plotOptions.heatmap.colorScale.ranges[r]);
        } else "mouseout" === t.type && s();
      }
    }, {
      key: "getActiveSeriesIndex",
      value: function value() {
        var t = this.w,
            e = 0;
        if (t.globals.series.length > 1) for (var i = t.globals.series.map(function (e, i) {
          return e.length > 0 && "bar" !== t.config.series[i].type && "column" !== t.config.series[i].type ? i : -1;
        }), a = 0; a < i.length; a++) {
          if (-1 !== i[a]) {
            e = i[a];
            break;
          }
        }
        return e;
      }
    }, {
      key: "getActiveConfigSeriesIndex",
      value: function value() {
        var t = this.w,
            e = 0;
        if (t.config.series.length > 1) for (var i = t.config.series.map(function (t, e) {
          return t.data && t.data.length > 0 ? e : -1;
        }), a = 0; a < i.length; a++) {
          if (-1 !== i[a]) {
            e = i[a];
            break;
          }
        }
        return e;
      }
    }, {
      key: "getPreviousPaths",
      value: function value() {
        var t = this.w;

        function e(e, i, a) {
          for (var s = e[i].childNodes, r = {
            type: a,
            paths: [],
            realIndex: e[i].getAttribute("data:realIndex")
          }, n = 0; n < s.length; n++) {
            if (s[n].hasAttribute("pathTo")) {
              var o = s[n].getAttribute("pathTo");
              r.paths.push({
                d: o
              });
            }
          }

          t.globals.previousPaths.push(r);
        }

        t.globals.previousPaths = [];
        var i = t.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-series");
        if (i.length > 0) for (var a = i.length - 1; a >= 0; a--) {
          e(i, a, "line");
        }
        var s = t.globals.dom.baseEl.querySelectorAll(".apexcharts-area-series .apexcharts-series");
        if (s.length > 0) for (var r = s.length - 1; r >= 0; r--) {
          e(s, r, "area");
        }
        var n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series .apexcharts-series");
        if (n.length > 0) for (var o = 0; o < n.length; o++) {
          e(n, o, "bar");
        }
        var l = t.globals.dom.baseEl.querySelectorAll(".apexcharts-candlestick-series .apexcharts-series");
        if (l.length > 0) for (var h = 0; h < l.length; h++) {
          e(l, h, "candlestick");
        }
        var c = t.globals.dom.baseEl.querySelectorAll(".apexcharts-radar-series .apexcharts-series");
        if (c.length > 0) for (var d = 0; d < c.length; d++) {
          e(c, d, "radar");
        }
        var g = t.globals.dom.baseEl.querySelectorAll(".apexcharts-bubble-series .apexcharts-series");
        if (g.length > 0) for (var u = 0; u < g.length; u++) {
          for (var f = t.globals.dom.baseEl.querySelectorAll(".apexcharts-bubble-series .apexcharts-series[data\\:realIndex='".concat(u, "'] circle")), p = [], x = 0; x < f.length; x++) {
            p.push({
              x: f[x].getAttribute("cx"),
              y: f[x].getAttribute("cy"),
              r: f[x].getAttribute("r")
            });
          }

          t.globals.previousPaths.push(p);
        }
        var b = t.globals.dom.baseEl.querySelectorAll(".apexcharts-scatter-series .apexcharts-series");
        if (b.length > 0) for (var m = 0; m < b.length; m++) {
          for (var v = t.globals.dom.baseEl.querySelectorAll(".apexcharts-scatter-series .apexcharts-series[data\\:realIndex='".concat(m, "'] circle")), y = [], w = 0; w < v.length; w++) {
            y.push({
              x: v[w].getAttribute("cx"),
              y: v[w].getAttribute("cy"),
              r: v[w].getAttribute("r")
            });
          }

          t.globals.previousPaths.push(y);
        }
        var k = t.globals.dom.baseEl.querySelectorAll(".apexcharts-heatmap .apexcharts-series");
        if (k.length > 0) for (var A = 0; A < k.length; A++) {
          for (var S = t.globals.dom.baseEl.querySelectorAll(".apexcharts-heatmap .apexcharts-series[data\\:realIndex='".concat(A, "'] rect")), C = [], L = 0; L < S.length; L++) {
            C.push({
              color: S[L].getAttribute("color")
            });
          }

          t.globals.previousPaths.push(C);
        }
        t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);
      }
    }, {
      key: "clearPreviousPaths",
      value: function value() {
        var t = this.w;
        t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1, t.globals.collapsedSeries = [], t.globals.collapsedSeriesIndices = [];
      }
    }, {
      key: "handleNoData",
      value: function value() {
        var t = this.w,
            e = t.config.noData,
            i = new p(this.ctx),
            a = t.globals.svgWidth / 2,
            s = t.globals.svgHeight / 2,
            r = "middle";

        if (t.globals.noData = !0, t.globals.animationEnded = !0, "left" === e.align ? (a = 10, r = "start") : "right" === e.align && (a = t.globals.svgWidth - 10, r = "end"), "top" === e.verticalAlign ? s = 50 : "bottom" === e.verticalAlign && (s = t.globals.svgHeight - 50), a += e.offsetX, s = s + parseInt(e.style.fontSize, 10) + 2 + e.offsetY, void 0 !== e.text && "" !== e.text) {
          var n = i.drawText({
            x: a,
            y: s,
            text: e.text,
            textAnchor: r,
            fontSize: e.style.fontSize,
            fontFamily: e.style.fontFamily,
            foreColor: e.style.color,
            opacity: 1,
            "class": "apexcharts-text-nodata"
          });
          t.globals.dom.Paper.add(n);
        }
      }
    }, {
      key: "setNullSeriesToZeroValues",
      value: function value(t) {
        for (var e = this.w, i = 0; i < t.length; i++) {
          if (0 === t[i].length) for (var a = 0; a < t[e.globals.maxValsInArrayIndex].length; a++) {
            t[i].push(0);
          }
        }

        return t;
      }
    }, {
      key: "hasAllSeriesEqualX",
      value: function value() {
        for (var t = !0, e = this.w, i = this.filteredSeriesX(), a = 0; a < i.length - 1; a++) {
          if (i[a][0] !== i[a + 1][0]) {
            t = !1;
            break;
          }
        }

        return e.globals.allSeriesHasEqualX = t, t;
      }
    }, {
      key: "filteredSeriesX",
      value: function value() {
        var t = this.w.globals.seriesX.map(function (t) {
          return t.length > 0 ? t : [];
        });
        return t;
      }
    }]), t;
  }(),
      F = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.coreUtils = new E(this.ctx);
    }

    return a(t, [{
      key: "isMultiFormat",
      value: function value() {
        return this.isFormatXY() || this.isFormat2DArray();
      }
    }, {
      key: "isFormatXY",
      value: function value() {
        var t = this.w.config.series.slice(),
            e = new R(this.ctx);
        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0;
      }
    }, {
      key: "isFormat2DArray",
      value: function value() {
        var t = this.w.config.series.slice(),
            e = new R(this.ctx);
        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0;
      }
    }, {
      key: "handleFormat2DArray",
      value: function value(t, e) {
        for (var i = this.w.config, a = this.w.globals, s = 0; s < t[e].data.length; s++) {
          if (void 0 !== t[e].data[s][1] && (Array.isArray(t[e].data[s][1]) && 4 === t[e].data[s][1].length ? this.twoDSeries.push(g.parseNumber(t[e].data[s][1][3])) : 5 === t[e].data[s].length ? this.twoDSeries.push(g.parseNumber(t[e].data[s][4])) : this.twoDSeries.push(g.parseNumber(t[e].data[s][1])), a.dataFormatXNumeric = !0), "datetime" === i.xaxis.type) {
            var r = new Date(t[e].data[s][0]);
            r = new Date(r).getTime(), this.twoDSeriesX.push(r);
          } else this.twoDSeriesX.push(t[e].data[s][0]);
        }

        for (var n = 0; n < t[e].data.length; n++) {
          void 0 !== t[e].data[n][2] && (this.threeDSeries.push(t[e].data[n][2]), a.isDataXYZ = !0);
        }
      }
    }, {
      key: "handleFormatXY",
      value: function value(t, e) {
        var i = this.w.config,
            a = this.w.globals,
            s = new C(this.ctx),
            r = e;
        a.collapsedSeriesIndices.indexOf(e) > -1 && (r = this.activeSeriesIndex);

        for (var n = 0; n < t[e].data.length; n++) {
          void 0 !== t[e].data[n].y && (Array.isArray(t[e].data[n].y) ? this.twoDSeries.push(g.parseNumber(t[e].data[n].y[t[e].data[n].y.length - 1])) : this.twoDSeries.push(g.parseNumber(t[e].data[n].y)));
        }

        for (var o = 0; o < t[r].data.length; o++) {
          var l = "string" == typeof t[r].data[o].x,
              h = Array.isArray(t[r].data[o].x),
              c = !h && !!s.isValidDate(t[r].data[o].x.toString());
          l || c ? l || i.xaxis.convertedCatToNumeric ? "datetime" !== i.xaxis.type || a.isRangeData ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[o].x)) : this.twoDSeriesX.push(s.parseDate(t[r].data[o].x)) : "datetime" === i.xaxis.type ? this.twoDSeriesX.push(s.parseDate(t[r].data[o].x.toString())) : (a.dataFormatXNumeric = !0, a.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[r].data[o].x))) : h ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[o].x)) : (a.isXNumeric = !0, a.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[r].data[o].x));
        }

        if (t[e].data[0] && void 0 !== t[e].data[0].z) {
          for (var d = 0; d < t[e].data.length; d++) {
            this.threeDSeries.push(t[e].data[d].z);
          }

          a.isDataXYZ = !0;
        }
      }
    }, {
      key: "handleRangeData",
      value: function value(t, e) {
        var i = this.w.config,
            a = this.w.globals,
            s = {};
        return this.isFormat2DArray() ? s = this.handleRangeDataFormat("array", t, e) : this.isFormatXY() && (s = this.handleRangeDataFormat("xy", t, e)), a.seriesRangeStart.push(s.start), a.seriesRangeEnd.push(s.end), "datetime" === i.xaxis.type && a.seriesRangeBarTimeline.push(s.rangeUniques), a.seriesRangeBarTimeline.forEach(function (t, e) {
          t && t.forEach(function (t, e) {
            t.y.forEach(function (e, i) {
              for (var a = 0; a < t.y.length; a++) {
                if (i !== a) {
                  var s = e.y1,
                      r = e.y2,
                      n = t.y[a].y1;
                  s <= t.y[a].y2 && n <= r && (t.overlaps.indexOf(e.rangeName) < 0 && t.overlaps.push(e.rangeName), t.overlaps.indexOf(t.y[a].rangeName) < 0 && t.overlaps.push(t.y[a].rangeName));
                }
              }
            });
          });
        }), s;
      }
    }, {
      key: "handleCandleStickData",
      value: function value(t, e) {
        var i = this.w.globals,
            a = {};
        return this.isFormat2DArray() ? a = this.handleCandleStickDataFormat("array", t, e) : this.isFormatXY() && (a = this.handleCandleStickDataFormat("xy", t, e)), i.seriesCandleO[e] = a.o, i.seriesCandleH[e] = a.h, i.seriesCandleL[e] = a.l, i.seriesCandleC[e] = a.c, a;
      }
    }, {
      key: "handleRangeDataFormat",
      value: function value(t, e, i) {
        var a = [],
            s = [],
            r = e[i].data.filter(function (t, e, i) {
          return e === i.findIndex(function (e) {
            return e.x === t.x;
          });
        }).map(function (t, e) {
          return {
            x: t.x,
            overlaps: [],
            y: []
          };
        }),
            n = "Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts",
            o = new R(this.ctx).getActiveConfigSeriesIndex();

        if ("array" === t) {
          if (2 !== e[o].data[0][1].length) throw new Error(n);

          for (var l = 0; l < e[i].data.length; l++) {
            a.push(e[i].data[l][1][0]), s.push(e[i].data[l][1][1]);
          }
        } else if ("xy" === t) {
          if (2 !== e[o].data[0].y.length) throw new Error(n);

          for (var h = function h(t) {
            var n = g.randomId(),
                o = e[i].data[t].x,
                l = {
              y1: e[i].data[t].y[0],
              y2: e[i].data[t].y[1],
              rangeName: n
            };
            e[i].data[t].rangeName = n;
            var h = r.findIndex(function (t) {
              return t.x === o;
            });
            r[h].y.push(l), a.push(l.y1), s.push(l.y2);
          }, c = 0; c < e[i].data.length; c++) {
            h(c);
          }
        }

        return {
          start: a,
          end: s,
          rangeUniques: r
        };
      }
    }, {
      key: "handleCandleStickDataFormat",
      value: function value(t, e, i) {
        var a = [],
            s = [],
            r = [],
            n = [],
            o = "Please provide [Open, High, Low and Close] values in valid format. Read more https://apexcharts.com/docs/series/#candlestick";

        if ("array" === t) {
          if (!Array.isArray(e[i].data[0][1]) && 5 !== e[i].data[0].length || Array.isArray(e[i].data[0][1]) && 4 !== e[i].data[0][1].length) throw new Error(o);
          if (5 === e[i].data[0].length) for (var l = 0; l < e[i].data.length; l++) {
            a.push(e[i].data[l][1]), s.push(e[i].data[l][2]), r.push(e[i].data[l][3]), n.push(e[i].data[l][4]);
          } else for (var h = 0; h < e[i].data.length; h++) {
            a.push(e[i].data[h][1][0]), s.push(e[i].data[h][1][1]), r.push(e[i].data[h][1][2]), n.push(e[i].data[h][1][3]);
          }
        } else if ("xy" === t) {
          if (4 !== e[i].data[0].y.length) throw new Error(o);

          for (var c = 0; c < e[i].data.length; c++) {
            a.push(e[i].data[c].y[0]), s.push(e[i].data[c].y[1]), r.push(e[i].data[c].y[2]), n.push(e[i].data[c].y[3]);
          }
        }

        return {
          o: a,
          h: s,
          l: r,
          c: n
        };
      }
    }, {
      key: "parseDataAxisCharts",
      value: function value(t) {
        for (var e = this, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a = this.w.config, s = this.w.globals, r = new C(i), n = a.labels.length > 0 ? a.labels.slice() : a.xaxis.categories.slice(), o = function o() {
          for (var t = 0; t < n.length; t++) {
            if ("string" == typeof n[t]) {
              if (!r.isValidDate(n[t])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
              e.twoDSeriesX.push(r.parseDate(n[t]));
            } else {
              if (13 !== String(n[t]).length) throw new Error("Please provide a valid JavaScript timestamp");
              e.twoDSeriesX.push(n[t]);
            }
          }
        }, l = 0; l < t.length; l++) {
          if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[l].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
          if ("rangeBar" !== a.chart.type && "rangeArea" !== a.chart.type && "rangeBar" !== t[l].type && "rangeArea" !== t[l].type || (s.isRangeData = !0, this.handleRangeData(t, l)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, l) : this.isFormatXY() && this.handleFormatXY(t, l), "candlestick" !== a.chart.type && "candlestick" !== t[l].type || this.handleCandleStickData(t, l), s.series.push(this.twoDSeries), s.labels.push(this.twoDSeriesX), s.seriesX.push(this.twoDSeriesX), l !== this.activeSeriesIndex || this.fallbackToCategory || (s.isXNumeric = !0);else {
            "datetime" === a.xaxis.type ? (s.isXNumeric = !0, o(), s.seriesX.push(this.twoDSeriesX)) : "numeric" === a.xaxis.type && (s.isXNumeric = !0, n.length > 0 && (this.twoDSeriesX = n, s.seriesX.push(this.twoDSeriesX))), s.labels.push(this.twoDSeriesX);
            var h = t[l].data.map(function (t) {
              return g.parseNumber(t);
            });
            s.series.push(h);
          }
          s.seriesZ.push(this.threeDSeries), void 0 !== t[l].name ? s.seriesNames.push(t[l].name) : s.seriesNames.push("series-" + parseInt(l + 1, 10));
        }

        return this.w;
      }
    }, {
      key: "parseDataNonAxisCharts",
      value: function value(t) {
        var e = this.w.globals,
            i = this.w.config;
        e.series = t.slice(), e.seriesNames = i.labels.slice();

        for (var a = 0; a < e.series.length; a++) {
          void 0 === e.seriesNames[a] && e.seriesNames.push("series-" + (a + 1));
        }

        return this.w;
      }
    }, {
      key: "handleExternalLabelsData",
      value: function value(t) {
        var e = this.w.config,
            i = this.w.globals;
        if (e.xaxis.categories.length > 0) i.labels = e.xaxis.categories;else if (e.labels.length > 0) i.labels = e.labels.slice();else if (this.fallbackToCategory) {
          if (i.labels = i.labels[0], i.seriesRangeBarTimeline.length && (i.seriesRangeBarTimeline.map(function (t) {
            t.forEach(function (t) {
              i.labels.indexOf(t.x) < 0 && t.x && i.labels.push(t.x);
            });
          }), i.labels = i.labels.filter(function (t, e, i) {
            return i.indexOf(t) === e;
          })), e.xaxis.convertedCatToNumeric) new L(e).convertCatToNumericXaxis(e, this.ctx, i.seriesX[0]), this._generateExternalLabels(t);
        } else this._generateExternalLabels(t);
      }
    }, {
      key: "_generateExternalLabels",
      value: function value(t) {
        var e = this.w.globals,
            i = this.w.config,
            a = [];

        if (e.axisCharts) {
          if (e.series.length > 0) for (var s = 0; s < e.series[e.maxValsInArrayIndex].length; s++) {
            a.push(s + 1);
          }
          e.seriesX = [];

          for (var r = 0; r < t.length; r++) {
            e.seriesX.push(a);
          }

          e.isXNumeric = !0;
        }

        if (0 === a.length) {
          a = e.axisCharts ? [0, 10] : e.series.map(function (t, e) {
            return e + 1;
          });

          for (var n = 0; n < t.length; n++) {
            e.seriesX.push(a);
          }
        }

        e.labels = a, i.xaxis.convertedCatToNumeric && (e.categoryLabels = a.map(function (t) {
          return i.xaxis.labels.formatter(t);
        })), e.noLabelsProvided = !0;
      }
    }, {
      key: "parseData",
      value: function value(t) {
        var e = this.w,
            i = e.config,
            a = e.globals;

        if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a.axisCharts ? this.parseDataAxisCharts(t) : this.parseDataNonAxisCharts(t), this.coreUtils.getLargestSeries(), "bar" === i.chart.type && i.chart.stacked) {
          var s = new R(this.ctx);
          a.series = s.setNullSeriesToZeroValues(a.series);
        }

        this.coreUtils.getSeriesTotals(), a.axisCharts && this.coreUtils.getStackedSeriesTotals(), this.coreUtils.getPercentSeries(), a.dataFormatXNumeric || a.isXNumeric && ("numeric" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length) || this.handleExternalLabelsData(t);

        for (var r = this.coreUtils.getCategoryLabels(a.labels), n = 0; n < r.length; n++) {
          if (Array.isArray(r[n])) {
            a.isMultiLineX = !0;
            break;
          }
        }
      }
    }, {
      key: "excludeCollapsedSeriesInYAxis",
      value: function value() {
        var t = this,
            e = this.w;
        e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map(function (e, i) {
          if (t.w.globals.isMultipleYAxis) return e.index;
        });
      }
    }]), t;
  }(),
      D = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.tooltipKeyFormat = "dd MMM";
    }

    return a(t, [{
      key: "xLabelFormat",
      value: function value(t, e, i) {
        var a = this.w;

        if ("datetime" === a.config.xaxis.type && void 0 === a.config.xaxis.labels.formatter && void 0 === a.config.tooltip.x.formatter) {
          var s = new C(this.ctx);
          return s.formatDate(s.getDate(e), a.config.tooltip.x.format);
        }

        return t(e, i);
      }
    }, {
      key: "defaultGeneralFormatter",
      value: function value(t) {
        return Array.isArray(t) ? t.map(function (t) {
          return t;
        }) : t;
      }
    }, {
      key: "defaultYFormatter",
      value: function value(t, e, i) {
        var a = this.w;
        return g.isNumber(t) && (t = 0 !== a.globals.yValueDecimal ? t.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : a.globals.yValueDecimal) : a.globals.maxYArr[i] - a.globals.minYArr[i] < 10 ? t.toFixed(1) : t.toFixed(0)), t;
      }
    }, {
      key: "setLabelFormatters",
      value: function value() {
        var t = this,
            e = this.w;
        return e.globals.xLabelFormatter = function (e) {
          return t.defaultGeneralFormatter(e);
        }, e.globals.xaxisTooltipFormatter = function (e) {
          return t.defaultGeneralFormatter(e);
        }, e.globals.ttKeyFormatter = function (e) {
          return t.defaultGeneralFormatter(e);
        }, e.globals.ttZFormatter = function (t) {
          return t;
        }, e.globals.legendFormatter = function (e) {
          return t.defaultGeneralFormatter(e);
        }, void 0 !== e.config.xaxis.labels.formatter ? e.globals.xLabelFormatter = e.config.xaxis.labels.formatter : e.globals.xLabelFormatter = function (t) {
          if (g.isNumber(t)) {
            if (!e.config.xaxis.convertedCatToNumeric && "numeric" === e.config.xaxis.type && e.globals.dataPoints < 50) return t.toFixed(1);
            if (e.globals.isBarHorizontal) if (e.globals.maxY - e.globals.minYArr < 4) return t.toFixed(1);
            return t.toFixed(0);
          }

          return t;
        }, "function" == typeof e.config.tooltip.x.formatter ? e.globals.ttKeyFormatter = e.config.tooltip.x.formatter : e.globals.ttKeyFormatter = e.globals.xLabelFormatter, "function" == typeof e.config.xaxis.tooltip.formatter && (e.globals.xaxisTooltipFormatter = e.config.xaxis.tooltip.formatter), Array.isArray(e.config.tooltip.y) ? e.globals.ttVal = e.config.tooltip.y : void 0 !== e.config.tooltip.y.formatter && (e.globals.ttVal = e.config.tooltip.y), void 0 !== e.config.tooltip.z.formatter && (e.globals.ttZFormatter = e.config.tooltip.z.formatter), void 0 !== e.config.legend.formatter && (e.globals.legendFormatter = e.config.legend.formatter), e.config.yaxis.forEach(function (i, a) {
          void 0 !== i.labels.formatter ? e.globals.yLabelFormatters[a] = i.labels.formatter : e.globals.yLabelFormatters[a] = function (s) {
            return e.globals.xyCharts ? Array.isArray(s) ? s.map(function (e) {
              return t.defaultYFormatter(e, i, a);
            }) : t.defaultYFormatter(s, i, a) : s;
          };
        }), e.globals;
      }
    }, {
      key: "heatmapLabelFormatters",
      value: function value() {
        var t = this.w;

        if ("heatmap" === t.config.chart.type) {
          t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();
          var e = t.globals.seriesNames.reduce(function (t, e) {
            return t.length > e.length ? t : e;
          }, 0);
          t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e;
        }
      }
    }]), t;
  }(),
      H = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "getLabel",
      value: function value(t, e, i, a) {
        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],
            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px",
            n = this.w,
            o = void 0 === t[a] ? "" : t[a],
            l = o,
            h = n.globals.xLabelFormatter,
            c = n.config.xaxis.labels.formatter,
            d = !1,
            g = new D(this.ctx),
            u = o;
        l = g.xLabelFormat(h, o, u), void 0 !== c && (l = c(o, t[a], a));

        var f = function f(t) {
          var i = null;
          return e.forEach(function (t) {
            "month" === t.unit ? i = "year" : "day" === t.unit ? i = "month" : "hour" === t.unit ? i = "day" : "minute" === t.unit && (i = "hour");
          }), i === t;
        };

        e.length > 0 ? (d = f(e[a].unit), i = e[a].position, l = e[a].value) : "datetime" === n.config.xaxis.type && void 0 === c && (l = ""), void 0 === l && (l = ""), l = Array.isArray(l) ? l : l.toString();
        var x = new p(this.ctx),
            b = {};
        return b = n.globals.rotateXLabels ? x.getTextRects(l, parseInt(r, 10), null, "rotate(".concat(n.config.xaxis.labels.rotate, " 0 0)"), !1) : x.getTextRects(l, parseInt(r, 10)), !Array.isArray(l) && (0 === l.indexOf("NaN") || 0 === l.toLowerCase().indexOf("invalid") || l.toLowerCase().indexOf("infinity") >= 0 || s.indexOf(l) >= 0 && !n.config.xaxis.labels.showDuplicates) && (l = ""), {
          x: i,
          text: l,
          textRect: b,
          isBold: d
        };
      }
    }, {
      key: "checkForOverflowingLabels",
      value: function value(t, e, i, a, s) {
        var r = this.w;

        if (0 === t && r.globals.skipFirstTimelinelabel && (e.text = ""), t === i - 1 && r.globals.skipLastTimelinelabel && (e.text = ""), r.config.xaxis.labels.hideOverlappingLabels && a.length > 0) {
          var n = s[s.length - 1];
          e.x < n.textRect.width / (r.globals.rotateXLabels ? Math.abs(r.config.xaxis.labels.rotate) / 12 : 1.1) + n.x && (e.text = "");
        }

        return e;
      }
    }, {
      key: "checkForReversedLabels",
      value: function value(t, e) {
        var i = this.w;
        return i.config.yaxis[t] && i.config.yaxis[t].reversed && e.reverse(), e;
      }
    }, {
      key: "drawYAxisTicks",
      value: function value(t, e, i, a, s, r, n) {
        var o = this.w,
            l = new p(this.ctx),
            h = o.globals.translateY;

        if (a.show && e > 0) {
          !0 === o.config.yaxis[s].opposite && (t += a.width);

          for (var c = e; c >= 0; c--) {
            var d = h + e / 10 + o.config.yaxis[s].labels.offsetY - 1;
            o.globals.isBarHorizontal && (d = r * c), "heatmap" === o.config.chart.type && (d += r / 2);
            var g = l.drawLine(t + i.offsetX - a.width + a.offsetX, d + a.offsetY, t + i.offsetX + a.offsetX, d + a.offsetY, a.color);
            n.add(g), h += r;
          }
        }
      }
    }]), t;
  }(),
      O = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "getSvgString",
      value: function value() {
        return this.w.globals.dom.Paper.svg();
      }
    }, {
      key: "cleanup",
      value: function value() {
        var t = this.w,
            e = t.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs"),
            i = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs");
        e && (e.setAttribute("x", -500), e.setAttribute("x1", -500), e.setAttribute("x2", -500)), i && (i.setAttribute("y", -100), i.setAttribute("y1", -100), i.setAttribute("y2", -100));
      }
    }, {
      key: "svgUrl",
      value: function value() {
        this.cleanup();
        var t = this.getSvgString(),
            e = new Blob([t], {
          type: "image/svg+xml;charset=utf-8"
        });
        return URL.createObjectURL(e);
      }
    }, {
      key: "dataURI",
      value: function value() {
        var t = this;
        return new Promise(function (e) {
          var i = t.w;
          t.cleanup();
          var a = document.createElement("canvas");
          a.width = i.globals.svgWidth, a.height = parseInt(i.globals.dom.elWrap.style.height, 10);
          var s = "transparent" === i.config.chart.background ? "#fff" : i.config.chart.background,
              r = a.getContext("2d");
          r.fillStyle = s, r.fillRect(0, 0, a.width, a.height);
          var n = window.URL || window.webkitURL || window,
              o = new Image();
          o.crossOrigin = "anonymous";
          var l = t.getSvgString(),
              h = "data:image/svg+xml," + encodeURIComponent(l);
          o.onload = function () {
            r.drawImage(o, 0, 0), n.revokeObjectURL(h);
            var t = a.toDataURL("image/png");
            e(t);
          }, o.src = h;
        });
      }
    }, {
      key: "exportToSVG",
      value: function value() {
        this.triggerDownload(this.svgUrl(), ".svg");
      }
    }, {
      key: "exportToPng",
      value: function value() {
        var t = this;
        this.dataURI().then(function (e) {
          t.triggerDownload(e, ".png");
        });
      }
    }, {
      key: "exportToCSV",
      value: function value(t) {
        var e = this,
            i = t.series,
            a = t.columnDelimiter,
            s = void 0 === a ? "," : a,
            r = t.lineDelimiter,
            n = void 0 === r ? "\n" : r,
            o = this.w,
            l = [],
            h = [],
            c = "data:text/csv;charset=utf-8,",
            d = new F(this.ctx),
            g = new H(this.ctx),
            u = function u(t) {
          var i = "";

          if (o.globals.axisCharts) {
            if ("category" === o.config.xaxis.type || o.config.xaxis.convertedCatToNumeric) if (o.globals.isBarHorizontal) {
              var a = o.globals.yLabelFormatters[0],
                  s = new R(e.ctx).getActiveSeriesIndex();
              i = a(o.globals.labels[t], {
                seriesIndex: s,
                dataPointIndex: t,
                w: o
              });
            } else i = g.getLabel(o.globals.labels, o.globals.timescaleLabels, 0, t).text;
            "datetime" === o.config.xaxis.type && (o.config.xaxis.categories.length ? i = o.config.xaxis.categories[t] : o.config.labels.length && (i = o.config.labels[t]));
          } else i = o.config.labels[t];

          return i;
        };

        i.map(function (t, e) {
          o.globals.axisCharts ? function (t, e) {
            if (h.push(t.name), (l = []).push("x"), l.push("y"), h.push(l.join(s)), t.data && t.data.length) for (var a = 0; a < t.data.length; a++) {
              l = [];
              var r = u(a);
              r || (d.isFormatXY() ? r = i[e].data[a].x : d.isFormat2DArray() && (r = i[e].data[a] ? i[e].data[a][0] : "")), l.push(r), l.push(o.globals.series[e][a]), ("candlestick" === o.config.chart.type || t.type && "candlestick" === t.type) && (l.pop(), l.push(o.globals.seriesCandleO[e][a]), l.push(o.globals.seriesCandleH[e][a]), l.push(o.globals.seriesCandleL[e][a]), l.push(o.globals.seriesCandleC[e][a])), "rangeBar" === o.config.chart.type && (l.pop(), l.push(o.globals.seriesRangeStart[e][a]), l.push(o.globals.seriesRangeEnd[e][a])), h.push(l.join(s));
            }
          }(t, e) : ((l = []).push(o.globals.labels[e]), l.push(o.globals.series[e]), h.push(l.join(s)));
        }), c += h.join(n), this.triggerDownload(encodeURI(c), ".csv");
      }
    }, {
      key: "triggerDownload",
      value: function value(t, e) {
        var i = document.createElement("a");
        i.href = t, i.download = this.w.globals.chartID + e, document.body.appendChild(i), i.click(), document.body.removeChild(i);
      }
    }]), t;
  }(),
      N = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var a = this.w;
      this.axesUtils = new H(i), this.xaxisLabels = a.globals.labels.slice(), a.globals.timescaleLabels.length > 0 && !a.globals.isBarHorizontal && (this.xaxisLabels = a.globals.timescaleLabels.slice()), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === a.config.xaxis.position ? this.offY = 0 : this.offY = a.globals.gridHeight + 1, this.offY = this.offY + a.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === a.config.chart.type && a.config.plotOptions.bar.horizontal, this.xaxisFontSize = a.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = a.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = a.config.xaxis.labels.style.colors, this.xaxisBorderWidth = a.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = a.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = a.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = a.config.xaxis.axisBorder.height, this.yaxis = a.config.yaxis[0];
    }

    return a(t, [{
      key: "drawXaxis",
      value: function value() {
        var t,
            e = this,
            i = this.w,
            a = new p(this.ctx),
            s = a.group({
          "class": "apexcharts-xaxis",
          transform: "translate(".concat(i.config.xaxis.offsetX, ", ").concat(i.config.xaxis.offsetY, ")")
        }),
            r = a.group({
          "class": "apexcharts-xaxis-texts-g",
          transform: "translate(".concat(i.globals.translateXAxisX, ", ").concat(i.globals.translateXAxisY, ")")
        });
        s.add(r);

        for (var n = i.globals.padHorizontal, o = [], l = 0; l < this.xaxisLabels.length; l++) {
          o.push(this.xaxisLabels[l]);
        }

        if (i.globals.isXNumeric) {
          var h = o.length > 1 ? o.length - 1 : o.length;
          t = i.globals.gridWidth / h, n = n + t / 2 + i.config.xaxis.labels.offsetX;
        } else t = i.globals.gridWidth / o.length, n = n + t + i.config.xaxis.labels.offsetX;

        var c = o.length;
        if (i.config.xaxis.labels.show) for (var d = function d(s) {
          var l = n - t / 2 + i.config.xaxis.labels.offsetX;
          0 === s && 1 === c && t / 2 === n && 1 === i.globals.dataPoints && (l = i.globals.gridWidth / 2);
          var h = e.axesUtils.getLabel(o, i.globals.timescaleLabels, l, s, e.drawnLabels, e.xaxisFontSize),
              d = 28;
          i.globals.rotateXLabels && (d = 22), h = e.axesUtils.checkForOverflowingLabels(s, h, c, e.drawnLabels, e.drawnLabelsRects);
          var g = a.drawText({
            x: h.x,
            y: e.offY + i.config.xaxis.labels.offsetY + d,
            text: h.text,
            textAnchor: "middle",
            fontWeight: h.isBold ? 600 : 400,
            fontSize: e.xaxisFontSize,
            fontFamily: e.xaxisFontFamily,
            foreColor: Array.isArray(e.xaxisForeColors) ? i.config.xaxis.convertedCatToNumeric ? e.xaxisForeColors[i.globals.minX + s - 1] : e.xaxisForeColors[s] : e.xaxisForeColors,
            isPlainText: !1,
            cssClass: "apexcharts-xaxis-label " + i.config.xaxis.labels.style.cssClass
          });
          r.add(g);
          var u = document.createElementNS(i.globals.SVGNS, "title");
          u.textContent = h.text, g.node.appendChild(u), "" !== h.text && (e.drawnLabels.push(h.text), e.drawnLabelsRects.push(h)), n += t;
        }, g = 0; g <= c - 1; g++) {
          d(g);
        }

        if (void 0 !== i.config.xaxis.title.text) {
          var u = a.group({
            "class": "apexcharts-xaxis-title"
          }),
              f = a.drawText({
            x: i.globals.gridWidth / 2 + i.config.xaxis.title.offsetX,
            y: this.offY - parseFloat(this.xaxisFontSize) + i.globals.xAxisLabelsHeight + i.config.xaxis.title.offsetY,
            text: i.config.xaxis.title.text,
            textAnchor: "middle",
            fontSize: i.config.xaxis.title.style.fontSize,
            fontFamily: i.config.xaxis.title.style.fontFamily,
            foreColor: i.config.xaxis.title.style.color,
            cssClass: "apexcharts-xaxis-title-text " + i.config.xaxis.title.style.cssClass
          });
          u.add(f), s.add(u);
        }

        if (i.config.xaxis.axisBorder.show) {
          var x = 0;
          "bar" === i.config.chart.type && i.globals.isXNumeric && (x -= 15);
          var b = a.drawLine(i.globals.padHorizontal + x + i.config.xaxis.axisBorder.offsetX, this.offY, this.xaxisBorderWidth, this.offY, i.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
          s.add(b);
        }

        return s;
      }
    }, {
      key: "drawXaxisInversed",
      value: function value(t) {
        var e,
            i,
            a = this.w,
            s = new p(this.ctx),
            r = a.config.yaxis[0].opposite ? a.globals.translateYAxisX[t] : 0,
            n = s.group({
          "class": "apexcharts-yaxis apexcharts-xaxis-inversed",
          rel: t
        }),
            o = s.group({
          "class": "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
          transform: "translate(" + r + ", 0)"
        });
        n.add(o);
        var l = [];
        if (a.config.yaxis[t].show) for (var h = 0; h < this.xaxisLabels.length; h++) {
          l.push(this.xaxisLabels[h]);
        }
        i = -(e = a.globals.gridHeight / l.length) / 2.2;
        var c = a.globals.yLabelFormatters[0],
            d = a.config.yaxis[0].labels;
        if (d.show) for (var g = 0; g <= l.length - 1; g++) {
          var u = void 0 === l[g] ? "" : l[g];
          u = c(u, {
            seriesIndex: t,
            dataPointIndex: g,
            w: a
          });
          var f = 0;
          Array.isArray(u) && (f = u.length / 2 * parseInt(d.style.fontSize, 10));
          var x = s.drawText({
            x: d.offsetX - 15,
            y: i + e + d.offsetY - f,
            text: u,
            textAnchor: this.yaxis.opposite ? "start" : "end",
            foreColor: d.style.color ? d.style.color : d.style.colors[g],
            fontSize: d.style.fontSize,
            fontFamily: d.style.fontFamily,
            isPlainText: !1,
            cssClass: "apexcharts-yaxis-label " + d.style.cssClass
          });
          o.add(x);
          var b = document.createElementNS(a.globals.SVGNS, "title");

          if (b.textContent = u.text, x.node.appendChild(b), 0 !== a.config.yaxis[t].labels.rotate) {
            var m = s.rotateAroundCenter(x.node);
            x.node.setAttribute("transform", "rotate(".concat(a.config.yaxis[t].labels.rotate, " 0 ").concat(m.y, ")"));
          }

          i += e;
        }

        if (void 0 !== a.config.yaxis[0].title.text) {
          var v = s.group({
            "class": "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
            transform: "translate(" + r + ", 0)"
          }),
              y = s.drawText({
            x: 0,
            y: a.globals.gridHeight / 2,
            text: a.config.yaxis[0].title.text,
            textAnchor: "middle",
            foreColor: a.config.yaxis[0].title.style.color,
            fontSize: a.config.yaxis[0].title.style.fontSize,
            fontFamily: a.config.yaxis[0].title.style.fontFamily,
            cssClass: "apexcharts-yaxis-title-text " + a.config.yaxis[0].title.style.cssClass
          });
          v.add(y), n.add(v);
        }

        var w = 0;
        this.isCategoryBarHorizontal && a.config.yaxis[0].opposite && (w = a.globals.gridWidth);
        var k = a.config.xaxis.axisBorder;

        if (k.show) {
          var A = s.drawLine(a.globals.padHorizontal + k.offsetX + w, 1 + k.offsetY, a.globals.padHorizontal + k.offsetX + w, a.globals.gridHeight + k.offsetY, k.color, 0);
          n.add(A);
        }

        return a.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(w, l.length, a.config.yaxis[0].axisBorder, a.config.yaxis[0].axisTicks, 0, e, n), n;
      }
    }, {
      key: "drawXaxisTicks",
      value: function value(t, e) {
        var i = this.w,
            a = t;

        if (!(t < 0 || t - 2 > i.globals.gridWidth)) {
          var s = this.offY + i.config.xaxis.axisTicks.offsetY,
              r = s + i.config.xaxis.axisTicks.height;

          if (i.config.xaxis.axisTicks.show) {
            var n = new p(this.ctx).drawLine(t + i.config.xaxis.axisTicks.offsetX, s + i.config.xaxis.offsetY, a + i.config.xaxis.axisTicks.offsetX, r + i.config.xaxis.offsetY, i.config.xaxis.axisTicks.color);
            e.add(n), n.node.classList.add("apexcharts-xaxis-tick");
          }
        }
      }
    }, {
      key: "getXAxisTicksPositions",
      value: function value() {
        var t = this.w,
            e = [],
            i = this.xaxisLabels.length,
            a = t.globals.padHorizontal;
        if (t.globals.timescaleLabels.length > 0) for (var s = 0; s < i; s++) {
          a = this.xaxisLabels[s].position, e.push(a);
        } else for (var r = i, n = 0; n < r; n++) {
          var o = r;
          t.globals.isXNumeric && "bar" !== t.config.chart.type && (o -= 1), a += t.globals.gridWidth / o, e.push(a);
        }
        return e;
      }
    }, {
      key: "xAxisLabelCorrections",
      value: function value() {
        var t = this.w,
            e = new p(this.ctx),
            i = t.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"),
            a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text"),
            s = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"),
            r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
        if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways) for (var n = 0; n < a.length; n++) {
          var o = e.rotateAroundCenter(a[n]);
          o.y = o.y - 1, o.x = o.x + 1, a[n].setAttribute("transform", "rotate(".concat(t.config.xaxis.labels.rotate, " ").concat(o.x, " ").concat(o.y, ")")), a[n].setAttribute("text-anchor", "end");
          i.setAttribute("transform", "translate(0, ".concat(-10, ")"));
          var l = a[n].childNodes;
          t.config.xaxis.labels.trim && Array.prototype.forEach.call(l, function (i) {
            e.placeTextWithEllipsis(i, i.textContent, t.config.xaxis.labels.maxHeight - ("bottom" === t.config.legend.position ? 20 : 10));
          });
        } else !function () {
          for (var i = t.globals.gridWidth / (t.globals.labels.length + 1), s = 0; s < a.length; s++) {
            var r = a[s].childNodes;
            t.config.xaxis.labels.trim && "datetime" !== t.config.xaxis.type && Array.prototype.forEach.call(r, function (t) {
              e.placeTextWithEllipsis(t, t.textContent, i);
            });
          }
        }();

        if (s.length > 0) {
          var h = s[s.length - 1].getBBox(),
              c = s[0].getBBox();
          h.x < -20 && s[s.length - 1].parentNode.removeChild(s[s.length - 1]), c.x + c.width > t.globals.gridWidth && !t.globals.isBarHorizontal && s[0].parentNode.removeChild(s[0]);

          for (var d = 0; d < r.length; d++) {
            e.placeTextWithEllipsis(r[d], r[d].textContent, t.config.yaxis[0].labels.maxWidth - 2 * parseFloat(t.config.yaxis[0].title.style.fontSize) - 20);
          }
        }
      }
    }]), t;
  }(),
      W = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var a = this.w;
      this.xaxisLabels = a.globals.labels.slice(), this.axesUtils = new H(i), this.isTimelineBar = "datetime" === a.config.xaxis.type && a.globals.seriesRangeBarTimeline.length, a.globals.timescaleLabels.length > 0 && (this.xaxisLabels = a.globals.timescaleLabels.slice());
    }

    return a(t, [{
      key: "drawGridArea",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            e = this.w,
            i = new p(this.ctx);
        null === t && (t = i.group({
          "class": "apexcharts-grid"
        }));
        var a = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, "transparent"),
            s = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, "transparent");
        return t.add(s), t.add(a), t;
      }
    }, {
      key: "drawGrid",
      value: function value() {
        var t = this.w.globals,
            e = null;
        return t.axisCharts && (e = this.renderGrid(), t.dom.elGraphical.add(e.el), this.drawGridArea(e.el)), e;
      }
    }, {
      key: "createGridMask",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = new p(this.ctx),
            a = Array.isArray(t.config.stroke.width) ? 0 : t.config.stroke.width;

        if (Array.isArray(t.config.stroke.width)) {
          var s = 0;
          t.config.stroke.width.forEach(function (t) {
            s = Math.max(s, t);
          }), a = s;
        }

        e.dom.elGridRectMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e.cuid)), e.dom.elGridRectMarkerMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e.cuid));
        var r = t.config.chart.type,
            n = 0,
            o = 0;
        ("bar" === r || "rangeBar" === r || t.globals.comboBarCount > 0) && t.globals.isXNumeric && !t.globals.isBarHorizontal && (n = t.config.grid.padding.left, o = t.config.grid.padding.right, e.barPadForNumericAxis > n && (n = e.barPadForNumericAxis, o = e.barPadForNumericAxis)), e.dom.elGridRect = i.drawRect(-a / 2 - n - 2, -a / 2, e.gridWidth + a + o + n + 4, e.gridHeight + a, 0, "#fff"), new E(this).getLargestMarkerSize();
        var l = t.globals.markers.largestSize + 1;
        e.dom.elGridRectMarker = i.drawRect(-l, -l, e.gridWidth + 2 * l, e.gridHeight + 2 * l, 0, "#fff"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);
        var h = e.dom.baseEl.querySelector("defs");
        h.appendChild(e.dom.elGridRectMask), h.appendChild(e.dom.elGridRectMarkerMask);
      }
    }, {
      key: "_drawGridLines",
      value: function value(t) {
        var e = t.i,
            i = t.x1,
            a = t.y1,
            s = t.x2,
            r = t.y2,
            n = t.xCount,
            o = t.parent,
            l = this.w;
        0 === e && l.globals.skipFirstTimelinelabel || e === n - 1 && l.globals.skipLastTimelinelabel || "radar" === l.config.chart.type || (l.config.grid.xaxis.lines.show && this._drawGridLine({
          x1: i,
          y1: a,
          x2: s,
          y2: r,
          parent: o
        }), new N(this.ctx).drawXaxisTicks(i, this.elg));
      }
    }, {
      key: "_drawGridLine",
      value: function value(t) {
        var e = t.x1,
            i = t.y1,
            a = t.x2,
            s = t.y2,
            r = t.parent,
            n = this.w,
            o = n.config.grid.strokeDashArray,
            l = new p(this).drawLine(e, i, a, s, n.config.grid.borderColor, o);
        l.node.classList.add("apexcharts-gridline"), r.add(l);
      }
    }, {
      key: "_drawGridBandRect",
      value: function value(t) {
        var e = t.c,
            i = t.x1,
            a = t.y1,
            s = t.x2,
            r = t.y2,
            n = t.type,
            o = this.w,
            l = new p(this.ctx);

        if ("column" !== n || "datetime" !== o.config.xaxis.type) {
          var h = o.config.grid[n].colors[e],
              c = l.drawRect(i, a, s, r, 0, h, o.config.grid[n].opacity);
          this.elg.add(c), c.node.classList.add("apexcharts-grid-".concat(n));
        }
      }
    }, {
      key: "_drawXYLines",
      value: function value(t) {
        var e = this,
            i = t.xCount,
            a = t.tickAmount,
            s = this.w;

        if (s.config.grid.xaxis.lines.show || s.config.xaxis.axisTicks.show) {
          var r = s.globals.padHorizontal,
              n = s.globals.gridHeight;
          s.globals.timescaleLabels.length ? function (t) {
            for (var a = t.xC, s = t.x1, r = t.y1, n = t.x2, o = t.y2, l = 0; l < a; l++) {
              s = e.xaxisLabels[l].position, n = e.xaxisLabels[l].position, e._drawGridLines({
                i: l,
                x1: s,
                y1: r,
                x2: n,
                y2: o,
                xCount: i,
                parent: e.elgridLinesV
              });
            }
          }({
            xC: i,
            x1: r,
            y1: 0,
            x2: void 0,
            y2: n
          }) : (s.globals.isXNumeric && (i = s.globals.xAxisScale.result.length), function (t) {
            for (var a = t.xC, r = t.x1, n = t.y1, o = t.x2, l = t.y2, h = 0; h < a + (s.globals.isXNumeric ? 0 : 1); h++) {
              0 === h && 1 === a && 1 === s.globals.dataPoints && (r = s.globals.gridWidth / 2), e._drawGridLines({
                i: h,
                x1: r,
                y1: n,
                x2: o,
                y2: l,
                xCount: i,
                parent: e.elgridLinesV
              }), o = r += s.globals.gridWidth / (s.globals.isXNumeric ? a - 1 : a);
            }
          }({
            xC: i,
            x1: r,
            y1: 0,
            x2: void 0,
            y2: n
          }));
        }

        if (s.config.grid.yaxis.lines.show) {
          var o = 0,
              l = 0,
              h = s.globals.gridWidth,
              c = a + 1;
          this.isTimelineBar && (c = s.globals.labels.length);

          for (var d = 0; d < c + (this.isTimelineBar ? 1 : 0); d++) {
            this._drawGridLine({
              x1: 0,
              y1: o,
              x2: h,
              y2: l,
              parent: this.elgridLinesH
            }), l = o += s.globals.gridHeight / (this.isTimelineBar ? c : a);
          }
        }
      }
    }, {
      key: "_drawInvertedXYLines",
      value: function value(t) {
        var e = t.xCount,
            i = this.w;
        if (i.config.grid.xaxis.lines.show || i.config.xaxis.axisTicks.show) for (var a, s = i.globals.padHorizontal, r = i.globals.gridHeight, n = 0; n < e + 1; n++) {
          i.config.grid.xaxis.lines.show && this._drawGridLine({
            x1: s,
            y1: 0,
            x2: a,
            y2: r,
            parent: this.elgridLinesV
          }), new N(this.ctx).drawXaxisTicks(s, this.elg), a = s = s + i.globals.gridWidth / e + .3;
        }
        if (i.config.grid.yaxis.lines.show) for (var o = 0, l = 0, h = i.globals.gridWidth, c = 0; c < i.globals.dataPoints + 1; c++) {
          this._drawGridLine({
            x1: 0,
            y1: o,
            x2: h,
            y2: l,
            parent: this.elgridLinesH
          }), l = o += i.globals.gridHeight / i.globals.dataPoints;
        }
      }
    }, {
      key: "renderGrid",
      value: function value() {
        var t = this.w,
            e = new p(this.ctx);
        this.elg = e.group({
          "class": "apexcharts-grid"
        }), this.elgridLinesH = e.group({
          "class": "apexcharts-gridlines-horizontal"
        }), this.elgridLinesV = e.group({
          "class": "apexcharts-gridlines-vertical"
        }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide());

        for (var i, a = 8, s = 0; s < t.globals.series.length && (void 0 !== t.globals.yAxisScale[s] && (a = t.globals.yAxisScale[s].result.length - 1), !(a > 2)); s++) {
          ;
        }

        return !t.globals.isBarHorizontal || this.isTimelineBar ? (i = this.xaxisLabels.length, this.isTimelineBar && (a = t.globals.labels.length), this._drawXYLines({
          xCount: i,
          tickAmount: a
        })) : (i = a, this._drawInvertedXYLines({
          xCount: i,
          tickAmount: a
        })), this.drawGridBands(i, a), {
          el: this.elg,
          xAxisTickWidth: t.globals.gridWidth / i
        };
      }
    }, {
      key: "drawGridBands",
      value: function value(t, e) {
        var i = this.w;
        if (void 0 !== i.config.grid.row.colors && i.config.grid.row.colors.length > 0) for (var a = 0, s = i.globals.gridHeight / e, r = i.globals.gridWidth, n = 0, o = 0; n < e; n++, o++) {
          o >= i.config.grid.row.colors.length && (o = 0), this._drawGridBandRect({
            c: o,
            x1: 0,
            y1: a,
            x2: r,
            y2: s,
            type: "row"
          }), a += i.globals.gridHeight / e;
        }
        if (void 0 !== i.config.grid.column.colors && i.config.grid.column.colors.length > 0) for (var l = "category" === i.config.xaxis.type || i.config.xaxis.convertedCatToNumeric ? t - 1 : t, h = i.globals.padHorizontal, c = i.globals.padHorizontal + i.globals.gridWidth / l, d = i.globals.gridHeight, g = 0, u = 0; g < t; g++, u++) {
          u >= i.config.grid.column.colors.length && (u = 0), this._drawGridBandRect({
            c: u,
            x1: h,
            y1: 0,
            x2: c,
            y2: d,
            type: "column"
          }), h += i.globals.gridWidth / l;
        }
      }
    }]), t;
  }(),
      B = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "niceScale",
      value: function value(t, e, i) {
        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 10,
            r = arguments.length > 5 ? arguments[5] : void 0,
            n = this.w;

        if ("dataPoints" === s && (s = n.globals.dataPoints - 1), t === Number.MIN_VALUE && 0 === e || !g.isNumber(t) && !g.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) {
          t = 0, e = s;
          var o = this.linearScale(t, e, s);
          return o;
        }

        t > e ? (console.warn("axis.min cannot be greater than axis.max"), e = t + .1) : t === e && (t = 0 === t ? 0 : t - .5, e = 0 === e ? 2 : e + .5);
        var l = [],
            h = Math.abs(e - t);
        h < 1 && r && ("candlestick" === n.config.chart.type || "candlestick" === n.config.series[a].type || n.globals.isRangeData) && (e *= 1.01);
        var c = s + 1;
        c < 2 ? c = 2 : c > 2 && (c -= 2);
        var d = h / c,
            u = Math.floor(g.log10(d)),
            f = Math.pow(10, u),
            p = Math.round(d / f);
        p < 1 && (p = 1);
        var x = p * f,
            b = x * Math.floor(t / x),
            m = x * Math.ceil(e / x),
            v = b;

        if (r && h > 2) {
          for (; l.push(v), !((v += x) > m);) {
            ;
          }

          return {
            result: l,
            niceMin: l[0],
            niceMax: l[l.length - 1]
          };
        }

        var y = t;
        (l = []).push(y);

        for (var w = Math.abs(e - t) / s, k = 0; k <= s; k++) {
          y += w, l.push(y);
        }

        return l[l.length - 1] >= e && l.pop(), {
          result: l,
          niceMin: l[0],
          niceMax: l[l.length - 1]
        };
      }
    }, {
      key: "linearScale",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
            a = Math.abs(e - t),
            s = a / i;
        i === Number.MAX_VALUE && (i = 10, s = 1);

        for (var r = [], n = t; i >= 0;) {
          r.push(n), n += s, i -= 1;
        }

        return {
          result: r,
          niceMin: r[0],
          niceMax: r[r.length - 1]
        };
      }
    }, {
      key: "logarithmicScale",
      value: function value(t, e, i, a) {
        (e < 0 || e === Number.MIN_VALUE) && (e = .01);

        for (var s = Math.log(e) / Math.log(10), r = Math.log(i) / Math.log(10), n = Math.abs(i - e) / a, o = [], l = e; a >= 0;) {
          o.push(l), l += n, a -= 1;
        }

        var h = o.map(function (t, a) {
          t <= 0 && (t = .01);
          var n = (r - s) / (i - e),
              o = Math.pow(10, s + n * (t - s));
          return Math.round(o / g.roundToBase(o, 10)) * g.roundToBase(o, 10);
        });
        return 0 === h[0] && (h[0] = 1), {
          result: h,
          niceMin: h[0],
          niceMax: h[h.length - 1]
        };
      }
    }, {
      key: "setYScaleForIndex",
      value: function value(t, e, i) {
        var a = this.w.globals,
            s = this.w.config,
            r = a.isBarHorizontal ? s.xaxis : s.yaxis[t];
        void 0 === a.yAxisScale[t] && (a.yAxisScale[t] = []);
        var n = Math.abs(i - e);
        if (r.logarithmic && n <= 5 && (a.invalidLogScale = !0), r.logarithmic && n > 5) a.allSeriesCollapsed = !1, a.yAxisScale[t] = this.logarithmicScale(t, e, i, r.tickAmount ? r.tickAmount : Math.floor(Math.log10(i)));else if (i !== -Number.MAX_VALUE && g.isNumber(i)) {
          if (a.allSeriesCollapsed = !1, void 0 === r.min && void 0 === r.max || r.forceNiceScale) {
            var o = void 0 === s.yaxis[t].max && void 0 === s.yaxis[t].min || s.yaxis[t].forceNiceScale;
            a.yAxisScale[t] = this.niceScale(e, i, n, t, r.tickAmount ? r.tickAmount : n < 5 && n > 1 ? n + 1 : 5, o);
          } else a.yAxisScale[t] = this.linearScale(e, i, r.tickAmount);
        } else a.yAxisScale[t] = this.linearScale(0, 5, 5);
      }
    }, {
      key: "setXScale",
      value: function value(t, e) {
        var i = this.w,
            a = i.globals,
            s = i.config.xaxis,
            r = Math.abs(e - t);
        return e !== -Number.MAX_VALUE && g.isNumber(e) ? a.xAxisScale = this.niceScale(t, e, r, 0, s.tickAmount ? s.tickAmount : r < 5 && r > 1 ? r + 1 : 5) : a.xAxisScale = this.linearScale(0, 5, 5), a.xAxisScale;
      }
    }, {
      key: "setMultipleYScales",
      value: function value() {
        var t = this,
            e = this.w.globals,
            i = this.w.config,
            a = e.minYArr.concat([]),
            s = e.maxYArr.concat([]),
            r = [];
        i.yaxis.forEach(function (n, o) {
          var l = o;
          i.series.forEach(function (t, i) {
            t.name === n.seriesName && -1 === e.collapsedSeriesIndices.indexOf(i) && (l = i, o !== i ? r.push({
              index: i,
              similarIndex: o,
              alreadyExists: !0
            }) : r.push({
              index: i
            }));
          });
          var h = a[l],
              c = s[l];
          t.setYScaleForIndex(o, h, c);
        }), this.sameScaleInMultipleAxes(a, s, r);
      }
    }, {
      key: "sameScaleInMultipleAxes",
      value: function value(t, e, i) {
        var a = this,
            s = this.w.config,
            r = this.w.globals,
            n = [];
        i.forEach(function (t) {
          t.alreadyExists && (void 0 === n[t.index] && (n[t.index] = []), n[t.index].push(t.index), n[t.index].push(t.similarIndex));
        }), r.yAxisSameScaleIndices = n, n.forEach(function (t, e) {
          n.forEach(function (i, a) {
            var s, r;
            e !== a && (s = t, r = i, s.filter(function (t) {
              return -1 !== r.indexOf(t);
            })).length > 0 && (n[e] = n[e].concat(n[a]));
          });
        });
        var o = n.map(function (t) {
          return t.filter(function (e, i) {
            return t.indexOf(e) === i;
          });
        }).map(function (t) {
          return t.sort();
        });
        n = n.filter(function (t) {
          return !!t;
        });
        var l = o.slice(),
            h = l.map(function (t) {
          return JSON.stringify(t);
        });
        l = l.filter(function (t, e) {
          return h.indexOf(JSON.stringify(t)) === e;
        });
        var c = [],
            d = [];
        t.forEach(function (t, i) {
          l.forEach(function (a, s) {
            a.indexOf(i) > -1 && (void 0 === c[s] && (c[s] = [], d[s] = []), c[s].push({
              key: i,
              value: t
            }), d[s].push({
              key: i,
              value: e[i]
            }));
          });
        });
        var g = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, Number.MIN_VALUE),
            u = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
        c.forEach(function (t, e) {
          t.forEach(function (t, i) {
            g[e] = Math.min(t.value, g[e]);
          });
        }), d.forEach(function (t, e) {
          t.forEach(function (t, i) {
            u[e] = Math.max(t.value, u[e]);
          });
        }), t.forEach(function (t, e) {
          d.forEach(function (t, i) {
            var n = g[i],
                o = u[i];
            s.chart.stacked && (o = 0, t.forEach(function (t, e) {
              o += t.value, n !== Number.MIN_VALUE && (n += c[i][e].value);
            })), t.forEach(function (i, l) {
              t[l].key === e && (void 0 !== s.yaxis[e].min && (n = "function" == typeof s.yaxis[e].min ? s.yaxis[e].min(r.minY) : s.yaxis[e].min), void 0 !== s.yaxis[e].max && (o = "function" == typeof s.yaxis[e].max ? s.yaxis[e].max(r.maxY) : s.yaxis[e].max), a.setYScaleForIndex(e, n, o));
            });
          });
        });
      }
    }, {
      key: "autoScaleY",
      value: function value(t, e, i) {
        t || (t = this);
        var a = t.w;
        if (a.globals.isMultipleYAxis || a.globals.collapsedSeries.length) return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."), e;
        var s = a.globals.seriesX[0],
            r = a.config.chart.stacked;
        return e.forEach(function (t, n) {
          for (var o = 0, l = 0; l < s.length; l++) {
            if (s[l] >= i.xaxis.min) {
              o = l;
              break;
            }
          }

          var h,
              c,
              d = a.globals.minYArr[n],
              g = a.globals.maxYArr[n],
              u = a.globals.stackedSeriesTotals;
          a.globals.series.forEach(function (n, l) {
            var f = n[o];
            r ? (f = u[o], h = c = f, u.forEach(function (t, e) {
              s[e] <= i.xaxis.max && s[e] >= i.xaxis.min && (t > c && null !== t && (c = t), n[e] < h && null !== n[e] && (h = n[e]));
            })) : (h = c = f, n.forEach(function (t, e) {
              if (s[e] <= i.xaxis.max && s[e] >= i.xaxis.min) {
                var r = t,
                    n = t;
                a.globals.series.forEach(function (i, a) {
                  null !== t && (r = Math.min(i[e], r), n = Math.max(i[e], n));
                }), n > c && null !== n && (c = n), r < h && null !== r && (h = r);
              }
            })), void 0 === h && void 0 === c && (h = d, c = g), (c *= c < 0 ? .9 : 1.1) < 0 && c < g && (c = g), (h *= h < 0 ? 1.1 : .9) < 0 && h > d && (h = d), e.length > 1 ? (e[l].min = void 0 === t.min ? h : t.min, e[l].max = void 0 === t.max ? c : t.max) : (e[0].min = void 0 === t.min ? h : t.min, e[0].max = void 0 === t.max ? c : t.max);
          });
        }), e;
      }
    }]), t;
  }(),
      V = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.scales = new B(i);
    }

    return a(t, [{
      key: "init",
      value: function value() {
        this.setYRange(), this.setXRange(), this.setZRange();
      }
    }, {
      key: "getMinYMaxY",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,
            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
            s = this.w.config,
            r = this.w.globals,
            n = -Number.MAX_VALUE,
            o = Number.MIN_VALUE;
        null === a && (a = t + 1);
        var l = r.series,
            h = l,
            c = l;
        "candlestick" === s.chart.type ? (h = r.seriesCandleL, c = r.seriesCandleH) : r.isRangeData && (h = r.seriesRangeStart, c = r.seriesRangeEnd);

        for (var d = t; d < a; d++) {
          r.dataPoints = Math.max(r.dataPoints, l[d].length);

          for (var u = 0; u < r.series[d].length; u++) {
            var f = l[d][u];
            null !== f && g.isNumber(f) ? (n = Math.max(n, c[d][u]), e = Math.min(e, h[d][u]), i = Math.max(i, h[d][u]), "candlestick" === this.w.config.chart.type && (n = Math.max(n, r.seriesCandleO[d][u]), n = Math.max(n, r.seriesCandleH[d][u]), n = Math.max(n, r.seriesCandleL[d][u]), i = n = Math.max(n, r.seriesCandleC[d][u])), g.isFloat(f) && (f = g.noExponents(f), r.yValueDecimal = Math.max(r.yValueDecimal, f.toString().split(".")[1].length)), o > h[d][u] && h[d][u] < 0 && (o = h[d][u])) : r.hasNullValues = !0;
          }
        }

        return "rangeBar" === s.chart.type && r.seriesRangeStart.length && "datetime" === s.xaxis.type && (o = e), "bar" === s.chart.type && o < 0 && n < 0 && (n = 0), {
          minY: o,
          maxY: n,
          lowestY: e,
          highestY: i
        };
      }
    }, {
      key: "setYRange",
      value: function value() {
        var t = this.w.globals,
            e = this.w.config;
        t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;
        var i = Number.MAX_VALUE;
        if (t.isMultipleYAxis) for (var a = 0; a < t.series.length; a++) {
          var s = this.getMinYMaxY(a, i, null, a + 1);
          t.minYArr.push(s.minY), t.maxYArr.push(s.maxY), i = s.lowestY;
        }
        var r = this.getMinYMaxY(0, i, null, t.series.length);

        if (t.minY = r.minY, t.maxY = r.maxY, i = r.lowestY, e.chart.stacked) {
          var n = [],
              o = [];
          if (t.series.length) for (var l = 0; l < t.series[t.maxValsInArrayIndex].length; l++) {
            for (var h = 0, c = 0, d = 0; d < t.series.length; d++) {
              null !== t.series[d][l] && g.isNumber(t.series[d][l]) && (t.series[d][l] > 0 ? h = h + parseFloat(t.series[d][l]) + 1e-4 : c += parseFloat(t.series[d][l])), d === t.series.length - 1 && (n.push(h), o.push(c));
            }
          }

          for (var u = 0; u < n.length; u++) {
            t.maxY = Math.max(t.maxY, n[u]), t.minY = Math.min(t.minY, o[u]);
          }
        }

        if (("line" === e.chart.type || "area" === e.chart.type || "candlestick" === e.chart.type) && t.minY === Number.MIN_VALUE && i !== -Number.MAX_VALUE && i !== t.maxY) {
          var f = t.maxY - i;
          i >= 0 && i <= 10 && (f = 0), t.minY = i - 5 * f / 100, i > 0 && t.minY < 0 && (t.minY = 0), t.maxY = t.maxY + 5 * f / 100;
        }

        return e.yaxis.map(function (e, i) {
          void 0 !== e.max && ("number" == typeof e.max ? t.maxYArr[i] = e.max : "function" == typeof e.max && (t.maxYArr[i] = e.max(t.maxY)), t.maxY = t.maxYArr[i]), void 0 !== e.min && ("number" == typeof e.min ? t.minYArr[i] = e.min : "function" == typeof e.min && (t.minYArr[i] = e.min(t.minY)), t.minY = t.minYArr[i]);
        }), t.isBarHorizontal && (void 0 !== e.xaxis.min && "number" == typeof e.xaxis.min && (t.minY = e.xaxis.min), void 0 !== e.xaxis.max && "number" == typeof e.xaxis.max && (t.maxY = e.xaxis.max)), t.isMultipleYAxis ? (this.scales.setMultipleYScales(), t.minY = i, t.yAxisScale.forEach(function (e, i) {
          t.minYArr[i] = e.niceMin, t.maxYArr[i] = e.niceMax;
        })) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.yAxisScale[0].niceMin, t.maxYArr[0] = t.yAxisScale[0].niceMax), {
          minY: t.minY,
          maxY: t.maxY,
          minYArr: t.minYArr,
          maxYArr: t.maxYArr
        };
      }
    }, {
      key: "setXRange",
      value: function value() {
        var t = this.w.globals,
            e = this.w.config,
            i = "numeric" === e.xaxis.type || "datetime" === e.xaxis.type || "category" === e.xaxis.type && !t.noLabelsProvided || t.noLabelsProvided || t.isXNumeric;
        if (t.isXNumeric) for (var a = 0; a < t.series.length; a++) {
          if (t.labels[a]) for (var s = 0; s < t.labels[a].length; s++) {
            null !== t.labels[a][s] && g.isNumber(t.labels[a][s]) && (t.maxX = Math.max(t.maxX, t.labels[a][s]), t.initialMaxX = Math.max(t.maxX, t.labels[a][s]), t.minX = Math.min(t.minX, t.labels[a][s]), t.initialMinX = Math.min(t.minX, t.labels[a][s]));
          }
        }

        if (t.noLabelsProvided && 0 === e.xaxis.categories.length && (t.maxX = t.labels[t.labels.length - 1], t.initialMaxX = t.labels[t.labels.length - 1], t.minX = 1, t.initialMinX = 1), t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric) {
          var r;
          if (void 0 === e.xaxis.tickAmount ? (r = Math.round(t.svgWidth / 150), "numeric" === e.xaxis.type && t.dataPoints < 30 && (r = t.dataPoints - 1), r > t.dataPoints && 0 !== t.dataPoints && (r = t.dataPoints - 1)) : "dataPoints" === e.xaxis.tickAmount ? (t.series.length > 1 && (r = t.series[t.maxValsInArrayIndex].length - 1), t.isXNumeric && (r = t.maxX - t.minX - 1)) : r = e.xaxis.tickAmount, t.xTickAmount = r, void 0 !== e.xaxis.max && "number" == typeof e.xaxis.max && (t.maxX = e.xaxis.max), void 0 !== e.xaxis.min && "number" == typeof e.xaxis.min && (t.minX = e.xaxis.min), void 0 !== e.xaxis.range && (t.minX = t.maxX - e.xaxis.range), t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE) {
            if (e.xaxis.convertedCatToNumeric) {
              for (var n = [], o = t.minX - 1; o < t.maxX; o++) {
                n.push(o + 1);
              }

              t.xAxisScale = {
                result: n,
                niceMin: n[0],
                niceMax: n[n.length - 1]
              };
            } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);
          } else t.xAxisScale = this.scales.linearScale(1, r, r), t.noLabelsProvided && t.labels.length > 0 && (t.xAxisScale = this.scales.linearScale(1, t.labels.length, r - 1), t.seriesX = t.labels.slice());
          i && (t.labels = t.xAxisScale.result.slice());
        }

        if (t.minX === t.maxX) {
          var l = new C(this.ctx);

          if ("datetime" === e.xaxis.type) {
            var h = e.xaxis.labels.datetimeUTC,
                c = l.getDate(t.minX);
            h ? c.setUTCDate(c.getDate() - 2) : c.setDate(c.getDate() - 2), t.minX = new Date(c).getTime();
            var d = l.getDate(t.maxX);
            h ? d.setUTCDate(d.getDate() + 2) : d.setDate(d.getDate() + 2), t.maxX = new Date(d).getTime();
          } else ("numeric" === e.xaxis.type || "category" === e.xaxis.type && !t.noLabelsProvided) && (t.minX = t.minX - 2, t.initialMinX = t.minX, t.maxX = t.maxX + 2, t.initialMaxX = t.maxX);
        }

        return t.isXNumeric && t.seriesX.forEach(function (e, i) {
          1 === e.length && e.push(t.seriesX[t.maxValsInArrayIndex][t.seriesX[t.maxValsInArrayIndex].length - 1]);
          var a = e.slice();
          a.sort(function (t, e) {
            return t - e;
          }), a.forEach(function (e, a) {
            if (a > 0) {
              var s = e - t.seriesX[i][a - 1];
              s > 0 && (t.minXDiff = Math.min(s, t.minXDiff));
            }
          }), 1 === t.dataPoints && t.minXDiff === Number.MAX_VALUE && (t.minXDiff = .5);
        }), {
          minX: t.minX,
          maxX: t.maxX
        };
      }
    }, {
      key: "setZRange",
      value: function value() {
        var t = this.w.globals;
        if (t.isDataXYZ) for (var e = 0; e < t.series.length; e++) {
          if (void 0 !== t.seriesZ[e]) for (var i = 0; i < t.seriesZ[e].length; i++) {
            null !== t.seriesZ[e][i] && g.isNumber(t.seriesZ[e][i]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i]), t.minZ = Math.min(t.minZ, t.seriesZ[e][i]));
          }
        }
      }
    }]), t;
  }(),
      G = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var a = this.w;
      this.xaxisFontSize = a.config.xaxis.labels.style.fontSize, this.axisFontFamily = a.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = a.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === a.config.chart.type && a.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === a.config.xaxis.position && (this.xAxisoffX = a.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new H(i);
    }

    return a(t, [{
      key: "drawYaxis",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = e.config.yaxis[t].labels.style.fontSize,
            s = e.config.yaxis[t].labels.style.fontFamily,
            r = i.group({
          "class": "apexcharts-yaxis",
          rel: t,
          transform: "translate(" + e.globals.translateYAxisX[t] + ", 0)"
        });
        if (!e.config.yaxis[t].show) return r;
        var n = i.group({
          "class": "apexcharts-yaxis-texts-g"
        });
        r.add(n);
        var o = e.globals.yAxisScale[t].result.length - 1,
            l = e.globals.gridHeight / o,
            h = e.globals.translateY,
            c = e.globals.yLabelFormatters[t],
            d = e.globals.yAxisScale[t].result.slice();
        d = this.axesUtils.checkForReversedLabels(t, d);
        var g = "";
        if (e.config.yaxis[t].labels.show) for (var u = o; u >= 0; u--) {
          var f = d[u];
          f = c(f, u);
          var x = e.config.yaxis[t].labels.padding;
          e.config.yaxis[t].opposite && 0 !== e.config.yaxis.length && (x *= -1);
          var b = i.drawText({
            x: x,
            y: h + o / 10 + e.config.yaxis[t].labels.offsetY + 1,
            text: f,
            textAnchor: e.config.yaxis[t].opposite ? "start" : "end",
            fontSize: a,
            fontFamily: s,
            foreColor: e.config.yaxis[t].labels.style.color,
            isPlainText: !1,
            cssClass: "apexcharts-yaxis-label " + e.config.yaxis[t].labels.style.cssClass
          });

          if (u === o && (g = b), n.add(b), 0 !== e.config.yaxis[t].labels.rotate) {
            var m = i.rotateAroundCenter(g.node),
                v = i.rotateAroundCenter(b.node);
            b.node.setAttribute("transform", "rotate(".concat(e.config.yaxis[t].labels.rotate, " ").concat(m.x, " ").concat(v.y, ")"));
          }

          h += l;
        }

        if (void 0 !== e.config.yaxis[t].title.text) {
          var y = i.group({
            "class": "apexcharts-yaxis-title"
          }),
              w = 0;
          e.config.yaxis[t].opposite && (w = e.globals.translateYAxisX[t]);
          var k = i.drawText({
            x: w,
            y: e.globals.gridHeight / 2 + e.globals.translateY + e.config.yaxis[t].title.offsetY,
            text: e.config.yaxis[t].title.text,
            textAnchor: "end",
            foreColor: e.config.yaxis[t].title.style.color,
            fontSize: e.config.yaxis[t].title.style.fontSize,
            fontFamily: e.config.yaxis[t].title.style.fontFamily,
            cssClass: "apexcharts-yaxis-title-text " + e.config.yaxis[t].title.style.cssClass
          });
          y.add(k), r.add(y);
        }

        var A = e.config.yaxis[t].axisBorder,
            S = 31 + A.offsetX;

        if (e.config.yaxis[t].opposite && (S = -31 - A.offsetX), A.show) {
          var C = i.drawLine(S, e.globals.translateY + A.offsetY - 2, S, e.globals.gridHeight + e.globals.translateY + A.offsetY + 2, A.color, 0, A.width);
          r.add(C);
        }

        return e.config.yaxis[t].axisTicks.show && this.axesUtils.drawYAxisTicks(S, o, A, e.config.yaxis[t].axisTicks, t, l, r), r;
      }
    }, {
      key: "drawYaxisInversed",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = i.group({
          "class": "apexcharts-xaxis apexcharts-yaxis-inversed"
        }),
            s = i.group({
          "class": "apexcharts-xaxis-texts-g",
          transform: "translate(".concat(e.globals.translateXAxisX, ", ").concat(e.globals.translateXAxisY, ")")
        });
        a.add(s);
        var r = e.globals.yAxisScale[t].result.length - 1,
            n = e.globals.gridWidth / r + .1,
            o = n + e.config.xaxis.labels.offsetX,
            l = e.globals.xLabelFormatter,
            h = e.globals.yAxisScale[t].result.slice(),
            c = e.globals.timescaleLabels;
        c.length > 0 && (this.xaxisLabels = c.slice(), r = (h = c.slice()).length), h = this.axesUtils.checkForReversedLabels(t, h);
        var d = c.length;
        if (e.config.xaxis.labels.show) for (var g = d ? 0 : r; d ? g < d : g >= 0; d ? g++ : g--) {
          var u = h[g];
          u = l(u, g);
          var f = e.globals.gridWidth + e.globals.padHorizontal - (o - n + e.config.xaxis.labels.offsetX);

          if (c.length) {
            var x = this.axesUtils.getLabel(h, c, f, g, this.drawnLabels, this.xaxisFontSize);
            f = x.x, u = x.text, this.drawnLabels.push(x.text), 0 === g && e.globals.skipFirstTimelinelabel && (u = ""), g === h.length - 1 && e.globals.skipLastTimelinelabel && (u = "");
          }

          var b = i.drawText({
            x: f,
            y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30,
            text: u,
            textAnchor: "middle",
            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,
            fontSize: this.xaxisFontSize,
            fontFamily: this.xaxisFontFamily,
            isPlainText: !1,
            cssClass: "apexcharts-xaxis-label " + e.config.xaxis.labels.style.cssClass
          });
          s.add(b), b.tspan(u);
          var m = document.createElementNS(e.globals.SVGNS, "title");
          m.textContent = u, b.node.appendChild(m), o += n;
        }
        return this.inversedYAxisTitleText(a), this.inversedYAxisBorder(a), a;
      }
    }, {
      key: "inversedYAxisBorder",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = e.config.xaxis.axisBorder;

        if (a.show) {
          var s = 0;
          "bar" === e.config.chart.type && e.globals.isXNumeric && (s -= 15);
          var r = i.drawLine(e.globals.padHorizontal + s + a.offsetX, this.xAxisoffX, e.globals.gridWidth, this.xAxisoffX, a.color, 0, a.height);
          t.add(r);
        }
      }
    }, {
      key: "inversedYAxisTitleText",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx);

        if (void 0 !== e.config.xaxis.title.text) {
          var a = i.group({
            "class": "apexcharts-xaxis-title apexcharts-yaxis-title-inversed"
          }),
              s = i.drawText({
            x: e.globals.gridWidth / 2,
            y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e.config.xaxis.title.style.fontSize) + 20,
            text: e.config.xaxis.title.text,
            textAnchor: "middle",
            fontSize: e.config.xaxis.title.style.fontSize,
            fontFamily: e.config.xaxis.title.style.fontFamily,
            cssClass: "apexcharts-xaxis-title-text " + e.config.xaxis.title.style.cssClass
          });
          a.add(s), t.add(a);
        }
      }
    }, {
      key: "yAxisTitleRotate",
      value: function value(t, e) {
        var i = this.w,
            a = new p(this.ctx),
            s = {
          width: 0,
          height: 0
        },
            r = {
          width: 0,
          height: 0
        },
            n = i.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-texts-g"));
        null !== n && (s = n.getBoundingClientRect());
        var o = i.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-title text"));

        if (null !== o && (r = o.getBoundingClientRect()), null !== o) {
          var l = this.xPaddingForYAxisTitle(t, s, r, e);
          o.setAttribute("x", l.xPos - (e ? 10 : 0));
        }

        if (null !== o) {
          var h = a.rotateAroundCenter(o);
          o.setAttribute("transform", "rotate(".concat(e ? "" : "-").concat(i.config.yaxis[t].title.rotate, " ").concat(h.x, " ").concat(h.y, ")"));
        }
      }
    }, {
      key: "xPaddingForYAxisTitle",
      value: function value(t, e, i, a) {
        var s = this.w,
            r = 0,
            n = 0,
            o = 10;
        return void 0 === s.config.yaxis[t].title.text || t < 0 ? {
          xPos: n,
          padd: 0
        } : (a ? (n = e.width + s.config.yaxis[t].title.offsetX + i.width / 2 + o / 2, 0 === (r += 1) && (n -= o / 2)) : (n = -1 * e.width + s.config.yaxis[t].title.offsetX + o / 2 + i.width / 2, s.globals.isBarHorizontal && (o = 25, n = -1 * e.width - s.config.yaxis[t].title.offsetX - o)), {
          xPos: n,
          padd: o
        });
      }
    }, {
      key: "setYAxisXPosition",
      value: function value(t, e) {
        var i = this.w,
            a = 0,
            s = 0,
            r = 21,
            n = 1;
        i.config.yaxis.length > 1 && (this.multipleYs = !0), i.config.yaxis.map(function (o, l) {
          var h = i.globals.ignoreYAxisIndexes.indexOf(l) > -1 || !o.show || o.floating || 0 === t[l].width,
              c = t[l].width + e[l].width;
          o.opposite ? i.globals.isBarHorizontal ? (s = i.globals.gridWidth + i.globals.translateX - 1, i.globals.translateYAxisX[l] = s - o.labels.offsetX) : (s = i.globals.gridWidth + i.globals.translateX + n, h || (n = n + c + 20), i.globals.translateYAxisX[l] = s - o.labels.offsetX + 20) : (a = i.globals.translateX - r, h || (r = r + c + 20), i.globals.translateYAxisX[l] = a + o.labels.offsetX);
        });
      }
    }, {
      key: "setYAxisTextAlignments",
      value: function value() {
        var t = this.w,
            e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis");
        (e = g.listToArray(e)).forEach(function (e, i) {
          var a = t.config.yaxis[i];

          if (void 0 !== a.labels.align) {
            var s = t.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i, "'] .apexcharts-yaxis-texts-g")),
                r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i, "'] .apexcharts-yaxis-label"));
            r = g.listToArray(r);
            var n = s.getBoundingClientRect();
            "left" === a.labels.align ? (r.forEach(function (t, e) {
              t.setAttribute("text-anchor", "start");
            }), a.opposite || s.setAttribute("transform", "translate(-".concat(n.width, ", 0)"))) : "center" === a.labels.align ? (r.forEach(function (t, e) {
              t.setAttribute("text-anchor", "middle");
            }), s.setAttribute("transform", "translate(".concat(n.width / 2 * (a.opposite ? 1 : -1), ", 0)"))) : "right" === a.labels.align && (r.forEach(function (t, e) {
              t.setAttribute("text-anchor", "end");
            }), a.opposite && s.setAttribute("transform", "translate(".concat(n.width, ", 0)")));
          }
        });
      }
    }]), t;
  }(),
      _ = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.documentEvent = g.bind(this.documentEvent, this);
    }

    return a(t, [{
      key: "addEventListener",
      value: function value(t, e) {
        var i = this.w;
        i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : i.globals.events[t] = [e];
      }
    }, {
      key: "removeEventListener",
      value: function value(t, e) {
        var i = this.w;

        if (i.globals.events.hasOwnProperty(t)) {
          var a = i.globals.events[t].indexOf(e);
          -1 !== a && i.globals.events[t].splice(a, 1);
        }
      }
    }, {
      key: "fireEvent",
      value: function value(t, e) {
        var i = this.w;

        if (i.globals.events.hasOwnProperty(t)) {
          e && e.length || (e = []);

          for (var a = i.globals.events[t], s = a.length, r = 0; r < s; r++) {
            a[r].apply(null, e);
          }
        }
      }
    }, {
      key: "setupEventHandlers",
      value: function value() {
        var t = this,
            e = this.w,
            i = this.ctx,
            a = e.globals.dom.baseEl.querySelector(e.globals.chartClass);
        this.ctx.eventList.forEach(function (t) {
          a.addEventListener(t, function (t) {
            var a = Object.assign({}, e, {
              seriesIndex: e.globals.capturedSeriesIndex,
              dataPointIndex: e.globals.capturedDataPointIndex
            });
            "mousemove" === t.type || "touchmove" === t.type ? "function" == typeof e.config.chart.events.mouseMove && e.config.chart.events.mouseMove(t, i, a) : ("mouseup" === t.type && 1 === t.which || "touchend" === t.type) && ("function" == typeof e.config.chart.events.click && e.config.chart.events.click(t, i, a), i.ctx.events.fireEvent("click", [t, i, a]));
          }, {
            capture: !1,
            passive: !0
          });
        }), this.ctx.eventList.forEach(function (e) {
          document.addEventListener(e, t.documentEvent);
        }), this.ctx.core.setupBrushHandler();
      }
    }, {
      key: "documentEvent",
      value: function value(t) {
        var e = this.w;

        if ("click" === t.type) {
          var i = t.target.className,
              a = e.globals.dom.baseEl.querySelector(".apexcharts-menu");
          a && a.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i && a.classList.remove("apexcharts-menu-open");
        }

        e.globals.clientX = "touchmove" === t.type ? t.touches[0].clientX : t.clientX, e.globals.clientY = "touchmove" === t.type ? t.touches[0].clientY : t.clientY;
      }
    }]), t;
  }(),
      j = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "setCurrentLocaleValues",
      value: function value(t) {
        var e = this.w.config.chart.locales;
        window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));
        var i = e.filter(function (e) {
          return e.name === t;
        })[0];
        if (!i) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
        var a = g.extend(k, i);
        this.w.globals.locale = a.options;
      }
    }]), t;
  }(),
      U = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "drawAxis",
      value: function value(t, e) {
        var i,
            a,
            s = this.w.globals,
            r = this.w.config,
            n = new N(this.ctx),
            o = new G(this.ctx);
        s.axisCharts && "radar" !== t && (s.isBarHorizontal ? (a = o.drawYaxisInversed(0), i = n.drawXaxisInversed(0), s.dom.elGraphical.add(i), s.dom.elGraphical.add(a)) : (i = n.drawXaxis(), s.dom.elGraphical.add(i), r.yaxis.map(function (t, e) {
          -1 === s.ignoreYAxisIndexes.indexOf(e) && (a = o.drawYaxis(e), s.dom.Paper.add(a));
        })));
        r.yaxis.map(function (t, e) {
          -1 === s.ignoreYAxisIndexes.indexOf(e) && o.yAxisTitleRotate(e, t.opposite);
        });
      }
    }]), t;
  }(),
      q = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "drawXCrosshairs",
      value: function value() {
        var t = this.w,
            e = new p(this.ctx),
            i = new u(this.ctx),
            a = t.config.xaxis.crosshairs.fill.gradient,
            s = t.config.xaxis.crosshairs.dropShadow,
            r = t.config.xaxis.crosshairs.fill.type,
            n = a.colorFrom,
            o = a.colorTo,
            l = a.opacityFrom,
            h = a.opacityTo,
            c = a.stops,
            d = s.enabled,
            f = s.left,
            x = s.top,
            b = s.blur,
            m = s.color,
            v = s.opacity,
            y = t.config.xaxis.crosshairs.fill.color;

        if (t.config.xaxis.crosshairs.show) {
          "gradient" === r && (y = e.drawGradient("vertical", n, o, l, h, null, c, null));
          var w = e.drawRect();
          1 === t.config.xaxis.crosshairs.width && (w = e.drawLine()), w.attr({
            "class": "apexcharts-xcrosshairs",
            x: 0,
            y: 0,
            y2: t.globals.gridHeight,
            width: g.isNumber(t.config.xaxis.crosshairs.width) ? t.config.xaxis.crosshairs.width : 0,
            height: t.globals.gridHeight,
            fill: y,
            filter: "none",
            "fill-opacity": t.config.xaxis.crosshairs.opacity,
            stroke: t.config.xaxis.crosshairs.stroke.color,
            "stroke-width": t.config.xaxis.crosshairs.stroke.width,
            "stroke-dasharray": t.config.xaxis.crosshairs.stroke.dashArray
          }), d && (w = i.dropShadow(w, {
            left: f,
            top: x,
            blur: b,
            color: m,
            opacity: v
          })), t.globals.dom.elGraphical.add(w);
        }
      }
    }, {
      key: "drawYCrosshairs",
      value: function value() {
        var t = this.w,
            e = new p(this.ctx),
            i = t.config.yaxis[0].crosshairs;

        if (t.config.yaxis[0].crosshairs.show) {
          var a = e.drawLine(0, 0, t.globals.gridWidth, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);
          a.attr({
            "class": "apexcharts-ycrosshairs"
          }), t.globals.dom.elGraphical.add(a);
        }

        var s = e.drawLine(0, 0, t.globals.gridWidth, 0, i.stroke.color, 0, 0);
        s.attr({
          "class": "apexcharts-ycrosshairs-hidden"
        }), t.globals.dom.elGraphical.add(s);
      }
    }]), t;
  }(),
      Z = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "checkResponsiveConfig",
      value: function value(t) {
        var e = this,
            i = this.w,
            a = i.config;

        if (0 !== a.responsive.length) {
          var s = a.responsive.slice();
          s.sort(function (t, e) {
            return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0;
          }).reverse();

          var r = new P({}),
              n = function n() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                a = s[0].breakpoint,
                n = window.innerWidth > 0 ? window.innerWidth : screen.width;

            if (n > a) {
              var o = E.extendArrayProps(r, i.globals.initialConfig);
              t = g.extend(o, t), t = g.extend(i.config, t), e.overrideResponsiveOptions(t);
            } else for (var l = 0; l < s.length; l++) {
              n < s[l].breakpoint && (t = E.extendArrayProps(r, s[l].options), t = g.extend(i.config, t), e.overrideResponsiveOptions(t));
            }
          };

          if (t) {
            var o = E.extendArrayProps(r, t);
            o = g.extend(i.config, o), n(o = g.extend(o, t));
          } else n({});
        }
      }
    }, {
      key: "overrideResponsiveOptions",
      value: function value(t) {
        var e = new P(t).init({
          responsiveOverride: !0
        });
        this.w.config = e;
      }
    }]), t;
  }(),
      $ = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.colors = [], this.w = i.w;
      var a = this.w;
      this.isBarDistributed = a.config.plotOptions.bar.distributed && ("bar" === a.config.chart.type || "rangeBar" === a.config.chart.type);
    }

    return a(t, [{
      key: "init",
      value: function value() {
        this.setDefaultColors();
      }
    }, {
      key: "setDefaultColors",
      value: function value() {
        var t = this.w,
            e = new g();

        if (t.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(t.config.theme.mode)), void 0 === t.config.colors ? t.globals.colors = this.predefined() : (t.globals.colors = t.config.colors, t.globals.axisCharts && "bar" !== t.config.chart.type && Array.isArray(t.config.colors) && t.config.colors.length > 0 && t.config.colors.length === t.config.series.length && (t.globals.colors = t.config.colors.map(function (e, i) {
          return "function" == typeof e ? e({
            value: t.globals.axisCharts ? t.globals.series[i][0] ? t.globals.series[i][0] : 0 : t.globals.series[i],
            seriesIndex: i,
            w: t
          }) : e;
        }))), t.config.theme.monochrome.enabled) {
          var i = [],
              a = t.globals.series.length;
          this.isBarDistributed && (a = t.globals.series[0].length * t.globals.series.length);

          for (var s = t.config.theme.monochrome.color, r = 1 / (a / t.config.theme.monochrome.shadeIntensity), n = t.config.theme.monochrome.shadeTo, o = 0, l = 0; l < a; l++) {
            var h = void 0;
            "dark" === n ? (h = e.shadeColor(-1 * o, s), o += r) : (h = e.shadeColor(o, s), o += r), i.push(h);
          }

          t.globals.colors = i.slice();
        }

        var c = t.globals.colors.slice();
        this.pushExtraColors(t.globals.colors), void 0 === t.config.stroke.colors ? t.globals.stroke.colors = c : t.globals.stroke.colors = t.config.stroke.colors, this.pushExtraColors(t.globals.stroke.colors), void 0 === t.config.fill.colors ? t.globals.fill.colors = c : t.globals.fill.colors = t.config.fill.colors, this.pushExtraColors(t.globals.fill.colors), void 0 === t.config.dataLabels.style.colors ? t.globals.dataLabels.style.colors = c : t.globals.dataLabels.style.colors = t.config.dataLabels.style.colors, this.pushExtraColors(t.globals.dataLabels.style.colors, 50), void 0 === t.config.plotOptions.radar.polygons.fill.colors ? t.globals.radarPolygons.fill.colors = ["dark" === t.config.theme.mode ? "#202D48" : "#fff"] : t.globals.radarPolygons.fill.colors = t.config.plotOptions.radar.polygons.fill.colors, this.pushExtraColors(t.globals.radarPolygons.fill.colors, 20), void 0 === t.config.markers.colors ? t.globals.markers.colors = c : t.globals.markers.colors = t.config.markers.colors, this.pushExtraColors(t.globals.markers.colors);
      }
    }, {
      key: "pushExtraColors",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            a = this.w,
            s = e || a.globals.series.length;
        if (null === i && (i = this.isBarDistributed || "heatmap" === a.config.chart.type && a.config.plotOptions.heatmap.colorScale.inverse), i && (s = a.globals.series[0].length * a.globals.series.length), t.length < s) for (var r = s - t.length, n = 0; n < r; n++) {
          t.push(t[n]);
        }
      }
    }, {
      key: "updateThemeOptions",
      value: function value(t) {
        t.chart = t.chart || {}, t.tooltip = t.tooltip || {};
        var e = t.theme.mode || "light",
            i = t.theme.palette ? t.theme.palette : "dark" === e ? "palette4" : "palette1",
            a = t.chart.foreColor ? t.chart.foreColor : "dark" === e ? "#f6f7f8" : "#373d3f";
        return t.tooltip.theme = e, t.chart.foreColor = a, t.theme.palette = i, t;
      }
    }, {
      key: "predefined",
      value: function value() {
        switch (this.w.config.theme.palette) {
          case "palette1":
            this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
            break;

          case "palette2":
            this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
            break;

          case "palette3":
            this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
            break;

          case "palette4":
            this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
            break;

          case "palette5":
            this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
            break;

          case "palette6":
            this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
            break;

          case "palette7":
            this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
            break;

          case "palette8":
            this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
            break;

          case "palette9":
            this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
            break;

          case "palette10":
            this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
            break;

          default:
            this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
        }

        return this.colors;
      }
    }]), t;
  }(),
      J = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "draw",
      value: function value() {
        this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
      }
    }, {
      key: "drawTitleSubtitle",
      value: function value(t) {
        var e = this.w,
            i = "title" === t ? e.config.title : e.config.subtitle,
            a = e.globals.svgWidth / 2,
            s = i.offsetY,
            r = "middle";

        if ("left" === i.align ? (a = 10, r = "start") : "right" === i.align && (a = e.globals.svgWidth - 10, r = "end"), a += i.offsetX, s = s + parseInt(i.style.fontSize, 10) + i.margin / 2, void 0 !== i.text) {
          var n = new p(this.ctx).drawText({
            x: a,
            y: s,
            text: i.text,
            textAnchor: r,
            fontSize: i.style.fontSize,
            fontFamily: i.style.fontFamily,
            foreColor: i.style.color,
            opacity: 1
          });
          n.node.setAttribute("class", "apexcharts-".concat(t, "-text")), e.globals.dom.Paper.add(n);
        }
      }
    }]), t;
  }(),
      Q = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.dCtx = i;
    }

    return a(t, [{
      key: "getTitleSubtitleCoords",
      value: function value(t) {
        var e = this.w,
            i = 0,
            a = 0,
            s = "title" === t ? e.config.title.floating : e.config.subtitle.floating,
            r = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(t, "-text"));

        if (null !== r && !s) {
          var n = r.getBoundingClientRect();
          i = n.width, a = e.globals.axisCharts ? n.height + 5 : n.height;
        }

        return {
          width: i,
          height: a
        };
      }
    }, {
      key: "getLegendsRect",
      value: function value() {
        var t = this.w,
            e = t.globals.dom.baseEl.querySelector(".apexcharts-legend"),
            i = Object.assign({}, g.getBoundingClientRect(e));
        return null !== e && !t.config.legend.floating && t.config.legend.show ? this.dCtx.lgRect = {
          x: i.x,
          y: i.y,
          height: i.height,
          width: 0 === i.height ? 0 : i.width
        } : this.dCtx.lgRect = {
          x: 0,
          y: 0,
          height: 0,
          width: 0
        }, "left" !== t.config.legend.position && "right" !== t.config.legend.position || 1.5 * this.dCtx.lgRect.width > t.globals.svgWidth && (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5), i;
      }
    }]), t;
  }(),
      K = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.dCtx = i;
    }

    return a(t, [{
      key: "getxAxisLabelsCoords",
      value: function value() {
        var t,
            e = this.w,
            i = e.globals.labels.slice();

        if (e.config.xaxis.convertedCatToNumeric && 0 === i.length && (i = e.globals.categoryLabels), e.globals.timescaleLabels.length > 0) {
          var a = this.getxAxisTimeScaleLabelsCoords();
          t = {
            width: a.width,
            height: a.height
          }, e.globals.rotateXLabels = !1;
        } else {
          this.dCtx.lgWidthForSideLegends = "left" !== e.config.legend.position && "right" !== e.config.legend.position || e.config.legend.floating ? 0 : this.dCtx.lgRect.width;
          var s = e.globals.xLabelFormatter,
              r = g.getLargestStringFromArr(i),
              n = r;

          if (e.globals.isMultiLineX) {
            var o = i.map(function (t, e) {
              return Array.isArray(t) ? t.length : 1;
            }),
                l = Math.max.apply(Math, d(o));
            n = i[o.indexOf(l)];
          }

          e.globals.isBarHorizontal && (n = r = e.globals.yAxisScale[0].result.reduce(function (t, e) {
            return t.length > e.length ? t : e;
          }, 0));
          var h = new D(this.dCtx.ctx),
              c = r;
          r = h.xLabelFormat(s, r, c), n = h.xLabelFormat(s, n, c), e.config.xaxis.convertedCatToNumeric && void 0 === r && (n = r = "1");
          var u = new p(this.dCtx.ctx),
              f = u.getTextRects(r, e.config.xaxis.labels.style.fontSize),
              x = f;

          if (r !== n && (x = u.getTextRects(n, e.config.xaxis.labels.style.fontSize)), (t = {
            width: f.width >= x.width ? f.width : x.width,
            height: f.height >= x.height ? f.height : x.height
          }).width * i.length > e.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e.config.xaxis.labels.rotate || e.config.xaxis.labels.rotateAlways) {
            if (!e.globals.isBarHorizontal) {
              e.globals.rotateXLabels = !0;

              var b = function b(t) {
                return u.getTextRects(t, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, "rotate(".concat(e.config.xaxis.labels.rotate, " 0 0)"), !1);
              };

              f = b(r), r !== n && (x = b(n)), t.height = (f.height > x.height ? f.height : x.height) / 1.5, t.width = f.width > x.width ? f.width : x.width;
            }
          } else e.globals.rotateXLabels = !1;
        }

        return e.config.xaxis.labels.show || (t = {
          width: 0,
          height: 0
        }), {
          width: t.width,
          height: t.height
        };
      }
    }, {
      key: "getxAxisTitleCoords",
      value: function value() {
        var t = this.w,
            e = 0,
            i = 0;

        if (void 0 !== t.config.xaxis.title.text) {
          var a = new p(this.dCtx.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);
          e = a.width, i = a.height;
        }

        return {
          width: e,
          height: i
        };
      }
    }, {
      key: "getxAxisTimeScaleLabelsCoords",
      value: function value() {
        var t,
            e = this.w;
        this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();
        var i = this.dCtx.timescaleLabels.map(function (t) {
          return t.value;
        }),
            a = i.reduce(function (t, e) {
          return void 0 === t ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t.length > e.length ? t : e;
        }, 0);
        return 1.05 * (t = new p(this.dCtx.ctx).getTextRects(a, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t;
      }
    }, {
      key: "additionalPaddingXLabels",
      value: function value(t) {
        var e = this,
            i = this.w,
            a = i.globals,
            s = i.config,
            r = s.xaxis.type,
            n = t.width;
        a.skipLastTimelinelabel = !1, a.skipFirstTimelinelabel = !1;

        var o = i.config.yaxis[0].opposite && i.globals.isBarHorizontal,
            l = function l(t, o) {
          (function (t) {
            return -1 !== a.collapsedSeriesIndices.indexOf(t);
          })(o) || ("datetime" !== r && e.dCtx.gridPad.left < n / 2 - e.dCtx.yAxisWidthLeft && !a.rotateXLabels && !s.xaxis.labels.trim && (e.dCtx.xPadLeft = n / 2 + 1), function (t) {
            if (e.dCtx.timescaleLabels && e.dCtx.timescaleLabels.length) {
              var s = e.dCtx.timescaleLabels[0],
                  o = e.dCtx.timescaleLabels[e.dCtx.timescaleLabels.length - 1].position + n / 1.75 + e.dCtx.yAxisWidthRight,
                  l = s.position - n / 1.75 + (t.opposite ? 0 : e.dCtx.yAxisWidthLeft);
              o > a.gridWidth && (a.skipLastTimelinelabel = !0), l < 0 && (a.skipFirstTimelinelabel = !0);
            } else "datetime" === r ? e.dCtx.gridPad.right < n && !a.rotateXLabels && (a.skipLastTimelinelabel = !0) : "datetime" !== r && e.dCtx.gridPad.right < n / 2 - e.dCtx.yAxisWidthRight && !a.rotateXLabels && ("between" !== i.config.xaxis.tickPlacement || i.globals.isBarHorizontal) && (e.dCtx.xPadRight = n / 2 + 1);
          }(t));
        };

        s.yaxis.forEach(function (t, i) {
          o ? (e.dCtx.gridPad.left < n && (e.dCtx.xPadLeft = n / 2 + 1), e.dCtx.xPadRight = n / 2 + 1) : l(t, i);
        });
      }
    }]), t;
  }(),
      tt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.dCtx = i;
    }

    return a(t, [{
      key: "getyAxisLabelsCoords",
      value: function value() {
        var t = this,
            e = this.w,
            i = [],
            a = 10;
        return e.config.yaxis.map(function (s, r) {
          if (s.show && s.labels.show && e.globals.yAxisScale[r].result.length) {
            var n = e.globals.yLabelFormatters[r],
                o = n(e.globals.yAxisScale[r].niceMax, {
              seriesIndex: r,
              dataPointIndex: -1,
              w: e
            }),
                l = o;

            if (void 0 !== o && 0 !== o.length || (o = e.globals.yAxisScale[r].niceMax), e.globals.isBarHorizontal) {
              a = 0;
              var h = e.globals.labels.slice();

              if (l = o = n(o = g.getLargestStringFromArr(h), {
                seriesIndex: r,
                dataPointIndex: -1,
                w: e
              }), e.globals.isMultiLineX) {
                var c = h.map(function (t, e) {
                  return Array.isArray(t) ? t.length : 1;
                }),
                    u = Math.max.apply(Math, d(c));
                l = h[c.indexOf(u)];
              }
            }

            var f = new p(t.dCtx.ctx),
                x = f.getTextRects(o, s.labels.style.fontSize),
                b = x;
            o !== l && (b = f.getTextRects(l, s.labels.style.fontSize)), i.push({
              width: (b.width > x.width ? b.width : x.width) + a,
              height: b.height > x.height ? b.height : x.height
            });
          } else i.push({
            width: 0,
            height: 0
          });
        }), i;
      }
    }, {
      key: "getyAxisTitleCoords",
      value: function value() {
        var t = this,
            e = this.w,
            i = [];
        return e.config.yaxis.map(function (e, a) {
          if (e.show && void 0 !== e.title.text) {
            var s = new p(t.dCtx.ctx).getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, "rotate(-90 0 0)", !1);
            i.push({
              width: s.width,
              height: s.height
            });
          } else i.push({
            width: 0,
            height: 0
          });
        }), i;
      }
    }, {
      key: "getTotalYAxisWidth",
      value: function value() {
        var t = this.w,
            e = 0,
            i = 0,
            a = 0,
            s = t.globals.yAxisScale.length > 1 ? 10 : 0,
            r = function r(_r, n) {
          var o = t.config.yaxis[n].floating,
              l = 0;
          _r.width > 0 && !o ? (l = _r.width + s, function (e) {
            return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;
          }(n) && (l = l - _r.width - s)) : l = o || !t.config.yaxis[n].show ? 0 : 5, t.config.yaxis[n].opposite ? a += l : i += l, e += l;
        };

        return t.globals.yLabelsCoords.map(function (t, e) {
          r(t, e);
        }), t.globals.yTitleCoords.map(function (t, e) {
          r(t, e);
        }), t.globals.isBarHorizontal && (e = t.globals.yLabelsCoords[0].width + t.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i, this.dCtx.yAxisWidthRight = a, e;
      }
    }]), t;
  }(),
      et = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.dCtx = i;
    }

    return a(t, [{
      key: "gridPadForColumnsInNumericAxis",
      value: function value(t) {
        var e = this.w,
            i = e.config.chart.type,
            a = 0,
            s = "bar" === i || "rangeBar" === i ? e.config.series.length : 1;

        if (e.globals.comboBarCount > 0 && (s = e.globals.comboBarCount), e.globals.collapsedSeries.forEach(function (t) {
          "bar" !== t.type && "rangeBar" !== t.type || (s -= 1);
        }), e.config.chart.stacked && (s = 1), ("bar" === i || "rangeBar" === i || e.globals.comboBarCount > 0) && e.globals.isXNumeric && !e.globals.isBarHorizontal && s > 0) {
          var r,
              n,
              o = Math.abs(e.globals.initialMaxX - e.globals.initialMinX);
          o <= 3 && (o = e.globals.dataPoints), r = o / t, e.globals.minXDiff && e.globals.minXDiff / r > 0 && (n = e.globals.minXDiff / r), (a = n / s * parseInt(e.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (a = 1), a = a / (s > 1 ? 1 : 1.5) + 5, e.globals.barPadForNumericAxis = a;
        }

        return a;
      }
    }, {
      key: "gridPadFortitleSubtitle",
      value: function value() {
        var t = this,
            e = this.w,
            i = e.globals,
            a = this.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 10;
        ["title", "subtitle"].forEach(function (i) {
          void 0 !== e.config[i].text ? a += e.config[i].margin : a += t.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 5;
        });
        var s = e.config.series.length > 1 || !e.globals.axisCharts || e.config.legend.showForSingleSeries;
        e.config.legend.show && "bottom" === e.config.legend.position && !e.config.legend.floating && s && (a += 10);
        var r = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
            n = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
        i.gridHeight = i.gridHeight - r.height - n.height - a, i.translateY = i.translateY + r.height + n.height + a;
      }
    }, {
      key: "setGridXPosForDualYAxis",
      value: function value(t, e) {
        var i = this.w;
        i.config.yaxis.map(function (a, s) {
          -1 === i.globals.ignoreYAxisIndexes.indexOf(s) && !i.config.yaxis[s].floating && i.config.yaxis[s].show && a.opposite && (i.globals.translateX = i.globals.translateX - (e[s].width + t[s].width) - parseInt(i.config.yaxis[s].labels.style.fontSize, 10) / 1.2 - 12);
        });
      }
    }]), t;
  }(),
      it = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new Q(this), this.dimYAxis = new tt(this), this.dimXAxis = new K(this), this.dimGrid = new et(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
    }

    return a(t, [{
      key: "plotCoords",
      value: function value() {
        var t = this.w.globals;
        this.lgRect = this.dimHelpers.getLegendsRect(), t.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), t.gridHeight = t.gridHeight - this.gridPad.top - this.gridPad.bottom, t.gridWidth = t.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
        var e = this.dimGrid.gridPadForColumnsInNumericAxis(t.gridWidth);
        t.gridWidth = t.gridWidth - 2 * e, t.translateX = t.translateX + this.gridPad.left + this.xPadLeft + (e > 0 ? e + 4 : 0), t.translateY = t.translateY + this.gridPad.top;
      }
    }, {
      key: "setDimensionsForAxisCharts",
      value: function value() {
        var t = this,
            e = this.w,
            i = e.globals,
            a = this.dimYAxis.getyAxisLabelsCoords(),
            s = this.dimYAxis.getyAxisTitleCoords();
        e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map(function (t, i) {
          e.globals.yLabelsCoords.push({
            width: a[i].width,
            index: i
          }), e.globals.yTitleCoords.push({
            width: s[i].width,
            index: i
          });
        }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
        var r = this.dimXAxis.getxAxisLabelsCoords(),
            n = this.dimXAxis.getxAxisTitleCoords();
        this.conditionalChecksForAxisCoords(r, n), i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (i.rotateXLabels = !1, i.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY, i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX;
        var o = this.yAxisWidth,
            l = this.xAxisHeight;
        i.xAxisLabelsHeight = this.xAxisHeight, i.xAxisHeight = this.xAxisHeight;
        var h = 10;
        ("radar" === e.config.chart.type || this.isSparkline) && (o = 0, l = i.goldenPadding), this.isSparkline && (this.lgRect = {
          height: 0,
          width: 0
        }, l = 0, o = 0, h = 0), this.dimXAxis.additionalPaddingXLabels(r);

        var c = function c() {
          i.translateX = o, i.gridHeight = i.svgHeight - t.lgRect.height - l - (t.isSparkline ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - o;
        };

        switch (e.config.legend.position) {
          case "bottom":
            i.translateY = h, c();
            break;

          case "top":
            i.translateY = this.lgRect.height + h, c();
            break;

          case "left":
            i.translateY = h, i.translateX = this.lgRect.width + o, i.gridHeight = i.svgHeight - l - 12, i.gridWidth = i.svgWidth - this.lgRect.width - o;
            break;

          case "right":
            i.translateY = h, i.translateX = o, i.gridHeight = i.svgHeight - l - 12, i.gridWidth = i.svgWidth - this.lgRect.width - o - 5;
            break;

          default:
            throw new Error("Legend position not supported");
        }

        this.dimGrid.setGridXPosForDualYAxis(s, a), new G(this.ctx).setYAxisXPosition(a, s);
      }
    }, {
      key: "setDimensionsForNonAxisCharts",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = t.config,
            a = 0;
        t.config.legend.show && !t.config.legend.floating && (a = 20);
        var s = "pie" === i.chart.type || "donut" === i.chart.type ? "pie" : "radialBar",
            r = 10 + i.plotOptions[s].offsetY,
            n = i.plotOptions[s].offsetX;
        if (!i.legend.show || i.legend.floating) return e.gridHeight = e.svgHeight - e.goldenPadding, e.gridWidth = e.gridHeight, e.translateY = r - 10, void (e.translateX = n + (e.svgWidth - e.gridWidth) / 2);

        switch (i.legend.position) {
          case "bottom":
            e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.gridHeight, e.translateY = r - 20, e.translateX = n + (e.svgWidth - e.gridWidth) / 2;
            break;

          case "top":
            e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.gridHeight, e.translateY = this.lgRect.height + r + 10, e.translateX = n + (e.svgWidth - e.gridWidth) / 2;
            break;

          case "left":
            e.gridWidth = e.svgWidth - this.lgRect.width - a, e.gridHeight = "auto" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = n + this.lgRect.width + a;
            break;

          case "right":
            e.gridWidth = e.svgWidth - this.lgRect.width - a - 5, e.gridHeight = "auto" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = n + 10;
            break;

          default:
            throw new Error("Legend position not supported");
        }
      }
    }, {
      key: "conditionalChecksForAxisCoords",
      value: function value(t, e) {
        var i = this.w;
        this.xAxisHeight = (t.height + e.height) * (i.globals.isMultiLineX ? 1.2 : i.globals.LINE_HEIGHT_RATIO) + (i.globals.rotateXLabels ? 22 : 10), this.xAxisWidth = t.width, this.xAxisHeight - e.height > i.config.xaxis.labels.maxHeight && (this.xAxisHeight = i.config.xaxis.labels.maxHeight), i.config.xaxis.labels.minHeight && this.xAxisHeight < i.config.xaxis.labels.minHeight && (this.xAxisHeight = i.config.xaxis.labels.minHeight), i.config.xaxis.floating && (this.xAxisHeight = 0);
        var a = 0,
            s = 0;
        i.config.yaxis.forEach(function (t) {
          a += t.labels.minWidth, s += t.labels.maxWidth;
        }), this.yAxisWidth < a && (this.yAxisWidth = a), this.yAxisWidth > s && (this.yAxisWidth = s);
      }
    }]), t;
  }(),
      at = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels;
      var a = this.w;
      this.lineColorArr = void 0 !== a.globals.stroke.colors ? a.globals.stroke.colors : a.globals.colors, this.defaultSize = a.globals.svgHeight < a.globals.svgWidth ? a.globals.gridHeight : a.globals.gridWidth, this.centerY = this.defaultSize / 2, this.centerX = a.globals.gridWidth / 2, this.fullAngle = 360, a.globals.radialSize = this.defaultSize / 2.05 - a.config.stroke.width - a.config.chart.dropShadow.blur, void 0 !== a.config.plotOptions.pie.size && (a.globals.radialSize = a.config.plotOptions.pie.size), this.donutSize = a.globals.radialSize * parseInt(a.config.plotOptions.pie.donut.size, 10) / 100, this.sliceLabels = [], this.prevSectorAngleArr = [];
    }

    return a(t, [{
      key: "draw",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = i.group({
          "class": "apexcharts-pie"
        });
        if (e.globals.noData) return a;

        for (var s = 0, r = 0; r < t.length; r++) {
          s += g.negToZero(t[r]);
        }

        var n = [],
            o = i.group();
        0 === s && (s = 1e-5);

        for (var l = 0; l < t.length; l++) {
          var h = this.fullAngle * g.negToZero(t[l]) / s;
          n.push(h);
        }

        if (e.globals.dataChanged) {
          for (var c, d = 0, u = 0; u < e.globals.previousPaths.length; u++) {
            d += g.negToZero(e.globals.previousPaths[u]);
          }

          for (var f = 0; f < e.globals.previousPaths.length; f++) {
            c = this.fullAngle * g.negToZero(e.globals.previousPaths[f]) / d, this.prevSectorAngleArr.push(c);
          }
        }

        this.donutSize < 0 && (this.donutSize = 0);
        var x = e.config.plotOptions.pie.customScale,
            b = e.globals.gridWidth / 2,
            m = e.globals.gridHeight / 2,
            v = b - e.globals.gridWidth / 2 * x,
            y = m - e.globals.gridHeight / 2 * x;

        if ("donut" === e.config.chart.type) {
          var w = i.drawCircle(this.donutSize);
          w.attr({
            cx: this.centerX,
            cy: this.centerY,
            fill: e.config.plotOptions.pie.donut.background
          }), o.add(w);
        }

        var k = this.drawArcs(n, t);

        if (this.sliceLabels.forEach(function (t) {
          k.add(t);
        }), o.attr({
          transform: "translate(".concat(v, ", ").concat(y - 5, ") scale(").concat(x, ")")
        }), a.attr({
          "data:innerTranslateX": v,
          "data:innerTranslateY": y - 25
        }), o.add(k), a.add(o), this.donutDataLabels.show) {
          var A = this.renderInnerDataLabels(this.donutDataLabels, {
            hollowSize: this.donutSize,
            centerX: this.centerX,
            centerY: this.centerY,
            opacity: this.donutDataLabels.show,
            translateX: v,
            translateY: y
          });
          a.add(A);
        }

        return a;
      }
    }, {
      key: "drawArcs",
      value: function value(t, e) {
        var i = this.w,
            a = new u(this.ctx),
            s = new p(this.ctx),
            r = new M(this.ctx),
            n = s.group({
          "class": "apexcharts-slices"
        }),
            o = 0,
            l = 0,
            h = 0,
            c = 0;
        this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;

        for (var d = 0; d < t.length; d++) {
          var f = s.group({
            "class": "apexcharts-series apexcharts-pie-series",
            seriesName: g.escapeString(i.globals.seriesNames[d]),
            rel: d + 1,
            "data:realIndex": d
          });
          n.add(f), l = c, h = (o = h) + t[d], c = l + this.prevSectorAngleArr[d];
          var x = h - o,
              b = r.fillPath({
            seriesNumber: d,
            size: i.globals.radialSize,
            value: e[d]
          }),
              m = this.getChangedPath(l, c),
              v = s.drawPath({
            d: m,
            stroke: this.lineColorArr instanceof Array ? this.lineColorArr[d] : this.lineColorArr,
            strokeWidth: this.strokeWidth,
            fill: b,
            fillOpacity: i.config.fill.opacity,
            classes: "apexcharts-pie-area apexcharts-".concat(i.config.chart.type, "-slice-").concat(d)
          });

          if (v.attr({
            index: 0,
            j: d
          }), i.config.chart.dropShadow.enabled) {
            var y = i.config.chart.dropShadow;
            a.dropShadow(v, y, d);
          }

          this.addListeners(v, this.donutDataLabels), p.setAttrs(v.node, {
            "data:angle": x,
            "data:startAngle": o,
            "data:strokeWidth": this.strokeWidth,
            "data:value": e[d]
          });
          var w = {
            x: 0,
            y: 0
          };
          "pie" === i.config.chart.type ? w = g.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize / 1.25 + i.config.plotOptions.pie.dataLabels.offset, o + (h - o) / 2) : "donut" === i.config.chart.type && (w = g.polarToCartesian(this.centerX, this.centerY, (i.globals.radialSize + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, o + (h - o) / 2)), f.add(v);
          var k = 0;

          if (!this.initialAnim || i.globals.resized || i.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k = (h - o) / this.fullAngle * i.config.chart.animations.speed) && (k = 1), this.animDur = k + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i.globals.dataChanged ? this.animatePaths(v, {
            size: i.globals.radialSize,
            endAngle: h,
            startAngle: o,
            prevStartAngle: l,
            prevEndAngle: c,
            animateStartingPos: !0,
            i: d,
            animBeginArr: this.animBeginArr,
            dur: i.config.chart.animations.dynamicAnimation.speed
          }) : this.animatePaths(v, {
            size: i.globals.radialSize,
            endAngle: h,
            startAngle: o,
            i: d,
            totalItems: t.length - 1,
            animBeginArr: this.animBeginArr,
            dur: k
          }), i.config.plotOptions.pie.expandOnClick && v.click(this.pieClicked.bind(this, d)), i.config.dataLabels.enabled) {
            var A = w.x,
                S = w.y,
                C = 100 * (h - o) / 360 + "%";

            if (0 !== x && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[d]) {
              var L = i.config.dataLabels.formatter;
              void 0 !== L && (C = L(i.globals.seriesPercent[d][0], {
                seriesIndex: d,
                w: i
              }));
              var P = i.globals.dataLabels.style.colors[d],
                  z = s.drawText({
                x: A,
                y: S,
                text: C,
                textAnchor: "middle",
                fontSize: i.config.dataLabels.style.fontSize,
                fontFamily: i.config.dataLabels.style.fontFamily,
                foreColor: P
              });

              if (i.config.dataLabels.dropShadow.enabled) {
                var T = i.config.dataLabels.dropShadow;
                a.dropShadow(z, T);
              }

              z.node.classList.add("apexcharts-pie-label"), i.config.chart.animations.animate && !1 === i.globals.resized && (z.node.classList.add("apexcharts-pie-label-delay"), z.node.style.animationDelay = i.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(z);
            }
          }
        }

        return n;
      }
    }, {
      key: "addListeners",
      value: function value(t, e) {
        var i = new p(this.ctx);
        t.node.addEventListener("mouseenter", i.pathMouseEnter.bind(this, t)), t.node.addEventListener("mouseleave", i.pathMouseLeave.bind(this, t)), t.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener("mousedown", i.pathMouseDown.bind(this, t)), this.donutDataLabels.total.showAlways || (t.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t.node, e)));
      }
    }, {
      key: "animatePaths",
      value: function value(t, e) {
        var i = this.w,
            a = e.endAngle - e.startAngle,
            s = a,
            r = e.startAngle,
            n = e.startAngle;
        void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (r = e.prevEndAngle, s = e.prevEndAngle - e.prevStartAngle), e.i === i.config.series.length - 1 && (a + n > this.fullAngle ? e.endAngle = e.endAngle - (a + n) : a + n < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (a + n)))), a === this.fullAngle && (a = this.fullAngle - .01), this.animateArc(t, r, n, a, s, e);
      }
    }, {
      key: "animateArc",
      value: function value(t, e, i, a, s, r) {
        var n,
            o = this,
            l = this.w,
            h = new f(this.ctx),
            c = r.size;
        (isNaN(e) || isNaN(s)) && (e = i, s = a, r.dur = 0);
        var d = a,
            g = i,
            u = e - i;
        l.globals.dataChanged && r.shouldSetPrevPaths && (n = o.getPiePath({
          me: o,
          startAngle: g,
          angle: s,
          size: c
        }), t.attr({
          d: n
        })), 0 !== r.dur ? t.animate(r.dur, l.globals.easing, r.animBeginArr[r.i]).afterAll(function () {
          "pie" !== l.config.chart.type && "donut" !== l.config.chart.type || this.animate(300).attr({
            "stroke-width": l.config.stroke.width
          }), r.i === l.config.series.length - 1 && h.animationCompleted(t);
        }).during(function (l) {
          d = u + (a - u) * l, r.animateStartingPos && (d = s + (a - s) * l, g = e - s + (i - (e - s)) * l), n = o.getPiePath({
            me: o,
            startAngle: g,
            angle: d,
            size: c
          }), t.node.setAttribute("data:pathOrig", n), t.attr({
            d: n
          });
        }) : (n = o.getPiePath({
          me: o,
          startAngle: g,
          angle: a,
          size: c
        }), r.isTrack || (l.globals.animationEnded = !0), t.node.setAttribute("data:pathOrig", n), t.attr({
          d: n
        }));
      }
    }, {
      key: "pieClicked",
      value: function value(t) {
        var e,
            i = this.w,
            a = this.w.globals.radialSize + (i.config.plotOptions.pie.expandOnClick ? 4 : 0),
            s = i.globals.dom.Paper.select(".apexcharts-".concat(i.config.chart.type.toLowerCase(), "-slice-").concat(t)).members[0];

        if ("true" !== s.attr("data:pieClicked")) {
          var r = i.globals.dom.baseEl.querySelectorAll(".apexcharts-pie-area");
          Array.prototype.forEach.call(r, function (t) {
            t.setAttribute("data:pieClicked", "false");
            var e = t.getAttribute("data:pathOrig");
            t.setAttribute("d", e);
          }), s.attr("data:pieClicked", "true");
          var n = parseInt(s.attr("data:startAngle"), 10),
              o = parseInt(s.attr("data:angle"), 10);
          e = this.getPiePath({
            me: this,
            startAngle: n,
            angle: o,
            size: a
          }), 360 !== o && s.plot(e);
        } else {
          s.attr({
            "data:pieClicked": "false"
          }), this.revertDataLabelsInner(s.node, this.donutDataLabels);
          var l = s.attr("data:pathOrig");
          s.attr({
            d: l
          });
        }
      }
    }, {
      key: "getChangedPath",
      value: function value(t, e) {
        var i = "";
        return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({
          me: this,
          startAngle: t,
          angle: e - t,
          size: this.size
        })), i;
      }
    }, {
      key: "getPiePath",
      value: function value(t) {
        var e = t.me,
            i = t.startAngle,
            a = t.angle,
            s = t.size,
            r = this.w,
            n = i,
            o = Math.PI * (n - 90) / 180,
            l = a + i;
        Math.ceil(l) >= 360 && (l = 359.99);
        var h = Math.PI * (l - 90) / 180,
            c = e.centerX + s * Math.cos(o),
            d = e.centerY + s * Math.sin(o),
            u = e.centerX + s * Math.cos(h),
            f = e.centerY + s * Math.sin(h),
            p = g.polarToCartesian(e.centerX, e.centerY, e.donutSize, l),
            x = g.polarToCartesian(e.centerX, e.centerY, e.donutSize, n),
            b = a > 180 ? 1 : 0,
            m = ["M", c, d, "A", s, s, 0, b, 1, u, f];
        return "donut" === r.config.chart.type ? [].concat(m, ["L", p.x, p.y, "A", e.donutSize, e.donutSize, 0, b, 0, x.x, x.y, "L", c, d, "z"]).join(" ") : "pie" === r.config.chart.type ? [].concat(m, ["L", e.centerX, e.centerY, "L", c, d]).join(" ") : [].concat(m).join(" ");
      }
    }, {
      key: "renderInnerDataLabels",
      value: function value(t, e) {
        var i = this.w,
            a = new p(this.ctx),
            s = a.group({
          "class": "apexcharts-datalabels-group",
          transform: "translate(".concat(e.translateX ? e.translateX : 0, ", ").concat(e.translateY ? e.translateY : 0, ") scale(").concat(i.config.plotOptions.pie.customScale, ")")
        }),
            r = t.total.show;
        s.node.style.opacity = e.opacity;
        var n,
            o,
            l = e.centerX,
            h = e.centerY;
        n = void 0 === t.name.color ? i.globals.colors[0] : t.name.color, o = void 0 === t.value.color ? i.config.chart.foreColor : t.value.color;
        var c = t.value.formatter,
            d = "",
            g = "";

        if (r ? (n = t.total.color, g = t.total.label, d = t.total.formatter(i)) : 1 === i.globals.series.length && (d = c(i.globals.series[0], i), g = i.globals.seriesNames[0]), g && (g = t.name.formatter(g, t.total.show, i)), t.name.show) {
          var u = a.drawText({
            x: l,
            y: h + parseFloat(t.name.offsetY),
            text: g,
            textAnchor: "middle",
            foreColor: n,
            fontSize: t.name.fontSize,
            fontFamily: t.name.fontFamily
          });
          u.node.classList.add("apexcharts-datalabel-label"), s.add(u);
        }

        if (t.value.show) {
          var f = t.name.show ? parseFloat(t.value.offsetY) + 16 : t.value.offsetY,
              x = a.drawText({
            x: l,
            y: h + f,
            text: d,
            textAnchor: "middle",
            foreColor: o,
            fontSize: t.value.fontSize,
            fontFamily: t.value.fontFamily
          });
          x.node.classList.add("apexcharts-datalabel-value"), s.add(x);
        }

        return s;
      }
    }, {
      key: "printInnerLabels",
      value: function value(t, e, i, a) {
        var s,
            r = this.w;
        a ? s = void 0 === t.name.color ? r.globals.colors[parseInt(a.parentNode.getAttribute("rel"), 10) - 1] : t.name.color : r.globals.series.length > 1 && t.total.show && (s = t.total.color);
        var n = r.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"),
            o = r.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
        i = (0, t.value.formatter)(i, r), a || "function" != typeof t.total.formatter || (i = t.total.formatter(r));
        var l = e === t.total.label;
        e = t.name.formatter(e, l, r), null !== n && (n.textContent = e), null !== o && (o.textContent = i), null !== n && (n.style.fill = s);
      }
    }, {
      key: "printDataLabelsInner",
      value: function value(t, e) {
        var i = this.w,
            a = t.getAttribute("data:value"),
            s = i.globals.seriesNames[parseInt(t.parentNode.getAttribute("rel"), 10) - 1];
        i.globals.series.length > 1 && this.printInnerLabels(e, s, a, t);
        var r = i.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
        null !== r && (r.style.opacity = 1);
      }
    }, {
      key: "revertDataLabelsInner",
      value: function value(t, e, i) {
        var a = this,
            s = this.w,
            r = s.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
        if (e.total.show && s.globals.series.length > 1) this.printInnerLabels(e, e.total.label, e.total.formatter(s));else {
          var n = document.querySelectorAll(".apexcharts-pie-area"),
              o = !1;
          if (Array.prototype.forEach.call(n, function (t) {
            "true" === t.getAttribute("data:pieClicked") && (o = !0, a.printDataLabelsInner(t, e));
          }), !o) if (s.globals.selectedDataPoints.length && s.globals.series.length > 1) {
            if (s.globals.selectedDataPoints[0].length > 0) {
              var l = s.globals.selectedDataPoints[0],
                  h = s.globals.dom.baseEl.querySelector(".apexcharts-".concat(s.config.chart.type.toLowerCase(), "-slice-").concat(l));
              this.printDataLabelsInner(h, e);
            } else r && s.globals.selectedDataPoints.length && 0 === s.globals.selectedDataPoints[0].length && (r.style.opacity = 0);
          } else r && s.globals.series.length > 1 && (r.style.opacity = 0);
        }
      }
    }]), t;
  }(),
      st = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.lgCtx = i;
    }

    return a(t, [{
      key: "getLegendStyles",
      value: function value() {
        var t = document.createElement("style");
        t.setAttribute("type", "text/css");
        var e = document.createTextNode("\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.position-bottom, .apexcharts-legend.position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.position-right, .apexcharts-legend.position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.position-bottom.apexcharts-align-left, .apexcharts-legend.position-top.apexcharts-align-left, .apexcharts-legend.position-right, .apexcharts-legend.position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.position-bottom.apexcharts-align-center, .apexcharts-legend.position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.position-bottom.apexcharts-align-right, .apexcharts-legend.position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.position-bottom .apexcharts-legend-series, .apexcharts-legend.position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }");
        return t.appendChild(e), t;
      }
    }, {
      key: "getLegendBBox",
      value: function value() {
        var t = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(),
            e = t.width;
        return {
          clwh: t.height,
          clww: e
        };
      }
    }, {
      key: "appendToForeignObject",
      value: function value() {
        var t = this.w.globals;
        t.dom.elLegendForeign = document.createElementNS(t.SVGNS, "foreignObject");
        var e = t.dom.elLegendForeign;
        e.setAttribute("x", 0), e.setAttribute("y", 0), e.setAttribute("width", t.svgWidth), e.setAttribute("height", t.svgHeight), t.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), e.appendChild(t.dom.elLegendWrap), e.appendChild(this.getLegendStyles()), t.dom.Paper.node.insertBefore(e, t.dom.elGraphical.node);
      }
    }, {
      key: "toggleDataSeries",
      value: function value(t, e) {
        var i = this,
            a = this.w;

        if (a.globals.axisCharts || "radialBar" === a.config.chart.type) {
          a.globals.resized = !0;
          var s = null,
              r = null;
          if (a.globals.risingSeries = [], a.globals.axisCharts ? (s = a.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t, "']")), r = parseInt(s.getAttribute("data:realIndex"), 10)) : (s = a.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t + 1, "']")), r = parseInt(s.getAttribute("rel"), 10) - 1), e) [{
            cs: a.globals.collapsedSeries,
            csi: a.globals.collapsedSeriesIndices
          }, {
            cs: a.globals.ancillaryCollapsedSeries,
            csi: a.globals.ancillaryCollapsedSeriesIndices
          }].forEach(function (t) {
            i.riseCollapsedSeries(t.cs, t.csi, r);
          });else this.hideSeries({
            seriesEl: s,
            realIndex: r
          });
        } else {
          var n = a.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t + 1, "'] path")),
              o = a.config.chart.type;

          if ("pie" === o || "donut" === o) {
            var l = a.config.plotOptions.pie.donut.labels,
                h = new p(this.lgCtx.ctx),
                c = new at(this.lgCtx.ctx);
            h.pathMouseDown(n.members[0], null), c.printDataLabelsInner(n.members[0].node, l);
          }

          n.fire("click");
        }
      }
    }, {
      key: "hideSeries",
      value: function value(t) {
        var e = t.seriesEl,
            i = t.realIndex,
            a = this.w;

        if (a.globals.axisCharts) {
          var s = !1;

          if (a.config.yaxis[i] && a.config.yaxis[i].show && a.config.yaxis[i].showAlways && (s = !0, a.globals.ancillaryCollapsedSeriesIndices.indexOf(i) < 0 && (a.globals.ancillaryCollapsedSeries.push({
            index: i,
            data: a.config.series[i].data.slice(),
            type: e.parentNode.className.baseVal.split("-")[1]
          }), a.globals.ancillaryCollapsedSeriesIndices.push(i))), !s) {
            a.globals.collapsedSeries.push({
              index: i,
              data: a.config.series[i].data.slice(),
              type: e.parentNode.className.baseVal.split("-")[1]
            }), a.globals.collapsedSeriesIndices.push(i);
            var r = a.globals.risingSeries.indexOf(i);
            a.globals.risingSeries.splice(r, 1);
          }

          a.config.series[i].data = [];
        } else a.globals.collapsedSeries.push({
          index: i,
          data: a.config.series[i]
        }), a.globals.collapsedSeriesIndices.push(i), a.config.series[i] = 0;

        for (var n = e.childNodes, o = 0; o < n.length; o++) {
          n[o].classList.contains("apexcharts-series-markers-wrap") && (n[o].classList.contains("apexcharts-hide") ? n[o].classList.remove("apexcharts-hide") : n[o].classList.add("apexcharts-hide"));
        }

        a.globals.allSeriesCollapsed = a.globals.collapsedSeries.length === a.config.series.length, this.lgCtx.ctx.updateHelpers._updateSeries(a.config.series, a.config.chart.animations.dynamicAnimation.enabled);
      }
    }, {
      key: "riseCollapsedSeries",
      value: function value(t, e, i) {
        var a = this.w;
        if (t.length > 0) for (var s = 0; s < t.length; s++) {
          t[s].index === i && (a.globals.axisCharts ? (a.config.series[i].data = t[s].data.slice(), t.splice(s, 1), e.splice(s, 1), a.globals.risingSeries.push(i)) : (a.config.series[i] = t[s].data, t.splice(s, 1), e.splice(s, 1), a.globals.risingSeries.push(i)), this.lgCtx.ctx.updateHelpers._updateSeries(a.config.series, a.config.chart.animations.dynamicAnimation.enabled));
        }
      }
    }]), t;
  }(),
      rt = function () {
    function t(i, a) {
      e(this, t), this.ctx = i, this.w = i.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new st(this);
    }

    return a(t, [{
      key: "init",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = t.config;

        if ((i.legend.showForSingleSeries && 1 === e.series.length || this.isBarsDistributed || e.series.length > 1 || !e.axisCharts) && i.legend.show) {
          for (; e.dom.elLegendWrap.firstChild;) {
            e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);
          }

          this.drawLegends(), g.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), "bottom" === i.legend.position || "top" === i.legend.position ? this.legendAlignHorizontal() : "right" !== i.legend.position && "left" !== i.legend.position || this.legendAlignVertical();
        }
      }
    }, {
      key: "drawLegends",
      value: function value() {
        var t = this.w,
            e = t.config.legend.fontFamily,
            i = t.globals.seriesNames,
            a = t.globals.colors.slice();

        if ("heatmap" === t.config.chart.type) {
          var s = t.config.plotOptions.heatmap.colorScale.ranges;
          i = s.map(function (t) {
            return t.name ? t.name : t.from + " - " + t.to;
          }), a = s.map(function (t) {
            return t.color;
          });
        } else this.isBarsDistributed && (i = t.globals.labels.slice());

        for (var r = t.globals.legendFormatter, n = t.config.legend.inverseOrder, o = n ? i.length - 1 : 0; n ? o >= 0 : o <= i.length - 1; n ? o-- : o++) {
          var l = r(i[o], {
            seriesIndex: o,
            w: t
          }),
              h = !1,
              c = !1;
          if (t.globals.collapsedSeries.length > 0) for (var d = 0; d < t.globals.collapsedSeries.length; d++) {
            t.globals.collapsedSeries[d].index === o && (h = !0);
          }
          if (t.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var g = 0; g < t.globals.ancillaryCollapsedSeriesIndices.length; g++) {
            t.globals.ancillaryCollapsedSeriesIndices[g] === o && (c = !0);
          }
          var u = document.createElement("span");
          u.classList.add("apexcharts-legend-marker");
          var f = t.config.legend.markers.offsetX,
              x = t.config.legend.markers.offsetY,
              b = t.config.legend.markers.height,
              m = t.config.legend.markers.width,
              v = t.config.legend.markers.strokeWidth,
              y = t.config.legend.markers.strokeColor,
              w = t.config.legend.markers.radius,
              k = u.style;
          k.background = a[o], k.color = a[o], t.config.legend.markers.fillColors && t.config.legend.markers.fillColors[o] && (k.background = t.config.legend.markers.fillColors[o]), k.height = Array.isArray(b) ? parseFloat(b[o]) + "px" : parseFloat(b) + "px", k.width = Array.isArray(m) ? parseFloat(m[o]) + "px" : parseFloat(m) + "px", k.left = Array.isArray(f) ? f[o] : f, k.top = Array.isArray(x) ? x[o] : x, k.borderWidth = Array.isArray(v) ? v[o] : v, k.borderColor = Array.isArray(y) ? y[o] : y, k.borderRadius = Array.isArray(w) ? parseFloat(w[o]) + "px" : parseFloat(w) + "px", t.config.legend.markers.customHTML && (Array.isArray(t.config.legend.markers.customHTML) ? u.innerHTML = t.config.legend.markers.customHTML[o]() : u.innerHTML = t.config.legend.markers.customHTML()), p.setAttrs(u, {
            rel: o + 1,
            "data:collapsed": h || c
          }), (h || c) && u.classList.add("apexcharts-inactive-legend");
          var A = document.createElement("div"),
              S = document.createElement("span");
          S.classList.add("apexcharts-legend-text"), S.innerHTML = Array.isArray(l) ? l.join(" ") : l;
          var C = t.config.legend.labels.useSeriesColors ? t.globals.colors[o] : t.config.legend.labels.colors;
          C || (C = t.config.chart.foreColor), S.style.color = C, S.style.fontSize = parseFloat(t.config.legend.fontSize) + "px", S.style.fontFamily = e || t.config.chart.fontFamily, p.setAttrs(S, {
            rel: o + 1,
            i: o,
            "data:default-text": encodeURIComponent(l),
            "data:collapsed": h || c
          }), A.appendChild(u), A.appendChild(S);
          var L = new E(this.ctx);
          if (!t.config.legend.showForZeroSeries) 0 === L.getSeriesTotalByIndex(o) && L.seriesHaveSameValues(o) && !L.isSeriesNull(o) && -1 === t.globals.collapsedSeriesIndices.indexOf(o) && -1 === t.globals.ancillaryCollapsedSeriesIndices.indexOf(o) && A.classList.add("apexcharts-hidden-zero-series");
          t.config.legend.showForNullSeries || L.isSeriesNull(o) && -1 === t.globals.collapsedSeriesIndices.indexOf(o) && -1 === t.globals.ancillaryCollapsedSeriesIndices.indexOf(o) && A.classList.add("apexcharts-hidden-null-series"), t.globals.dom.elLegendWrap.appendChild(A), t.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(t.config.legend.horizontalAlign)), t.globals.dom.elLegendWrap.classList.add("position-" + t.config.legend.position), A.classList.add("apexcharts-legend-series"), A.style.margin = "".concat(t.config.legend.itemMargin.vertical, "px ").concat(t.config.legend.itemMargin.horizontal, "px"), t.globals.dom.elLegendWrap.style.width = t.config.legend.width ? t.config.legend.width + "px" : "", t.globals.dom.elLegendWrap.style.height = t.config.legend.height ? t.config.legend.height + "px" : "", p.setAttrs(A, {
            rel: o + 1,
            "data:collapsed": h || c
          }), (h || c) && A.classList.add("apexcharts-inactive-legend"), t.config.legend.onItemClick.toggleDataSeries || A.classList.add("apexcharts-no-click");
        }

        "heatmap" !== t.config.chart.type && !this.isBarsDistributed && t.config.legend.onItemClick.toggleDataSeries && t.globals.dom.elWrap.addEventListener("click", this.onLegendClick, !0), t.config.legend.onItemHover.highlightDataSeries && (t.globals.dom.elWrap.addEventListener("mousemove", this.onLegendHovered, !0), t.globals.dom.elWrap.addEventListener("mouseout", this.onLegendHovered, !0));
      }
    }, {
      key: "setLegendWrapXY",
      value: function value(t, e) {
        var i = this.w,
            a = i.globals.dom.baseEl.querySelector(".apexcharts-legend"),
            s = a.getBoundingClientRect(),
            r = 0,
            n = 0;
        if ("bottom" === i.config.legend.position) n += i.globals.svgHeight - s.height / 2;else if ("top" === i.config.legend.position) {
          var o = new it(this.ctx),
              l = o.dimHelpers.getTitleSubtitleCoords("title").height,
              h = o.dimHelpers.getTitleSubtitleCoords("subtitle").height;
          n = n + (l > 0 ? l - 10 : 0) + (h > 0 ? h - 10 : 0);
        }
        a.style.position = "absolute", r = r + t + i.config.legend.offsetX, n = n + e + i.config.legend.offsetY, a.style.left = r + "px", a.style.top = n + "px", "bottom" === i.config.legend.position ? (a.style.top = "auto", a.style.bottom = 5 + i.config.legend.offsetY + "px") : "right" === i.config.legend.position && (a.style.left = "auto", a.style.right = 25 + i.config.legend.offsetX + "px");
        ["width", "height"].forEach(function (t) {
          a.style[t] && (a.style[t] = parseInt(i.config.legend[t], 10) + "px");
        });
      }
    }, {
      key: "legendAlignHorizontal",
      value: function value() {
        var t = this.w;
        t.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right = 0;
        var e = this.legendHelpers.getLegendBBox(),
            i = new it(this.ctx),
            a = i.dimHelpers.getTitleSubtitleCoords("title"),
            s = i.dimHelpers.getTitleSubtitleCoords("subtitle"),
            r = 0;
        "bottom" === t.config.legend.position ? r = -e.clwh / 1.8 : "top" === t.config.legend.position && (r = a.height + s.height + t.config.title.margin + t.config.subtitle.margin - 10), this.setLegendWrapXY(20, r);
      }
    }, {
      key: "legendAlignVertical",
      value: function value() {
        var t = this.w,
            e = this.legendHelpers.getLegendBBox(),
            i = 0;
        "left" === t.config.legend.position && (i = 20), "right" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);
      }
    }, {
      key: "onLegendHovered",
      value: function value(t) {
        var e = this.w,
            i = t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker");

        if ("heatmap" === e.config.chart.type || this.isBarsDistributed) {
          if (i) {
            var a = parseInt(t.target.getAttribute("rel"), 10) - 1;
            this.ctx.events.fireEvent("legendHover", [this.ctx, a, this.w]), new R(this.ctx).highlightRangeInSeries(t, t.target);
          }
        } else !t.target.classList.contains("apexcharts-inactive-legend") && i && new R(this.ctx).toggleSeriesOnHover(t, t.target);
      }
    }, {
      key: "onLegendClick",
      value: function value(t) {
        if (t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker")) {
          var e = parseInt(t.target.getAttribute("rel"), 10) - 1,
              i = "true" === t.target.getAttribute("data:collapsed"),
              a = this.w.config.chart.events.legendClick;
          "function" == typeof a && a(this.ctx, e, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, e, this.w]);
          var s = this.w.config.legend.markers.onClick;
          "function" == typeof s && t.target.classList.contains("apexcharts-legend-marker") && (s(this.ctx, e, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, e, this.w])), this.legendHelpers.toggleDataSeries(e, i);
        }
      }
    }]), t;
  }(),
      nt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.ev = this.w.config.chart.events, this.localeValues = this.w.globals.locale.toolbar;
    }

    return a(t, [{
      key: "createToolbar",
      value: function value() {
        var t = this.w,
            e = document.createElement("div");
        if (e.setAttribute("class", "apexcharts-toolbar"), t.globals.dom.elWrap.appendChild(e), this.elZoom = document.createElement("div"), this.elZoomIn = document.createElement("div"), this.elZoomOut = document.createElement("div"), this.elPan = document.createElement("div"), this.elSelection = document.createElement("div"), this.elZoomReset = document.createElement("div"), this.elMenuIcon = document.createElement("div"), this.elMenu = document.createElement("div"), this.elCustomIcons = [], this.t = t.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var i = 0; i < this.t.customIcons.length; i++) {
          this.elCustomIcons.push(document.createElement("div"));
        }
        this.elMenuItems = [];
        var a = [];
        this.t.zoomin && t.config.chart.zoom.enabled && a.push({
          el: this.elZoomIn,
          icon: "string" == typeof this.t.zoomin ? this.t.zoomin : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n',
          title: this.localeValues.zoomIn,
          "class": "apexcharts-zoom-in-icon"
        }), this.t.zoomout && t.config.chart.zoom.enabled && a.push({
          el: this.elZoomOut,
          icon: "string" == typeof this.t.zoomout ? this.t.zoomout : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n',
          title: this.localeValues.zoomOut,
          "class": "apexcharts-zoom-out-icon"
        }), this.t.zoom && t.config.chart.zoom.enabled && a.push({
          el: this.elZoom,
          icon: "string" == typeof this.t.zoom ? this.t.zoom : '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>',
          title: this.localeValues.selectionZoom,
          "class": t.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-zoom-icon"
        }), this.t.selection && t.config.chart.selection.enabled && a.push({
          el: this.elSelection,
          icon: "string" == typeof this.t.selection ? this.t.selection : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
          title: this.localeValues.selection,
          "class": t.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-selection-icon"
        }), this.t.pan && t.config.chart.zoom.enabled && a.push({
          el: this.elPan,
          icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
          title: this.localeValues.pan,
          "class": t.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon"
        }), this.t.reset && t.config.chart.zoom.enabled && a.push({
          el: this.elZoomReset,
          icon: "string" == typeof this.t.reset ? this.t.reset : '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>',
          title: this.localeValues.reset,
          "class": "apexcharts-reset-zoom-icon"
        }), this.t.download && a.push({
          el: this.elMenuIcon,
          icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
          title: this.localeValues.menu,
          "class": "apexcharts-menu-icon"
        });

        for (var s = 0; s < this.elCustomIcons.length; s++) {
          a.push({
            el: this.elCustomIcons[s],
            icon: this.t.customIcons[s].icon,
            title: this.t.customIcons[s].title,
            index: this.t.customIcons[s].index,
            "class": "apexcharts-toolbar-custom-icon " + this.t.customIcons[s]["class"]
          });
        }

        a.forEach(function (t, e) {
          t.index && g.moveIndexInArray(a, e, t.index);
        });

        for (var r = 0; r < a.length; r++) {
          p.setAttrs(a[r].el, {
            "class": a[r]["class"],
            title: a[r].title
          }), a[r].el.innerHTML = a[r].icon, e.appendChild(a[r].el);
        }

        e.appendChild(this.elMenu), p.setAttrs(this.elMenu, {
          "class": "apexcharts-menu"
        });

        for (var n = [{
          name: "exportSVG",
          title: this.localeValues.exportToSVG
        }, {
          name: "exportPNG",
          title: this.localeValues.exportToPNG
        }, {
          name: "exportCSV",
          title: this.localeValues.exportToCSV
        }], o = 0; o < n.length; o++) {
          this.elMenuItems.push(document.createElement("div")), this.elMenuItems[o].innerHTML = n[o].title, p.setAttrs(this.elMenuItems[o], {
            "class": "apexcharts-menu-item ".concat(n[o].name),
            title: n[o].title
          }), this.elMenu.appendChild(this.elMenuItems[o]);
        }

        t.globals.zoomEnabled ? this.elZoom.classList.add("apexcharts-selected") : t.globals.panEnabled ? this.elPan.classList.add("apexcharts-selected") : t.globals.selectionEnabled && this.elSelection.classList.add("apexcharts-selected"), this.addToolbarEventListeners();
      }
    }, {
      key: "addToolbarEventListeners",
      value: function value() {
        var t = this;
        this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleSelection.bind(this)), this.elZoom.addEventListener("click", this.toggleZooming.bind(this)), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function (e) {
          e.classList.contains("exportSVG") ? e.addEventListener("click", t.downloadSVG.bind(t)) : e.classList.contains("exportPNG") ? e.addEventListener("click", t.downloadPNG.bind(t)) : e.classList.contains("exportCSV") && e.addEventListener("click", t.downloadCSV.bind(t));
        });

        for (var e = 0; e < this.t.customIcons.length; e++) {
          this.elCustomIcons[e].addEventListener("click", this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w));
        }
      }
    }, {
      key: "toggleSelection",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.selectionEnabled = !this.w.globals.selectionEnabled, this.elSelection.classList.contains("apexcharts-selected") ? this.elSelection.classList.remove("apexcharts-selected") : this.elSelection.classList.add("apexcharts-selected");
      }
    }, {
      key: "toggleZooming",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.zoomEnabled = !this.w.globals.zoomEnabled, this.elZoom.classList.contains("apexcharts-selected") ? this.elZoom.classList.remove("apexcharts-selected") : this.elZoom.classList.add("apexcharts-selected");
      }
    }, {
      key: "getToolbarIconsReference",
      value: function value() {
        var t = this.w;
        this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
      }
    }, {
      key: "enableZooming",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.zoomEnabled = !0, this.elZoom && this.elZoom.classList.add("apexcharts-selected"), this.elPan && this.elPan.classList.remove("apexcharts-selected");
      }
    }, {
      key: "enablePanning",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.panEnabled = !0, this.elPan && this.elPan.classList.add("apexcharts-selected"), this.elZoom && this.elZoom.classList.remove("apexcharts-selected");
      }
    }, {
      key: "togglePanning",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.panEnabled = !this.w.globals.panEnabled, this.elPan.classList.contains("apexcharts-selected") ? this.elPan.classList.remove("apexcharts-selected") : this.elPan.classList.add("apexcharts-selected");
      }
    }, {
      key: "toggleOtherControls",
      value: function value() {
        var t = this.w;
        t.globals.panEnabled = !1, t.globals.zoomEnabled = !1, t.globals.selectionEnabled = !1, this.getToolbarIconsReference(), this.elPan && this.elPan.classList.remove("apexcharts-selected"), this.elSelection && this.elSelection.classList.remove("apexcharts-selected"), this.elZoom && this.elZoom.classList.remove("apexcharts-selected");
      }
    }, {
      key: "handleZoomIn",
      value: function value() {
        var t = this.w,
            e = (t.globals.minX + t.globals.maxX) / 2,
            i = (t.globals.minX + e) / 2,
            a = (t.globals.maxX + e) / 2;
        t.config.xaxis.convertedCatToNumeric && (i = Math.floor(i), a = Math.floor(a)), t.globals.disableZoomIn || this.zoomUpdateOptions(i, a);
      }
    }, {
      key: "handleZoomOut",
      value: function value() {
        var t = this.w;

        if (!("datetime" === t.config.xaxis.type && new Date(t.globals.minX).getUTCFullYear() < 1e3)) {
          var e = (t.globals.minX + t.globals.maxX) / 2,
              i = t.globals.minX - (e - t.globals.minX),
              a = t.globals.maxX - (e - t.globals.maxX);
          t.config.xaxis.convertedCatToNumeric && (i = Math.floor(i), a = Math.floor(a)), t.globals.disableZoomOut || this.zoomUpdateOptions(i, a);
        }
      }
    }, {
      key: "zoomUpdateOptions",
      value: function value(t, e) {
        var i = this.w;

        if (!(i.config.xaxis.convertedCatToNumeric && (t < 1 && (t = 1, e = i.globals.dataPoints), e - t < 2))) {
          var a = {
            min: t,
            max: e
          },
              s = this.getBeforeZoomRange(a);
          s && (a = s.xaxis);
          var r = {
            xaxis: a
          },
              n = g.clone(i.globals.initialConfig.yaxis);
          if (i.config.chart.zoom.autoScaleYaxis) n = new B(this.ctx).autoScaleY(this.ctx, n, {
            xaxis: a
          });
          i.config.chart.group || (r.yaxis = n), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(r, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a, n);
        }
      }
    }, {
      key: "zoomCallback",
      value: function value(t, e) {
        "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {
          xaxis: t,
          yaxis: e
        });
      }
    }, {
      key: "getBeforeZoomRange",
      value: function value(t, e) {
        var i = null;
        return "function" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, {
          xaxis: t,
          yaxis: e
        })), i;
      }
    }, {
      key: "toggleMenu",
      value: function value() {
        var t = this;
        window.setTimeout(function () {
          t.elMenu.classList.contains("apexcharts-menu-open") ? t.elMenu.classList.remove("apexcharts-menu-open") : t.elMenu.classList.add("apexcharts-menu-open");
        }, 0);
      }
    }, {
      key: "downloadPNG",
      value: function value() {
        new O(this.ctx).exportToPng(this.ctx);
      }
    }, {
      key: "downloadSVG",
      value: function value() {
        new O(this.ctx).exportToSVG();
      }
    }, {
      key: "downloadCSV",
      value: function value() {
        var t = this.w;
        new O(this.ctx).exportToCSV({
          series: t.config.series
        });
      }
    }, {
      key: "handleZoomReset",
      value: function value(t) {
        var e = this;
        this.ctx.getSyncedCharts().forEach(function (t) {
          var i = t.w;
          i.globals.minX === i.globals.initialMinX && i.globals.maxX === i.globals.initialMaxX || (t.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof i.config.chart.events.zoomed && e.zoomCallback({
            min: i.config.xaxis.min,
            max: i.config.xaxis.max
          }), i.globals.zoomed = !1, t.updateHelpers._updateSeries(i.globals.initialSeries, i.config.chart.animations.dynamicAnimation.enabled));
        });
      }
    }, {
      key: "destroy",
      value: function value() {
        this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
      }
    }]), t;
  }(),
      ot = function (t) {
    function i(t) {
      var a;
      return e(this, i), (a = c(this, l(i).call(this, t))).ctx = t, a.w = t.w, a.dragged = !1, a.graphics = new p(a.ctx), a.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], a.clientX = 0, a.clientY = 0, a.startX = 0, a.endX = 0, a.dragX = 0, a.startY = 0, a.endY = 0, a.dragY = 0, a.moveDirection = "none", a;
    }

    return o(i, t), a(i, [{
      key: "init",
      value: function value(t) {
        var e = this,
            i = t.xyRatios,
            a = this.w,
            s = this;
        this.xyRatios = i, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a.globals.dom.elGraphical.add(this.zoomRect), a.globals.dom.elGraphical.add(this.selectionRect), "x" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
          minX: 0,
          minY: 0,
          maxX: a.globals.gridWidth,
          maxY: a.globals.gridHeight
        }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
          minX: 0,
          maxX: a.globals.gridWidth
        }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a.globals.dom.baseEl.querySelector(a.globals.chartClass), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function (t) {
          e.hoverArea.addEventListener(t, s.svgMouseEvents.bind(s, i), {
            capture: !1,
            passive: !0
          });
        });
      }
    }, {
      key: "destroy",
      value: function value() {
        this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
      }
    }, {
      key: "svgMouseEvents",
      value: function value(t, e) {
        var i = this.w,
            a = this,
            s = this.ctx.toolbar,
            r = i.globals.zoomEnabled ? i.config.chart.zoom.type : i.config.chart.selection.type;

        if (e.shiftKey ? (this.shiftWasPressed = !0, s.enablePanning()) : this.shiftWasPressed && (s.enableZooming(), this.shiftWasPressed = !1), !(e.target.classList.contains("apexcharts-selection-rect") || e.target.parentNode.classList.contains("apexcharts-toolbar"))) {
          if (a.clientX = "touchmove" === e.type || "touchstart" === e.type ? e.touches[0].clientX : "touchend" === e.type ? e.changedTouches[0].clientX : e.clientX, a.clientY = "touchmove" === e.type || "touchstart" === e.type ? e.touches[0].clientY : "touchend" === e.type ? e.changedTouches[0].clientY : e.clientY, "mousedown" === e.type && 1 === e.which) {
            var n = a.gridRect.getBoundingClientRect();
            a.startX = a.clientX - n.left, a.startY = a.clientY - n.top, a.dragged = !1, a.w.globals.mousedown = !0;
          }

          if (("mousemove" === e.type && 1 === e.which || "touchmove" === e.type) && (a.dragged = !0, i.globals.panEnabled ? (i.globals.selection = null, a.w.globals.mousedown && a.panDragging({
            context: a,
            zoomtype: r,
            xyRatios: t
          })) : (a.w.globals.mousedown && i.globals.zoomEnabled || a.w.globals.mousedown && i.globals.selectionEnabled) && (a.selection = a.selectionDrawing({
            context: a,
            zoomtype: r
          }))), "mouseup" === e.type || "touchend" === e.type || "mouseleave" === e.type) {
            var o = a.gridRect.getBoundingClientRect();
            a.w.globals.mousedown && (a.endX = a.clientX - o.left, a.endY = a.clientY - o.top, a.dragX = Math.abs(a.endX - a.startX), a.dragY = Math.abs(a.endY - a.startY), (i.globals.zoomEnabled || i.globals.selectionEnabled) && a.selectionDrawn({
              context: a,
              zoomtype: r
            })), i.globals.panEnabled && a.delayedPanScrolled(), i.globals.zoomEnabled && a.hideSelectionRect(this.selectionRect), a.dragged = !1, a.w.globals.mousedown = !1;
          }

          this.makeSelectionRectDraggable();
        }
      }
    }, {
      key: "makeSelectionRectDraggable",
      value: function value() {
        var t = this.w;

        if (this.selectionRect) {
          var e = this.selectionRect.node.getBoundingClientRect();
          e.width > 0 && e.height > 0 && this.slDraggableRect.selectize().resize({
            constraint: {
              minX: 0,
              minY: 0,
              maxX: t.globals.gridWidth,
              maxY: t.globals.gridHeight
            }
          }).on("resizing", this.selectionDragging.bind(this, "resizing"));
        }
      }
    }, {
      key: "preselectedSelection",
      value: function value() {
        var t = this.w,
            e = this.xyRatios;
        if (!t.globals.zoomEnabled) if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(t.globals.selection);else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {
          var i = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio,
              a = {
            x: i,
            y: 0,
            width: t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - i,
            height: t.globals.gridHeight,
            translateX: 0,
            translateY: 0,
            selectionEnabled: !0
          };
          this.drawSelectionRect(a), this.makeSelectionRectDraggable(), "function" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {
            xaxis: {
              min: t.config.chart.selection.xaxis.min,
              max: t.config.chart.selection.xaxis.max
            },
            yaxis: {}
          });
        }
      }
    }, {
      key: "drawSelectionRect",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            a = t.width,
            s = t.height,
            r = t.translateX,
            n = t.translateY,
            o = this.w,
            l = this.zoomRect,
            h = this.selectionRect;

        if (this.dragged || null !== o.globals.selection) {
          var c = {
            transform: "translate(" + r + ", " + n + ")"
          };
          o.globals.zoomEnabled && this.dragged && (a < 0 && (a = 1), l.attr({
            x: e,
            y: i,
            width: a,
            height: s,
            fill: o.config.chart.zoom.zoomedArea.fill.color,
            "fill-opacity": o.config.chart.zoom.zoomedArea.fill.opacity,
            stroke: o.config.chart.zoom.zoomedArea.stroke.color,
            "stroke-width": o.config.chart.zoom.zoomedArea.stroke.width,
            "stroke-opacity": o.config.chart.zoom.zoomedArea.stroke.opacity
          }), p.setAttrs(l.node, c)), o.globals.selectionEnabled && (h.attr({
            x: e,
            y: i,
            width: a > 0 ? a : 0,
            height: s > 0 ? s : 0,
            fill: o.config.chart.selection.fill.color,
            "fill-opacity": o.config.chart.selection.fill.opacity,
            stroke: o.config.chart.selection.stroke.color,
            "stroke-width": o.config.chart.selection.stroke.width,
            "stroke-dasharray": o.config.chart.selection.stroke.dashArray,
            "stroke-opacity": o.config.chart.selection.stroke.opacity
          }), p.setAttrs(h.node, c));
        }
      }
    }, {
      key: "hideSelectionRect",
      value: function value(t) {
        t && t.attr({
          x: 0,
          y: 0,
          width: 0,
          height: 0
        });
      }
    }, {
      key: "selectionDrawing",
      value: function value(t) {
        var e = t.context,
            i = t.zoomtype,
            a = this.w,
            s = e,
            r = this.gridRect.getBoundingClientRect(),
            n = s.startX - 1,
            o = s.startY,
            l = s.clientX - r.left - n,
            h = s.clientY - r.top - o,
            c = 0,
            d = 0,
            g = {};
        return Math.abs(l + n) > a.globals.gridWidth ? l = a.globals.gridWidth - n : s.clientX - r.left < 0 && (l = n), n > s.clientX - r.left && (c = -(l = Math.abs(l))), o > s.clientY - r.top && (d = -(h = Math.abs(h))), g = "x" === i ? {
          x: n,
          y: 0,
          width: l,
          height: a.globals.gridHeight,
          translateX: c,
          translateY: 0
        } : "y" === i ? {
          x: 0,
          y: o,
          width: a.globals.gridWidth,
          height: h,
          translateX: 0,
          translateY: d
        } : {
          x: n,
          y: o,
          width: l,
          height: h,
          translateX: c,
          translateY: d
        }, s.drawSelectionRect(g), s.selectionDragging("resizing"), g;
      }
    }, {
      key: "selectionDragging",
      value: function value(t, e) {
        var i = this,
            a = this.w,
            s = this.xyRatios,
            r = this.selectionRect,
            n = 0;
        "resizing" === t && (n = 30), "function" == typeof a.config.chart.events.selection && a.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function () {
          var t = i.gridRect.getBoundingClientRect(),
              e = r.node.getBoundingClientRect(),
              n = a.globals.xAxisScale.niceMin + (e.left - t.left) * s.xRatio,
              o = a.globals.xAxisScale.niceMin + (e.right - t.left) * s.xRatio,
              l = a.globals.yAxisScale[0].niceMin + (t.bottom - e.bottom) * s.yRatio[0],
              h = a.globals.yAxisScale[0].niceMax - (e.top - t.top) * s.yRatio[0];
          a.config.chart.events.selection(i.ctx, {
            xaxis: {
              min: n,
              max: o
            },
            yaxis: {
              min: l,
              max: h
            }
          });
        }, n));
      }
    }, {
      key: "selectionDrawn",
      value: function value(t) {
        var e = t.context,
            i = t.zoomtype,
            a = this.w,
            s = e,
            r = this.xyRatios,
            n = this.ctx.toolbar;

        if (s.startX > s.endX) {
          var o = s.startX;
          s.startX = s.endX, s.endX = o;
        }

        if (s.startY > s.endY) {
          var l = s.startY;
          s.startY = s.endY, s.endY = l;
        }

        var h = a.globals.xAxisScale.niceMin + s.startX * r.xRatio,
            c = a.globals.xAxisScale.niceMin + s.endX * r.xRatio,
            d = [],
            u = [];
        if (a.config.yaxis.forEach(function (t, e) {
          d.push(a.globals.yAxisScale[e].niceMax - r.yRatio[e] * s.startY), u.push(a.globals.yAxisScale[e].niceMax - r.yRatio[e] * s.endY);
        }), s.dragged && (s.dragX > 10 || s.dragY > 10) && h !== c) if (a.globals.zoomEnabled) {
          var f = g.clone(a.globals.initialConfig.yaxis);
          a.globals.zoomed || (a.globals.lastXAxis = g.clone(a.config.xaxis), a.globals.lastYAxis = g.clone(a.config.yaxis)), a.config.xaxis.convertedCatToNumeric && (h = Math.floor(h), c = Math.floor(c), h < 1 && (h = 1, c = a.globals.dataPoints), c - h < 2 && (c = h + 1));
          var p = {
            min: h,
            max: c
          };

          if ("xy" !== i && "y" !== i || f.forEach(function (t, e) {
            f[e].min = u[e], f[e].max = d[e];
          }), a.config.chart.zoom.autoScaleYaxis) {
            var x = new B(s.ctx);
            f = x.autoScaleY(s.ctx, f, {
              xaxis: p
            });
          }

          if (n) {
            var b = n.getBeforeZoomRange(p, f);
            b && (p = b.xaxis ? b.xaxis : p, f = b.yaxis ? b.yaxe : f);
          }

          var m = {
            xaxis: p
          };
          a.config.chart.group || (m.yaxis = f), s.ctx.updateHelpers._updateOptions(m, !1, s.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a.config.chart.events.zoomed && n.zoomCallback(p, f), a.globals.zoomed = !0;
        } else if (a.globals.selectionEnabled) {
          var v,
              y = null;
          v = {
            min: h,
            max: c
          }, "xy" !== i && "y" !== i || (y = g.clone(a.config.yaxis)).forEach(function (t, e) {
            y[e].min = u[e], y[e].max = d[e];
          }), a.globals.selection = s.selection, "function" == typeof a.config.chart.events.selection && a.config.chart.events.selection(s.ctx, {
            xaxis: v,
            yaxis: y
          });
        }
      }
    }, {
      key: "panDragging",
      value: function value(t) {
        var e = t.context,
            i = this.w,
            a = e;

        if (void 0 !== i.globals.lastClientPosition.x) {
          var s = i.globals.lastClientPosition.x - a.clientX,
              r = i.globals.lastClientPosition.y - a.clientY;
          Math.abs(s) > Math.abs(r) && s > 0 ? this.moveDirection = "left" : Math.abs(s) > Math.abs(r) && s < 0 ? this.moveDirection = "right" : Math.abs(r) > Math.abs(s) && r > 0 ? this.moveDirection = "up" : Math.abs(r) > Math.abs(s) && r < 0 && (this.moveDirection = "down");
        }

        i.globals.lastClientPosition = {
          x: a.clientX,
          y: a.clientY
        };
        var n = i.globals.minX,
            o = i.globals.maxX;
        i.config.xaxis.convertedCatToNumeric && a.panScrolled(n, o);
      }
    }, {
      key: "delayedPanScrolled",
      value: function value() {
        var t = this.w,
            e = t.globals.minX,
            i = t.globals.maxX,
            a = (t.globals.minX + t.globals.maxX) / 2;
        "left" === this.moveDirection ? (e = t.globals.minX - a, i = t.globals.maxX - a) : "right" === this.moveDirection && (e = t.globals.minX + a, i = t.globals.maxX + a), e = Math.floor(e), i = Math.floor(i), this.updateScrolledChart({
          xaxis: {
            min: e,
            max: i
          }
        }, e, i);
      }
    }, {
      key: "panScrolled",
      value: function value(t, e) {
        var i = this.w,
            a = this.xyRatios,
            s = g.clone(i.globals.initialConfig.yaxis);
        "left" === this.moveDirection ? (t = i.globals.minX + i.globals.gridWidth / 15 * a.xRatio, e = i.globals.maxX + i.globals.gridWidth / 15 * a.xRatio) : "right" === this.moveDirection && (t = i.globals.minX - i.globals.gridWidth / 15 * a.xRatio, e = i.globals.maxX - i.globals.gridWidth / 15 * a.xRatio), (t < i.globals.initialMinX || e > i.globals.initialMaxX) && (t = i.globals.minX, e = i.globals.maxX);
        var r = {
          min: t,
          max: e
        };
        i.config.chart.zoom.autoScaleYaxis && (s = new B(this.ctx).autoScaleY(this.ctx, s, {
          xaxis: r
        }));
        var n = {
          xaxis: {
            min: t,
            max: e
          }
        };
        i.config.chart.group || (n.yaxis = s), this.updateScrolledChart(n, t, e);
      }
    }, {
      key: "updateScrolledChart",
      value: function value(t, e, i) {
        var a = this.w;
        this.ctx.updateHelpers._updateOptions(t, !1, !1), "function" == typeof a.config.chart.events.scrolled && a.config.chart.events.scrolled(this.ctx, {
          xaxis: {
            min: e,
            max: i
          }
        });
      }
    }]), i;
  }(nt),
      lt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i, this.ctx = i.ctx;
    }

    return a(t, [{
      key: "getNearestValues",
      value: function value(t) {
        var e = t.hoverArea,
            i = t.elGrid,
            a = t.clientX,
            s = t.clientY,
            r = t.hasBars,
            n = this.w,
            o = n.globals.gridWidth,
            l = o / (n.globals.dataPoints - 1),
            h = i.getBoundingClientRect();
        (r && n.globals.comboCharts || r) && (l = o / n.globals.dataPoints);
        var c = a - h.left,
            d = s - h.top;
        c < 0 || d < 0 || c > n.globals.gridWidth || d > n.globals.gridHeight ? (e.classList.remove("hovering-zoom"), e.classList.remove("hovering-pan")) : n.globals.zoomEnabled ? (e.classList.remove("hovering-pan"), e.classList.add("hovering-zoom")) : n.globals.panEnabled && (e.classList.remove("hovering-zoom"), e.classList.add("hovering-pan"));
        var u = Math.round(c / l);
        r && (u = Math.ceil(c / l), u -= 1);

        for (var f, p = null, x = null, b = [], m = 0; m < n.globals.seriesXvalues.length; m++) {
          b.push([n.globals.seriesXvalues[m][0] - 1e-6].concat(n.globals.seriesXvalues[m]));
        }

        return b = b.map(function (t) {
          return t.filter(function (t) {
            return t;
          });
        }), f = n.globals.seriesYvalues.map(function (t) {
          return t.filter(function (t) {
            return g.isNumber(t);
          });
        }), n.globals.isXNumeric && (p = (x = this.closestInMultiArray(c, d, b, f)).index, u = x.j, null !== p && (b = n.globals.seriesXvalues[p], u = (x = this.closestInArray(c, b)).index)), n.globals.capturedSeriesIndex = null === p ? -1 : p, n.globals.capturedDataPointIndex = null === u ? -1 : u, (!u || u < 1) && (u = 0), {
          capturedSeries: p,
          j: u,
          hoverX: c,
          hoverY: d
        };
      }
    }, {
      key: "closestInMultiArray",
      value: function value(t, e, i, a) {
        var s = this.w,
            r = 0,
            n = null,
            o = -1;
        s.globals.series.length > 1 ? r = this.getFirstActiveXArray(i) : n = 0;
        var l = a[r][0],
            h = i[r][0],
            c = Math.abs(t - h),
            d = Math.abs(e - l),
            g = d + c;
        return a.map(function (s, r) {
          s.map(function (s, l) {
            var h = Math.abs(e - a[r][l]),
                u = Math.abs(t - i[r][l]),
                f = u + h;
            f < g && (g = f, c = u, d = h, n = r, o = l);
          });
        }), {
          index: n,
          j: o
        };
      }
    }, {
      key: "getFirstActiveXArray",
      value: function value(t) {
        for (var e = 0, i = new E(this.ctx), a = t.map(function (t, e) {
          return t.length > 0 ? e : -1;
        }), s = 0; s < a.length; s++) {
          var r = i.getSeriesTotalByIndex(s);

          if (-1 !== a[s] && 0 !== r && !i.seriesHaveSameValues(s)) {
            e = a[s];
            break;
          }
        }

        return e;
      }
    }, {
      key: "closestInArray",
      value: function value(t, e) {
        for (var i = e[0], a = null, s = Math.abs(t - i), r = 0; r < e.length; r++) {
          var n = Math.abs(t - e[r]);
          n < s && (s = n, a = r);
        }

        return {
          index: a
        };
      }
    }, {
      key: "isXoverlap",
      value: function value(t) {
        var e = [],
            i = this.w.globals.seriesX.filter(function (t) {
          return void 0 !== t[0];
        });
        if (i.length > 0) for (var a = 0; a < i.length - 1; a++) {
          void 0 !== i[a][t] && void 0 !== i[a + 1][t] && i[a][t] !== i[a + 1][t] && e.push("unEqual");
        }
        return 0 === e.length;
      }
    }, {
      key: "isInitialSeriesSameLen",
      value: function value() {
        for (var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++) {
          if (e[i].data.length !== e[i + 1].data.length) {
            t = !1;
            break;
          }
        }

        return t;
      }
    }, {
      key: "getBarsHeight",
      value: function value(t) {
        return d(t).reduce(function (t, e) {
          return t + e.getBBox().height;
        }, 0);
      }
    }, {
      key: "toggleAllTooltipSeriesGroups",
      value: function value(t) {
        var e = this.w,
            i = this.ttCtx;
        0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));

        for (var a = i.allTooltipSeriesGroups, s = 0; s < a.length; s++) {
          "enable" === t ? (a[s].classList.add("apexcharts-active"), a[s].style.display = e.config.tooltip.items.display) : (a[s].classList.remove("apexcharts-active"), a[s].style.display = "none");
        }
      }
    }]), t;
  }(),
      ht = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ctx = i.ctx, this.ttCtx = i, this.tooltipUtil = new lt(i);
    }

    return a(t, [{
      key: "drawSeriesTexts",
      value: function value(t) {
        var e = t.shared,
            i = void 0 === e || e,
            a = t.ttItems,
            s = t.i,
            r = void 0 === s ? 0 : s,
            n = t.j,
            o = void 0 === n ? null : n,
            l = t.y1,
            h = t.y2;
        void 0 !== this.w.config.tooltip.custom ? this.handleCustomTooltip({
          i: r,
          j: o,
          y1: l,
          y2: h
        }) : this.toggleActiveInactiveSeries(i);
        var c = this.getValuesToPrint({
          i: r,
          j: o
        });
        this.printLabels({
          i: r,
          j: o,
          values: c,
          ttItems: a,
          shared: i
        });
        var d = this.ttCtx.getElTooltip();
        this.ttCtx.tooltipRect.ttWidth = d.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = d.getBoundingClientRect().height;
      }
    }, {
      key: "printLabels",
      value: function value(t) {
        var e,
            i = this,
            a = t.i,
            s = t.j,
            r = t.values,
            n = t.ttItems,
            o = t.shared,
            l = this.w,
            h = r.xVal,
            c = r.zVal,
            d = r.xAxisTTVal,
            g = "",
            u = l.globals.colors[a];
        null !== s && l.config.plotOptions.bar.distributed && (u = l.globals.colors[s]);

        for (var f = function f(t, r) {
          var f = i.getFormatters(a);
          g = i.getSeriesName({
            fn: f.yLbTitleFormatter,
            index: a,
            seriesIndex: a,
            j: s
          });
          var p = l.config.tooltip.inverseOrder ? r : t;

          if (l.globals.axisCharts) {
            var x = function x(t) {
              return f.yLbFormatter(l.globals.series[t][s], {
                series: l.globals.series,
                seriesIndex: t,
                dataPointIndex: s,
                w: l
              });
            };

            o ? (f = i.getFormatters(p), g = i.getSeriesName({
              fn: f.yLbTitleFormatter,
              index: p,
              seriesIndex: a,
              j: s
            }), u = l.globals.colors[p], e = x(p), (i.ttCtx.hasBars() && l.config.chart.stacked && 0 === l.globals.series[p][s] || void 0 === l.globals.series[p][s]) && (e = void 0)) : e = x(a);
          }

          null === s && (e = f.yLbFormatter(l.globals.series[a], l)), i.DOMHandling({
            i: a,
            t: p,
            ttItems: n,
            values: {
              val: e,
              xVal: h,
              xAxisTTVal: d,
              zVal: c
            },
            seriesName: g,
            shared: o,
            pColor: u
          });
        }, p = 0, x = l.globals.series.length - 1; p < l.globals.series.length; p++, x--) {
          f(p, x);
        }
      }
    }, {
      key: "getFormatters",
      value: function value(t) {
        var e,
            i = this.w,
            a = i.globals.yLabelFormatters[t];
        return void 0 !== i.globals.ttVal ? Array.isArray(i.globals.ttVal) ? (a = i.globals.ttVal[t] && i.globals.ttVal[t].formatter, e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter) : (a = i.globals.ttVal.formatter, "function" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter)) : e = i.config.tooltip.y.title.formatter, "function" != typeof a && (a = i.globals.yLabelFormatters[0] ? i.globals.yLabelFormatters[0] : function (t) {
          return t;
        }), "function" != typeof e && (e = function e(t) {
          return t;
        }), {
          yLbFormatter: a,
          yLbTitleFormatter: e
        };
      }
    }, {
      key: "getSeriesName",
      value: function value(t) {
        var e = t.fn,
            i = t.index,
            a = t.seriesIndex,
            s = t.j,
            r = this.w;
        return e(String(r.globals.seriesNames[i]), {
          series: r.globals.series,
          seriesIndex: a,
          dataPointIndex: s,
          w: r
        });
      }
    }, {
      key: "DOMHandling",
      value: function value(t) {
        var e = t.i,
            i = t.t,
            a = t.ttItems,
            s = t.values,
            r = t.seriesName,
            n = t.shared,
            o = t.pColor,
            l = this.w,
            h = this.ttCtx,
            c = s.val,
            d = s.xVal,
            g = s.xAxisTTVal,
            u = s.zVal,
            f = null;
        f = a[i].children, l.config.tooltip.fillSeriesColor && (a[i].style.backgroundColor = o, f[0].style.display = "none"), h.showTooltipTitle && (null === h.tooltipTitle && (h.tooltipTitle = l.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h.tooltipTitle.innerHTML = d), h.blxaxisTooltip && (h.xaxisTooltipText.innerHTML = "" !== g ? g : d);
        var p = a[i].querySelector(".apexcharts-tooltip-text-label");
        p && (p.innerHTML = r ? r + ": " : "");
        var x = a[i].querySelector(".apexcharts-tooltip-text-value");
        (x && (x.innerHTML = c), f[0] && f[0].classList.contains("apexcharts-tooltip-marker") && (l.config.tooltip.marker.fillColors && Array.isArray(l.config.tooltip.marker.fillColors) && (o = l.config.tooltip.marker.fillColors[e]), f[0].style.backgroundColor = o), l.config.tooltip.marker.show || (f[0].style.display = "none"), null !== u) && (a[i].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l.config.tooltip.z.title, a[i].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== u ? u : "");
        n && f[0] && (null == c || l.globals.collapsedSeriesIndices.indexOf(i) > -1 ? f[0].parentNode.style.display = "none" : f[0].parentNode.style.display = l.config.tooltip.items.display);
      }
    }, {
      key: "toggleActiveInactiveSeries",
      value: function value(t) {
        var e = this.w;
        if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");else {
          this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
          var i = e.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
          i && (i.classList.add("apexcharts-active"), i.style.display = e.config.tooltip.items.display);
        }
      }
    }, {
      key: "getValuesToPrint",
      value: function value(t) {
        var e = t.i,
            i = t.j,
            a = this.w,
            s = this.ctx.series.filteredSeriesX(),
            r = "",
            n = "",
            o = null,
            l = null,
            h = {
          series: a.globals.series,
          seriesIndex: e,
          dataPointIndex: i,
          w: a
        },
            c = a.globals.ttZFormatter;
        null === i ? l = a.globals.series[e] : a.globals.isXNumeric ? (r = s[e][i], 0 === s[e].length && (r = s[this.tooltipUtil.getFirstActiveXArray(s)][i])) : r = void 0 !== a.globals.labels[i] ? a.globals.labels[i] : "";
        var d = r;
        a.globals.isXNumeric && "datetime" === a.config.xaxis.type ? r = new D(this.ctx).xLabelFormat(a.globals.ttKeyFormatter, d, d) : a.globals.isBarHorizontal || (r = a.globals.xLabelFormatter(d, h));
        return void 0 !== a.config.tooltip.x.formatter && (r = a.globals.ttKeyFormatter(d, h)), a.globals.seriesZ.length > 0 && a.globals.seriesZ[0].length > 0 && (o = c(a.globals.seriesZ[e][i], a)), n = "function" == typeof a.config.xaxis.tooltip.formatter ? a.globals.xaxisTooltipFormatter(d, h) : r, {
          val: Array.isArray(l) ? l.join(" ") : l,
          xVal: Array.isArray(r) ? r.join(" ") : r,
          xAxisTTVal: Array.isArray(n) ? n.join(" ") : n,
          zVal: o
        };
      }
    }, {
      key: "handleCustomTooltip",
      value: function value(t) {
        var e = t.i,
            i = t.j,
            a = t.y1,
            s = t.y2,
            r = this.w,
            n = this.ttCtx.getElTooltip(),
            o = r.config.tooltip.custom;
        Array.isArray(o) && o[e] && (o = o[e]), n.innerHTML = o({
          ctx: this.ctx,
          series: r.globals.series,
          seriesIndex: e,
          dataPointIndex: i,
          y1: a,
          y2: s,
          w: r
        });
      }
    }]), t;
  }(),
      ct = function () {
    function t(i) {
      e(this, t), this.ttCtx = i, this.ctx = i.ctx, this.w = i.w;
    }

    return a(t, [{
      key: "moveXCrosshairs",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            i = this.ttCtx,
            a = this.w,
            s = i.getElXCrosshairs(),
            r = t - i.xcrosshairsWidth / 2,
            n = a.globals.labels.slice().length;

        if (null !== e && (r = a.globals.gridWidth / n * e), null !== s && (s.setAttribute("x", r), s.setAttribute("x1", r), s.setAttribute("x2", r), s.setAttribute("y2", a.globals.gridHeight), s.classList.add("apexcharts-active")), r < 0 && (r = 0), r > a.globals.gridWidth && (r = a.globals.gridWidth), i.blxaxisTooltip) {
          var o = r;
          "tickWidth" !== a.config.xaxis.crosshairs.width && "barWidth" !== a.config.xaxis.crosshairs.width || (o = r + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(o);
        }
      }
    }, {
      key: "moveYCrosshairs",
      value: function value(t) {
        var e = this.ttCtx;
        null !== e.ycrosshairs && (p.setAttrs(e.ycrosshairs, {
          y1: t,
          y2: t
        }), p.setAttrs(e.ycrosshairsHidden, {
          y1: t,
          y2: t
        }));
      }
    }, {
      key: "moveXAxisTooltip",
      value: function value(t) {
        var e = this.w,
            i = this.ttCtx;

        if (null !== i.xaxisTooltip) {
          i.xaxisTooltip.classList.add("apexcharts-active");
          var a = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;

          if (t -= i.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t)) {
            t += e.globals.translateX;
            var s;
            s = new p(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML), i.xaxisTooltipText.style.minWidth = s.width + "px", i.xaxisTooltip.style.left = t + "px", i.xaxisTooltip.style.top = a + "px";
          }
        }
      }
    }, {
      key: "moveYAxisTooltip",
      value: function value(t) {
        var e = this.w,
            i = this.ttCtx;
        null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
        var a = parseInt(i.ycrosshairsHidden.getAttribute("y1"), 10),
            s = e.globals.translateY + a,
            r = i.yaxisTTEls[t].getBoundingClientRect().height,
            n = e.globals.translateYAxisX[t] - 2;
        e.config.yaxis[t].opposite && (n -= 26), s -= r / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) ? (i.yaxisTTEls[t].classList.add("apexcharts-active"), i.yaxisTTEls[t].style.top = s + "px", i.yaxisTTEls[t].style.left = n + e.config.yaxis[t].tooltip.offsetX + "px") : i.yaxisTTEls[t].classList.remove("apexcharts-active");
      }
    }, {
      key: "moveTooltip",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            a = this.w,
            s = this.ttCtx,
            r = s.getElTooltip(),
            n = s.tooltipRect,
            o = null !== i ? parseFloat(i) : 1,
            l = parseFloat(t) + o + 5,
            h = parseFloat(e) + o / 2;

        if (l > a.globals.gridWidth / 2 && (l = l - n.ttWidth - o - 15), l > a.globals.gridWidth - n.ttWidth - 10 && (l = a.globals.gridWidth - n.ttWidth), l < -20 && (l = -20), a.config.tooltip.followCursor) {
          var c = s.getElGrid(),
              d = c.getBoundingClientRect();
          h = s.e.clientY + a.globals.translateY - d.top - n.ttHeight / 2;
        }

        var g = this.positionChecks(n, l, h);
        l = g.x, h = g.y, isNaN(l) || (l += a.globals.translateX, r.style.left = l + "px", r.style.top = h + "px");
      }
    }, {
      key: "positionChecks",
      value: function value(t, e, i) {
        var a = this.w;
        return t.ttHeight + i > a.globals.gridHeight && (i = a.globals.gridHeight - t.ttHeight + a.globals.translateY), i < 0 && (i = 0), {
          x: e,
          y: i
        };
      }
    }, {
      key: "moveMarkers",
      value: function value(t, e) {
        var i = this.w,
            a = this.ttCtx;
        if (i.globals.markers.size[t] > 0) for (var s = i.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t, "'] .apexcharts-marker")), r = 0; r < s.length; r++) {
          parseInt(s[r].getAttribute("rel"), 10) === e && (a.marker.resetPointsSize(), a.marker.enlargeCurrentPoint(e, s[r]));
        } else a.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);
      }
    }, {
      key: "moveDynamicPointOnHover",
      value: function value(t, e) {
        var i,
            a,
            s = this.w,
            r = this.ttCtx,
            n = s.globals.pointsArray,
            o = s.config.markers.hover.size;

        if (void 0 === o && (o = s.globals.markers.size[e] + s.config.markers.hover.sizeOffset), !s.config.series[e].type || "column" !== s.config.series[e].type && "candlestick" !== s.config.series[e].type) {
          i = n[e][t][0], a = n[e][t][1] ? n[e][t][1] : 0;
          var l = s.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e, "'] .apexcharts-series-markers circle"));
          l && (l.setAttribute("r", o), l.setAttribute("cx", i), l.setAttribute("cy", a)), this.moveXCrosshairs(i), r.fixedTooltip || this.moveTooltip(i, a, o);
        }
      }
    }, {
      key: "moveDynamicPointsOnHover",
      value: function value(t) {
        var e,
            i = this.ttCtx,
            a = i.w,
            s = 0,
            r = 0,
            n = a.globals.pointsArray;
        e = new R(this.ctx).getActiveSeriesIndex();
        var o = a.config.markers.hover.size;
        void 0 === o && (o = a.globals.markers.size[e] + a.config.markers.hover.sizeOffset), n[e] && (s = n[e][t][0], r = n[e][t][1]);
        var l = null,
            h = i.getAllMarkers();
        if (null !== (l = null !== h ? h : a.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers circle"))) for (var c = 0; c < a.globals.series.length; c++) {
          var g = n[c];

          if (a.globals.comboCharts && void 0 === g && (l = d(l)).splice(c, 0, null), g && g.length) {
            var u = n[c][t][1];
            l[c].setAttribute("cx", s);
            var f = parseInt(l[c].parentNode.parentNode.parentNode.getAttribute("data:realIndex"), 10);
            null === u || isNaN(u) ? l[f] && l[f].setAttribute("r", 0) : (l[f] && l[f].setAttribute("r", o), l[f] && l[f].setAttribute("cy", u));
          }
        }

        if (this.moveXCrosshairs(s), !i.fixedTooltip) {
          var p = r || a.globals.gridHeight;
          this.moveTooltip(s, p, o);
        }
      }
    }, {
      key: "moveStickyTooltipOverBars",
      value: function value(t) {
        var e,
            i = this.w,
            a = this.ttCtx,
            s = i.globals.columnSeries ? i.globals.columnSeries.length : i.globals.series.length,
            r = s >= 2 && s % 2 == 0 ? Math.floor(s / 2) : Math.floor(s / 2) + 1,
            n = i.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(r, "'] path[j='").concat(t, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(r, "'] path[j='").concat(t, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(r, "'] path[j='").concat(t, "']")),
            o = n ? parseFloat(n.getAttribute("cx")) : 0,
            l = n ? parseFloat(n.getAttribute("barWidth")) : 0;
        i.globals.isXNumeric ? o -= s % 2 != 0 ? l / 2 : 0 : (o = a.xAxisTicksPositions[t - 1] + a.dataPointsDividedWidth / 2, isNaN(o) && (o = a.xAxisTicksPositions[t] - a.dataPointsDividedWidth / 2));
        var h = a.getElGrid().getBoundingClientRect();

        if (e = a.e.clientY - h.top - a.tooltipRect.ttHeight / 2, this.moveXCrosshairs(o), !a.fixedTooltip) {
          var c = e || i.globals.gridHeight;
          this.moveTooltip(o, c);
        }
      }
    }]), t;
  }(),
      dt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i, this.ctx = i.ctx, this.tooltipPosition = new ct(i);
    }

    return a(t, [{
      key: "drawDynamicPoints",
      value: function value() {
        for (var t = this.w, e = new p(this.ctx), i = new I(this.ctx), a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series"), s = 0; s < a.length; s++) {
          var r = parseInt(a[s].getAttribute("data:realIndex"), 10),
              n = t.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(r, "'] .apexcharts-series-markers-wrap"));

          if (null !== n) {
            var o = void 0,
                l = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
            "line" !== t.config.chart.type && "area" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (l += " no-pointer-events");
            var h = i.getMarkerConfig(l, r);
            (o = e.drawMarker(0, 0, h)).node.setAttribute("default-marker-size", 0);
            var c = document.createElementNS(t.globals.SVGNS, "g");
            c.classList.add("apexcharts-series-markers"), c.appendChild(o.node), n.appendChild(c);
          }
        }
      }
    }, {
      key: "enlargeCurrentPoint",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
            s = this.w;
        "bubble" !== s.config.chart.type && this.newPointSize(t, e);
        var r = e.getAttribute("cx"),
            n = e.getAttribute("cy");

        if (null !== i && null !== a && (r = i, n = a), this.tooltipPosition.moveXCrosshairs(r), !this.fixedTooltip) {
          if ("radar" === s.config.chart.type) {
            var o = this.ttCtx.getElGrid(),
                l = o.getBoundingClientRect();
            r = this.ttCtx.e.clientX - l.left;
          }

          this.tooltipPosition.moveTooltip(r, n, s.config.markers.hover.size);
        }
      }
    }, {
      key: "enlargePoints",
      value: function value(t) {
        for (var e = this.w, i = this.ttCtx, a = t, s = e.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), r = e.config.markers.hover.size, n = 0; n < s.length; n++) {
          var o = s[n].getAttribute("rel"),
              l = s[n].getAttribute("index");

          if (void 0 === r && (r = e.globals.markers.size[l] + e.config.markers.hover.sizeOffset), a === parseInt(o, 10)) {
            this.newPointSize(a, s[n]);
            var h = s[n].getAttribute("cx"),
                c = s[n].getAttribute("cy");
            this.tooltipPosition.moveXCrosshairs(h), i.fixedTooltip || this.tooltipPosition.moveTooltip(h, c, r);
          } else this.oldPointSize(s[n]);
        }
      }
    }, {
      key: "newPointSize",
      value: function value(t, e) {
        var i = this.w,
            a = i.config.markers.hover.size,
            s = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;

        if ("0" !== s.getAttribute("default-marker-size")) {
          var r = parseInt(s.getAttribute("index"), 10);
          void 0 === a && (a = i.globals.markers.size[r] + i.config.markers.hover.sizeOffset), s.setAttribute("r", a);
        }
      }
    }, {
      key: "oldPointSize",
      value: function value(t) {
        var e = parseFloat(t.getAttribute("default-marker-size"));
        t.setAttribute("r", e);
      }
    }, {
      key: "resetPointsSize",
      value: function value() {
        for (var t = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e = 0; e < t.length; e++) {
          var i = parseFloat(t[e].getAttribute("default-marker-size"));
          g.isNumber(i) ? t[e].setAttribute("r", i) : t[e].setAttribute("r", 0);
        }
      }
    }]), t;
  }(),
      gt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i;
    }

    return a(t, [{
      key: "getAttr",
      value: function value(t, e) {
        return parseFloat(t.target.getAttribute(e));
      }
    }, {
      key: "handleHeatTooltip",
      value: function value(t) {
        var e = t.e,
            i = t.opt,
            a = t.x,
            s = t.y,
            r = this.ttCtx,
            n = this.w;

        if (e.target.classList.contains("apexcharts-heatmap-rect")) {
          var o = this.getAttr(e, "i"),
              l = this.getAttr(e, "j"),
              h = this.getAttr(e, "cx"),
              c = this.getAttr(e, "cy"),
              d = this.getAttr(e, "width"),
              g = this.getAttr(e, "height");

          if (r.tooltipLabels.drawSeriesTexts({
            ttItems: i.ttItems,
            i: o,
            j: l,
            shared: !1
          }), n.globals.capturedSeriesIndex = o, n.globals.capturedDataPointIndex = l, a = h + r.tooltipRect.ttWidth / 2 + d, s = c + r.tooltipRect.ttHeight / 2 - g / 2, r.tooltipPosition.moveXCrosshairs(h + d / 2), a > n.globals.gridWidth / 2 && (a = h - r.tooltipRect.ttWidth / 2 + d), r.w.config.tooltip.followCursor) {
            var u = r.getElGrid().getBoundingClientRect();
            s = r.e.clientY - u.top + n.globals.translateY / 2 - 10;
          }
        }

        return {
          x: a,
          y: s
        };
      }
    }, {
      key: "handleMarkerTooltip",
      value: function value(t) {
        var e,
            i,
            a = t.e,
            s = t.opt,
            r = t.x,
            n = t.y,
            o = this.w,
            l = this.ttCtx;

        if (a.target.classList.contains("apexcharts-marker")) {
          var h = parseInt(s.paths.getAttribute("cx"), 10),
              c = parseInt(s.paths.getAttribute("cy"), 10),
              d = parseFloat(s.paths.getAttribute("val"));

          if (i = parseInt(s.paths.getAttribute("rel"), 10), e = parseInt(s.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l.intersect) {
            var u = g.findAncestor(s.paths, "apexcharts-series");
            u && (e = parseInt(u.getAttribute("data:realIndex"), 10));
          }

          if (l.tooltipLabels.drawSeriesTexts({
            ttItems: s.ttItems,
            i: e,
            j: i,
            shared: !l.showOnIntersect && o.config.tooltip.shared
          }), "mouseup" === a.type && l.markerClick(a, e, i), o.globals.capturedSeriesIndex = e, o.globals.capturedDataPointIndex = i, r = h, n = c + o.globals.translateY - 1.4 * l.tooltipRect.ttHeight, l.w.config.tooltip.followCursor) {
            var f = l.getElGrid().getBoundingClientRect();
            n = l.e.clientY + o.globals.translateY - f.top;
          }

          d < 0 && (n = c), l.marker.enlargeCurrentPoint(i, s.paths, r, n);
        }

        return {
          x: r,
          y: n
        };
      }
    }, {
      key: "handleBarTooltip",
      value: function value(t) {
        var e,
            i,
            a = t.e,
            s = t.opt,
            r = this.w,
            n = this.ttCtx,
            o = n.getElTooltip(),
            l = 0,
            h = 0,
            c = 0,
            d = this.getBarTooltipXY({
          e: a,
          opt: s
        });
        e = d.i;
        var g = d.barHeight,
            u = d.j;

        if (r.globals.capturedSeriesIndex = e, r.globals.capturedDataPointIndex = u, r.globals.isBarHorizontal && n.hasBars() || !r.config.tooltip.shared ? (h = d.x, c = d.y, i = Array.isArray(r.config.stroke.width) ? r.config.stroke.width[e] : r.config.stroke.width, l = h) : r.globals.comboCharts || r.config.tooltip.shared || (l /= 2), isNaN(c) && (c = r.globals.svgHeight - n.tooltipRect.ttHeight), h + n.tooltipRect.ttWidth > r.globals.gridWidth ? h -= n.tooltipRect.ttWidth : h < 0 && (h += n.tooltipRect.ttWidth), n.w.config.tooltip.followCursor) {
          var f = n.getElGrid().getBoundingClientRect();
          c = n.e.clientY - f.top;
        }

        if (null === n.tooltip && (n.tooltip = r.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r.config.tooltip.shared || (r.globals.comboBarCount > 0 ? n.tooltipPosition.moveXCrosshairs(l + i / 2) : n.tooltipPosition.moveXCrosshairs(l)), !n.fixedTooltip && (!r.config.tooltip.shared || r.globals.isBarHorizontal && n.hasBars())) {
          var p = r.globals.isMultipleYAxis ? r.config.yaxis[x] && r.config.yaxis[x].reversed : r.config.yaxis[0].reversed;
          p && (h = r.globals.gridWidth - h), o.style.left = h + r.globals.translateX + "px";
          var x = parseInt(s.paths.parentNode.getAttribute("data:realIndex"), 10);
          !p || r.globals.isBarHorizontal && n.hasBars() || (c = c + g - 2 * (r.globals.series[e][u] < 0 ? g : 0)), n.tooltipRect.ttHeight + c > r.globals.gridHeight ? (c = r.globals.gridHeight - n.tooltipRect.ttHeight + r.globals.translateY, o.style.top = c + "px") : o.style.top = c + r.globals.translateY - n.tooltipRect.ttHeight / 2 + "px";
        }
      }
    }, {
      key: "getBarTooltipXY",
      value: function value(t) {
        var e = t.e,
            i = t.opt,
            a = this.w,
            s = null,
            r = this.ttCtx,
            n = 0,
            o = 0,
            l = 0,
            h = 0,
            c = 0,
            d = e.target.classList;

        if (d.contains("apexcharts-bar-area") || d.contains("apexcharts-candlestick-area") || d.contains("apexcharts-rangebar-area")) {
          var g = e.target,
              u = g.getBoundingClientRect(),
              f = i.elGrid.getBoundingClientRect(),
              p = u.height;
          c = u.height;
          var x = u.width,
              b = parseInt(g.getAttribute("cx"), 10),
              m = parseInt(g.getAttribute("cy"), 10);
          h = parseFloat(g.getAttribute("barWidth"));
          var v = "touchmove" === e.type ? e.touches[0].clientX : e.clientX;
          s = parseInt(g.getAttribute("j"), 10), n = parseInt(g.parentNode.getAttribute("rel"), 10) - 1;
          var y = g.getAttribute("data-range-y1"),
              w = g.getAttribute("data-range-y2");
          a.globals.comboCharts && (n = parseInt(g.parentNode.getAttribute("data:realIndex"), 10)), r.tooltipLabels.drawSeriesTexts({
            ttItems: i.ttItems,
            i: n,
            j: s,
            y1: y ? parseInt(y, 10) : null,
            y2: w ? parseInt(w, 10) : null,
            shared: !r.showOnIntersect && a.config.tooltip.shared
          }), a.config.tooltip.followCursor ? a.globals.isBarHorizontal ? (o = v - f.left + 15, l = m - r.dataPointsDividedHeight + p / 2 - r.tooltipRect.ttHeight / 2) : (o = a.globals.isXNumeric ? b - x / 2 : b - r.dataPointsDividedWidth + x / 2, l = e.clientY - f.top - r.tooltipRect.ttHeight / 2 - 15) : a.globals.isBarHorizontal ? ((o = b) < r.xyRatios.baseLineInvertedY && (o = b - r.tooltipRect.ttWidth), l = m - r.dataPointsDividedHeight + p / 2 - r.tooltipRect.ttHeight / 2) : (o = a.globals.isXNumeric ? b - x / 2 : b - r.dataPointsDividedWidth + x / 2, l = m);
        }

        return {
          x: o,
          y: l,
          barHeight: c,
          barWidth: h,
          i: n,
          j: s
        };
      }
    }]), t;
  }(),
      ut = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i;
    }

    return a(t, [{
      key: "drawXaxisTooltip",
      value: function value() {
        var t = this.w,
            e = this.ttCtx,
            i = "bottom" === t.config.xaxis.position;
        e.xaxisOffY = i ? t.globals.gridHeight + 1 : 1;
        var a = i ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
            s = t.globals.dom.elWrap;
        e.blxaxisTooltip && null === t.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e.xaxisTooltip = document.createElement("div"), e.xaxisTooltip.setAttribute("class", a + " apexcharts-theme-" + t.config.tooltip.theme), s.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement("div"), e.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText));
      }
    }, {
      key: "drawYaxisTooltip",
      value: function value() {
        for (var t = this.w, e = this.ttCtx, i = function i(_i2) {
          var a = t.config.yaxis[_i2].opposite || t.config.yaxis[_i2].crosshairs.opposite;
          e.yaxisOffX = a ? t.globals.gridWidth + 1 : 1;
          var s = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(_i2, a ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
          t.globals.yAxisSameScaleIndices.map(function (e, a) {
            e.map(function (e, a) {
              a === _i2 && (s += t.config.yaxis[a].show ? " " : " apexcharts-yaxistooltip-hidden");
            });
          });
          var r = t.globals.dom.elWrap;
          e.blyaxisTooltip && null === t.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(_i2)) && (e.yaxisTooltip = document.createElement("div"), e.yaxisTooltip.setAttribute("class", s + " apexcharts-theme-" + t.config.tooltip.theme), r.appendChild(e.yaxisTooltip), 0 === _i2 && (e.yaxisTooltipText = []), e.yaxisTooltipText.push(document.createElement("div")), e.yaxisTooltipText[_i2].classList.add("apexcharts-yaxistooltip-text"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[_i2]));
        }, a = 0; a < t.config.yaxis.length; a++) {
          i(a);
        }
      }
    }, {
      key: "setXCrosshairWidth",
      value: function value() {
        var t = this.w,
            e = this.ttCtx,
            i = e.getElXCrosshairs();

        if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width, 10), t.globals.comboCharts) {
          var a = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");

          if (null !== a && "barWidth" === t.config.xaxis.crosshairs.width) {
            var s = parseFloat(a.getAttribute("barWidth"));
            e.xcrosshairsWidth = s;
          } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
            var r = t.globals.labels.length;
            e.xcrosshairsWidth = t.globals.gridWidth / r;
          }
        } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
          var n = t.globals.labels.length;
          e.xcrosshairsWidth = t.globals.gridWidth / n;
        } else if ("barWidth" === t.config.xaxis.crosshairs.width) {
          var o = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");

          if (null !== o) {
            var l = parseFloat(o.getAttribute("barWidth"));
            e.xcrosshairsWidth = l;
          } else e.xcrosshairsWidth = 1;
        }

        t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute("width", e.xcrosshairsWidth);
      }
    }, {
      key: "handleYCrosshair",
      value: function value() {
        var t = this.w,
            e = this.ttCtx;
        e.ycrosshairs = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
      }
    }, {
      key: "drawYaxisTooltipText",
      value: function value(t, e, i) {
        var a = this.ttCtx,
            s = this.w,
            r = s.globals.yLabelFormatters[t];

        if (a.blyaxisTooltip) {
          var n = a.getElGrid().getBoundingClientRect(),
              o = (e - n.top) * i.yRatio[t],
              l = s.globals.maxYArr[t] - s.globals.minYArr[t],
              h = s.globals.minYArr[t] + (l - o);
          a.tooltipPosition.moveYCrosshairs(e - n.top), a.yaxisTooltipText[t].innerHTML = r(h), a.tooltipPosition.moveYAxisTooltip(t);
        }
      }
    }]), t;
  }(),
      ft = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var a = this.w;
      this.tConfig = a.config.tooltip, this.tooltipUtil = new lt(this), this.tooltipLabels = new ht(this), this.tooltipPosition = new ct(this), this.marker = new dt(this), this.intersect = new gt(this), this.axesTooltip = new ut(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !a.globals.isBarHorizontal && this.tConfig.shared;
    }

    return a(t, [{
      key: "getElTooltip",
      value: function value(t) {
        return t || (t = this), t.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip");
      }
    }, {
      key: "getElXCrosshairs",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
      }
    }, {
      key: "getElGrid",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
      }
    }, {
      key: "drawTooltip",
      value: function value(t) {
        var e = this.w;
        this.xyRatios = t, this.blxaxisTooltip = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.blyaxisTooltip = e.config.yaxis[0].tooltip.enabled && e.globals.axisCharts, this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);
        var i = document.createElement("div");

        if (i.classList.add("apexcharts-tooltip"), i.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e.globals.dom.elWrap.appendChild(i), e.globals.axisCharts) {
          this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
          var a = new N(this.ctx);
          this.xAxisTicksPositions = a.getXAxisTicksPositions();
        }

        if ((e.globals.comboCharts && !this.tConfig.shared || this.tConfig.intersect && !this.tConfig.shared || ("bar" === e.config.chart.type || "rangeBar" === e.config.chart.type) && !this.tConfig.shared) && (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {
          this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i.appendChild(this.tooltipTitle));
          var s = e.globals.series.length;
          (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (s = this.showOnIntersect ? 1 : e.globals.series.length), this.legendLabels = e.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s), this.addSVGEvents();
        }
      }
    }, {
      key: "createTTElements",
      value: function value(t) {
        for (var e = this.w, i = [], a = this.getElTooltip(), s = 0; s < t; s++) {
          var r = document.createElement("div");
          r.classList.add("apexcharts-tooltip-series-group"), this.tConfig.shared && this.tConfig.enabledOnSeries && Array.isArray(this.tConfig.enabledOnSeries) && this.tConfig.enabledOnSeries.indexOf(s) < 0 && r.classList.add("apexcharts-tooltip-series-group-hidden");
          var n = document.createElement("span");
          n.classList.add("apexcharts-tooltip-marker"), n.style.backgroundColor = e.globals.colors[s], r.appendChild(n);
          var o = document.createElement("div");
          o.classList.add("apexcharts-tooltip-text"), o.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, o.style.fontSize = this.tConfig.style.fontSize;
          var l = document.createElement("div");
          l.classList.add("apexcharts-tooltip-y-group");
          var h = document.createElement("span");
          h.classList.add("apexcharts-tooltip-text-label"), l.appendChild(h);
          var c = document.createElement("span");
          c.classList.add("apexcharts-tooltip-text-value"), l.appendChild(c);
          var d = document.createElement("div");
          d.classList.add("apexcharts-tooltip-z-group");
          var g = document.createElement("span");
          g.classList.add("apexcharts-tooltip-text-z-label"), d.appendChild(g);
          var u = document.createElement("span");
          u.classList.add("apexcharts-tooltip-text-z-value"), d.appendChild(u), o.appendChild(l), o.appendChild(d), r.appendChild(o), a.appendChild(r), i.push(r);
        }

        return i;
      }
    }, {
      key: "addSVGEvents",
      value: function value() {
        var t = this.w,
            e = t.config.chart.type,
            i = this.getElTooltip(),
            a = !("bar" !== e && "candlestick" !== e && "rangeBar" !== e),
            s = t.globals.dom.Paper.node,
            r = this.getElGrid();
        r && (this.seriesBound = r.getBoundingClientRect());
        var n,
            o = [],
            l = [],
            h = {
          hoverArea: s,
          elGrid: r,
          tooltipEl: i,
          tooltipY: o,
          tooltipX: l,
          ttItems: this.ttItems
        };
        if (t.globals.axisCharts && ("area" === e || "line" === e || "scatter" === e || "bubble" === e ? n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a ? n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" === e ? n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap") : "radar" === e && (n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-marker")), n && n.length)) for (var c = 0; c < n.length; c++) {
          o.push(n[c].getAttribute("cy")), l.push(n[c].getAttribute("cx"));
        }
        if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || a && this.hasBars() && this.tConfig.shared) this.addPathsEventListeners([s], h);else if (a && !t.globals.comboCharts) this.addBarsEventListeners(h);else if ("bubble" === e || "scatter" === e || "radar" === e || this.showOnIntersect && ("area" === e || "line" === e)) this.addPointsEventsListeners(h);else if (!t.globals.axisCharts || "heatmap" === e) {
          var d = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
          this.addPathsEventListeners(d, h);
        }

        if (this.showOnIntersect) {
          var g = t.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker");
          g.length > 0 && this.addPathsEventListeners(g, h);
          var u = t.globals.dom.baseEl.querySelectorAll(".apexcharts-area-series .apexcharts-marker");
          u.length > 0 && this.addPathsEventListeners(u, h), this.hasBars() && !this.tConfig.shared && this.addBarsEventListeners(h);
        }
      }
    }, {
      key: "drawFixedTooltipRect",
      value: function value() {
        var t = this.w,
            e = this.getElTooltip(),
            i = e.getBoundingClientRect(),
            a = i.width + 10,
            s = i.height + 10,
            r = this.tConfig.fixed.offsetX,
            n = this.tConfig.fixed.offsetY;
        return this.tConfig.fixed.position.toLowerCase().indexOf("right") > -1 && (r = r + t.globals.svgWidth - a + 10), this.tConfig.fixed.position.toLowerCase().indexOf("bottom") > -1 && (n = n + t.globals.svgHeight - s - 10), e.style.left = r + "px", e.style.top = n + "px", {
          x: r,
          y: n,
          ttWidth: a,
          ttHeight: s
        };
      }
    }, {
      key: "addPointsEventsListeners",
      value: function value(t) {
        var e = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker");
        this.addPathsEventListeners(e, t);
      }
    }, {
      key: "addBarsEventListeners",
      value: function value(t) {
        var e = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-rangebar-area");
        this.addPathsEventListeners(e, t);
      }
    }, {
      key: "addPathsEventListeners",
      value: function value(t, e) {
        for (var i = this, a = function a(_a) {
          var s = {
            paths: t[_a],
            tooltipEl: e.tooltipEl,
            tooltipY: e.tooltipY,
            tooltipX: e.tooltipX,
            elGrid: e.elGrid,
            hoverArea: e.hoverArea,
            ttItems: e.ttItems
          };
          ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function (e) {
            return t[_a].addEventListener(e, i.seriesHover.bind(i, s), {
              capture: !1,
              passive: !0
            });
          });
        }, s = 0; s < t.length; s++) {
          a(s);
        }
      }
    }, {
      key: "seriesHover",
      value: function value(t, e) {
        var i = this,
            a = [],
            s = this.w;
        s.config.chart.group && (a = this.ctx.getGroupedCharts()), s.globals.axisCharts && (s.globals.minX === -1 / 0 && s.globals.maxX === 1 / 0 || 0 === s.globals.dataPoints) || (a.length ? a.forEach(function (a) {
          var s = i.getElTooltip(a),
              r = {
            paths: t.paths,
            tooltipEl: s,
            tooltipY: t.tooltipY,
            tooltipX: t.tooltipX,
            elGrid: t.elGrid,
            hoverArea: t.hoverArea,
            ttItems: a.w.globals.tooltip.ttItems
          };
          a.w.globals.minX === i.w.globals.minX && a.w.globals.maxX === i.w.globals.maxX && a.w.globals.tooltip.seriesHoverByContext({
            chartCtx: a,
            ttCtx: a.w.globals.tooltip,
            opt: r,
            e: e
          });
        }) : this.seriesHoverByContext({
          chartCtx: this.ctx,
          ttCtx: this.w.globals.tooltip,
          opt: t,
          e: e
        }));
      }
    }, {
      key: "seriesHoverByContext",
      value: function value(t) {
        var e = t.chartCtx,
            i = t.ttCtx,
            a = t.opt,
            s = t.e,
            r = e.w,
            n = this.getElTooltip();
        (i.tooltipRect = {
          x: 0,
          y: 0,
          ttWidth: n.getBoundingClientRect().width,
          ttHeight: n.getBoundingClientRect().height
        }, i.e = s, !i.hasBars() || r.globals.comboCharts || i.isBarShared) || this.tConfig.onDatasetHover.highlightDataSeries && new R(e).toggleSeriesOnHover(s, s.target.parentNode);
        i.fixedTooltip && i.drawFixedTooltipRect(), r.globals.axisCharts ? i.axisChartsTooltips({
          e: s,
          opt: a,
          tooltipRect: i.tooltipRect
        }) : i.nonAxisChartsTooltips({
          e: s,
          opt: a,
          tooltipRect: i.tooltipRect
        });
      }
    }, {
      key: "axisChartsTooltips",
      value: function value(t) {
        var e,
            i,
            a,
            s = t.e,
            r = t.opt,
            n = this.w,
            o = null,
            l = r.elGrid.getBoundingClientRect(),
            h = "touchmove" === s.type ? s.touches[0].clientX : s.clientX,
            c = "touchmove" === s.type ? s.touches[0].clientY : s.clientY;
        if (this.clientY = c, this.clientX = h, n.globals.capturedSeriesIndex = -1, n.globals.capturedDataPointIndex = -1, c < l.top || c > l.top + l.height) this.handleMouseOut(r);else {
          if (Array.isArray(this.tConfig.enabledOnSeries) && !n.config.tooltip.shared) {
            var d = parseInt(r.paths.getAttribute("index"), 10);
            if (this.tConfig.enabledOnSeries.indexOf(d) < 0) return void this.handleMouseOut(r);
          }

          var g = this.getElTooltip(),
              u = this.getElXCrosshairs(),
              f = n.globals.xyCharts || "bar" === n.config.chart.type && !n.globals.isBarHorizontal && this.hasBars() && this.tConfig.shared || n.globals.comboCharts && this.hasBars;

          if (n.globals.isBarHorizontal && this.hasBars() && (f = !1), "mousemove" === s.type || "touchmove" === s.type || "mouseup" === s.type) {
            if (null !== u && u.classList.add("apexcharts-active"), null !== this.ycrosshairs && this.blyaxisTooltip && this.ycrosshairs.classList.add("apexcharts-active"), f && !this.showOnIntersect) {
              e = (o = this.tooltipUtil.getNearestValues({
                context: this,
                hoverArea: r.hoverArea,
                elGrid: r.elGrid,
                clientX: h,
                clientY: c,
                hasBars: this.hasBars
              })).j;
              var p = o.capturedSeries;
              if (o.hoverX < 0 || o.hoverX > n.globals.gridWidth) return void this.handleMouseOut(r);

              if (null !== p) {
                if (null === n.globals.series[p][e]) return void this.handleMouseOut(r);
                void 0 !== n.globals.series[p][e] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(e) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(s, this, p, e, r.ttItems) : this.create(s, this, p, e, r.ttItems, !1) : this.tooltipUtil.isXoverlap(e) && this.create(s, this, 0, e, r.ttItems);
              } else this.tooltipUtil.isXoverlap(e) && this.create(s, this, 0, e, r.ttItems);
            } else if ("heatmap" === n.config.chart.type) {
              var x = this.intersect.handleHeatTooltip({
                e: s,
                opt: r,
                x: i,
                y: a
              });
              i = x.x, a = x.y, g.style.left = i + "px", g.style.top = a + "px";
            } else this.hasBars && this.intersect.handleBarTooltip({
              e: s,
              opt: r
            }), this.hasMarkers && this.intersect.handleMarkerTooltip({
              e: s,
              opt: r,
              x: i,
              y: a
            });

            if (this.blyaxisTooltip) for (var b = 0; b < n.config.yaxis.length; b++) {
              this.axesTooltip.drawYaxisTooltipText(b, c, this.xyRatios);
            }
            r.tooltipEl.classList.add("apexcharts-active");
          } else "mouseout" !== s.type && "touchend" !== s.type || this.handleMouseOut(r);
        }
      }
    }, {
      key: "nonAxisChartsTooltips",
      value: function value(t) {
        var e = t.e,
            i = t.opt,
            a = t.tooltipRect,
            s = this.w,
            r = i.paths.getAttribute("rel"),
            n = this.getElTooltip(),
            o = s.globals.dom.elWrap.getBoundingClientRect();

        if ("mousemove" === e.type || "touchmove" === e.type) {
          n.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({
            ttItems: i.ttItems,
            i: parseInt(r, 10) - 1,
            shared: !1
          });
          var l = s.globals.clientX - o.left - a.ttWidth / 2,
              h = s.globals.clientY - o.top - a.ttHeight - 10;
          n.style.left = l + "px", n.style.top = h + "px";
        } else "mouseout" !== e.type && "touchend" !== e.type || n.classList.remove("apexcharts-active");
      }
    }, {
      key: "deactivateHoverFilter",
      value: function value() {
        for (var t = this.w, e = new p(this.ctx), i = t.globals.dom.Paper.select(".apexcharts-bar-area"), a = 0; a < i.length; a++) {
          e.pathMouseLeave(i[a]);
        }
      }
    }, {
      key: "handleMouseOut",
      value: function value(t) {
        var e = this.w,
            i = this.getElXCrosshairs();

        if (t.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e.config.chart.type && this.marker.resetPointsSize(), null !== i && i.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.blxaxisTooltip && this.xaxisTooltip.classList.remove("apexcharts-active"), this.blyaxisTooltip) {
          null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));

          for (var a = 0; a < this.yaxisTTEls.length; a++) {
            this.yaxisTTEls[a].classList.remove("apexcharts-active");
          }
        }

        e.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function (t) {
          var e = t.getAttribute("data:default-text");
          t.innerHTML = decodeURIComponent(e);
        });
      }
    }, {
      key: "getElMarkers",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers");
      }
    }, {
      key: "getAllMarkers",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker");
      }
    }, {
      key: "hasMarkers",
      value: function value() {
        return this.getElMarkers().length > 0;
      }
    }, {
      key: "getElBars",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-rangebar-series");
      }
    }, {
      key: "hasBars",
      value: function value() {
        return this.getElBars().length > 0;
      }
    }, {
      key: "markerClick",
      value: function value(t, e, i) {
        var a = this.w;
        "function" == typeof a.config.chart.events.markerClick && a.config.chart.events.markerClick(t, this.ctx, {
          seriesIndex: e,
          dataPointIndex: i,
          w: a
        }), this.ctx.events.fireEvent("markerClick", [t, this.ctx, {
          seriesIndex: e,
          dataPointIndex: i,
          w: a
        }]);
      }
    }, {
      key: "create",
      value: function value(t, e, i, a, s) {
        var r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
            n = this.w,
            o = e;
        "mouseup" === t.type && this.markerClick(t, i, a), null === r && (r = this.tConfig.shared);
        var l = this.hasMarkers(),
            h = this.getElBars();

        if (n.config.legend.tooltipHoverFormatter) {
          var c = n.config.legend.tooltipHoverFormatter,
              d = Array.from(this.legendLabels);
          d.forEach(function (t) {
            var e = t.getAttribute("data:default-text");
            t.innerHTML = decodeURIComponent(e);
          });

          for (var g = 0; g < d.length; g++) {
            var u = d[g],
                f = parseInt(u.getAttribute("i"), 10),
                x = decodeURIComponent(u.getAttribute("data:default-text")),
                b = c(x, {
              seriesIndex: r ? f : i,
              dataPointIndex: a,
              w: n
            });
            if (r) u.innerHTML = n.globals.collapsedSeriesIndices.indexOf(f) < 0 ? b : x;else if (u.innerHTML = f === i ? b : x, i === f) break;
          }
        }

        if (r) {
          if (o.tooltipLabels.drawSeriesTexts({
            ttItems: s,
            i: i,
            j: a,
            shared: !this.showOnIntersect && this.tConfig.shared
          }), l && (n.globals.markers.largestSize > 0 ? o.marker.enlargePoints(a) : o.tooltipPosition.moveDynamicPointsOnHover(a)), this.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h), this.barSeriesHeight > 0)) {
            var m = new p(this.ctx),
                v = n.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a, "']"));
            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a);

            for (var y = 0; y < v.length; y++) {
              m.pathMouseEnter(v[y]);
            }
          }
        } else o.tooltipLabels.drawSeriesTexts({
          shared: !1,
          ttItems: s,
          i: i,
          j: a
        }), this.hasBars() && o.tooltipPosition.moveStickyTooltipOverBars(a), l && o.tooltipPosition.moveMarkers(i, a);
      }
    }]), t;
  }(),
      pt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.barCtx = i;
    }

    return a(t, [{
      key: "handleBarDataLabels",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            a = t.y1,
            s = t.y2,
            r = t.i,
            n = t.j,
            o = t.realIndex,
            l = t.series,
            h = t.barHeight,
            c = t.barWidth,
            d = t.barYPosition,
            g = t.visibleSeries,
            u = t.renderedPath,
            f = this.w,
            x = new p(this.barCtx.ctx),
            b = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[o] : this.barCtx.strokeWidth,
            m = e + parseFloat(c * g),
            v = i + parseFloat(h * g);
        f.globals.isXNumeric && !f.globals.isBarHorizontal && (m = e + parseFloat(c * (g + 1)), v = i + parseFloat(h * (g + 1)) - b);
        var y = e,
            w = i,
            k = {},
            A = f.config.dataLabels,
            S = this.barCtx.barOptions.dataLabels;
        void 0 !== d && this.barCtx.isTimelineBar && (v = d, w = d);
        var C = A.offsetX,
            L = A.offsetY,
            P = {
          width: 0,
          height: 0
        };
        f.config.dataLabels.enabled && (P = x.getTextRects(f.globals.yLabelFormatters[0](f.globals.maxY), parseFloat(A.style.fontSize)));
        var z = {
          x: e,
          y: i,
          i: r,
          j: n,
          renderedPath: u,
          bcx: m,
          bcy: v,
          barHeight: h,
          barWidth: c,
          textRects: P,
          strokeWidth: b,
          dataLabelsX: y,
          dataLabelsY: w,
          barDataLabelsConfig: S,
          offX: C,
          offY: L
        };
        return k = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(z) : this.calculateColumnsDataLabelsPosition(z), u.attr({
          cy: k.bcy,
          cx: k.bcx,
          j: n,
          val: l[r][n],
          barHeight: h,
          barWidth: c
        }), this.drawCalculatedDataLabels({
          x: k.dataLabelsX,
          y: k.dataLabelsY,
          val: this.barCtx.isTimelineBar ? [a, s] : l[r][n],
          i: o,
          j: n,
          barWidth: c,
          barHeight: h,
          textRects: P,
          dataLabelsConfig: A
        });
      }
    }, {
      key: "calculateColumnsDataLabelsPosition",
      value: function value(t) {
        var e,
            i = this.w,
            a = t.i,
            s = t.j,
            r = t.y,
            n = t.bcx,
            o = t.barWidth,
            l = t.barHeight,
            h = t.textRects,
            c = t.dataLabelsY,
            d = t.barDataLabelsConfig,
            g = t.strokeWidth,
            u = t.offX,
            f = t.offY,
            p = "vertical" === i.config.plotOptions.bar.dataLabels.orientation;
        n -= g / 2;
        var x = i.globals.gridWidth / i.globals.dataPoints;

        if (e = i.globals.isXNumeric ? n - o / 2 + u : n - x + o / 2 + u, p) {
          e = e + h.height / 2 - g / 2 - 2;
        }

        var b = this.barCtx.series[a][s] <= 0;

        switch (this.barCtx.isReversed && (r -= l), d.position) {
          case "center":
            c = p ? b ? r + l / 2 + f : r + l / 2 - f : b ? r + l / 2 + h.height / 2 + f : r + l / 2 + h.height / 2 - f;
            break;

          case "bottom":
            c = p ? b ? r + l + f : r + l - f : b ? r + l + h.height + g + f : r + l - h.height / 2 + g - f;
            break;

          case "top":
            c = p ? b ? r + f : r - f : b ? r - h.height / 2 - f : r + h.height + f;
        }

        return i.config.chart.stacked || (c < 0 ? c = 0 + g : c + h.height / 3 > i.globals.gridHeight && (c = i.globals.gridHeight - g)), {
          bcx: n,
          bcy: r,
          dataLabelsX: e,
          dataLabelsY: c
        };
      }
    }, {
      key: "calculateBarsDataLabelsPosition",
      value: function value(t) {
        var e = this.w,
            i = t.x,
            a = t.i,
            s = t.j,
            r = t.bcy,
            n = t.barHeight,
            o = t.barWidth,
            l = t.textRects,
            h = t.dataLabelsX,
            c = t.strokeWidth,
            d = t.barDataLabelsConfig,
            g = t.offX,
            u = t.offY,
            f = e.globals.gridHeight / e.globals.dataPoints,
            p = r - (this.barCtx.isTimelineBar ? 0 : f) + n / 2 + l.height / 2 + u - 3,
            x = this.barCtx.series[a][s] <= 0;

        switch (this.barCtx.isReversed && (i += o), d.position) {
          case "center":
            h = x ? i - o / 2 - g : i - o / 2 + g;
            break;

          case "bottom":
            h = x ? i - o - c - Math.round(l.width / 2) - g : i - o + c + Math.round(l.width / 2) + g;
            break;

          case "top":
            h = x ? i - c + Math.round(l.width / 2) - g : i - c - Math.round(l.width / 2) + g;
        }

        return e.config.chart.stacked || (h < 0 ? h = h + l.width + c : h + l.width / 2 > e.globals.gridWidth && (h = e.globals.gridWidth - l.width - c)), {
          bcx: i,
          bcy: r,
          dataLabelsX: h,
          dataLabelsY: p
        };
      }
    }, {
      key: "drawCalculatedDataLabels",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            a = t.val,
            s = t.i,
            r = t.j,
            o = t.textRects,
            l = t.barHeight,
            h = t.barWidth,
            c = t.dataLabelsConfig,
            d = this.w,
            g = "rotate(0)";
        "vertical" === d.config.plotOptions.bar.dataLabels.orientation && (g = "rotate(-90, ".concat(e, ", ").concat(i, ")"));
        var u = new Y(this.barCtx.ctx),
            f = new p(this.barCtx.ctx),
            x = c.formatter,
            b = null,
            m = d.globals.collapsedSeriesIndices.indexOf(s) > -1;

        if (c.enabled && !m) {
          b = f.group({
            "class": "apexcharts-data-labels",
            transform: g
          });
          var v = "";
          void 0 !== a && (v = x(a, {
            seriesIndex: s,
            dataPointIndex: r,
            w: d
          })), 0 === a && d.config.chart.stacked && (v = "");
          var y = d.globals.series[s][r] <= 0,
              w = d.config.plotOptions.bar.dataLabels.position;
          if ("vertical" === d.config.plotOptions.bar.dataLabels.orientation && ("top" === w && (c.textAnchor = y ? "end" : "start"), "center" === w && (c.textAnchor = "middle"), "bottom" === w && (c.textAnchor = y ? "end" : "start")), this.barCtx.isTimelineBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) h < f.getTextRects(v, parseFloat(c.style.fontSize)).width && (v = "");
          d.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? ((h = Math.abs(d.globals.series[s][r]) / this.barCtx.invertedYRatio[this.barCtx.yaxisIndex]) > 0 && o.width / 1.6 > h || h < 0 && o.width / 1.6 < h) && (v = "") : (l = Math.abs(d.globals.series[s][r]) / this.barCtx.yRatio[this.barCtx.yaxisIndex], o.height / 1.6 > l && (v = "")));
          var k = n({}, c);
          this.barCtx.isHorizontal && a < 0 && ("start" === c.textAnchor ? k.textAnchor = "end" : "end" === c.textAnchor && (k.textAnchor = "start")), u.plotDataLabelsText({
            x: e,
            y: i,
            text: v,
            i: s,
            j: r,
            parent: b,
            dataLabelsConfig: k,
            alwaysDrawDataLabel: !0,
            offsetCorrection: !0
          });
        }

        return b;
      }
    }]), t;
  }(),
      xt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.barCtx = i;
    }

    return a(t, [{
      key: "initVariables",
      value: function value(t) {
        var e = this.w;
        this.barCtx.series = t, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;

        for (var i = 0; i < t.length; i++) {
          if (t[i].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t[i].length), e.globals.isXNumeric) for (var a = 0; a < t[i].length; a++) {
            e.globals.seriesX[i][a] > e.globals.minX && e.globals.seriesX[i][a] < e.globals.maxX && this.barCtx.visibleItems++;
          } else this.barCtx.visibleItems = e.globals.dataPoints;
        }

        0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1);
      }
    }, {
      key: "initialPositions",
      value: function value() {
        var t,
            e,
            i,
            a,
            s,
            r,
            n,
            o,
            l = this.w,
            h = l.globals.dataPoints;
        if (this.barCtx.isTimelineBar && (h = l.globals.labels.length), this.barCtx.isHorizontal) s = (i = l.globals.gridHeight / h) / this.barCtx.seriesLen, l.globals.isXNumeric && (s = (i = l.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s = s * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, o = this.barCtx.baseLineInvertedY + l.globals.padHorizontal + (this.barCtx.isReversed ? l.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), e = (i - s * this.barCtx.seriesLen) / 2;else {
          if (a = l.globals.gridWidth / this.barCtx.visibleItems, l.config.xaxis.convertedCatToNumeric && (a = l.globals.gridWidth / l.globals.dataPoints), r = a / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l.globals.isXNumeric) {
            var c = this.barCtx.xRatio;
            l.config.xaxis.convertedCatToNumeric && (c = this.barCtx.initialXRatio), l.globals.minXDiff && l.globals.minXDiff / c > 0 && (a = l.globals.minXDiff / c), (r = a / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r = 1);
          }

          n = l.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t = l.globals.padHorizontal + (a - r * this.barCtx.seriesLen) / 2;
        }
        return {
          x: t,
          y: e,
          yDivision: i,
          xDivision: a,
          barHeight: s,
          barWidth: r,
          zeroH: n,
          zeroW: o
        };
      }
    }, {
      key: "getPathFillColor",
      value: function value(t, e, i, a) {
        var s = this.w,
            r = new M(this.barCtx.ctx),
            n = null,
            o = this.barCtx.barOptions.distributed ? i : e;
        this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function (a) {
          t[e][i] >= a.from && t[e][i] <= a.to && (n = a.color);
        });
        return s.config.series[e].data[i] && s.config.series[e].data[i].fillColor && (n = s.config.series[e].data[i].fillColor), r.fillPath({
          seriesNumber: this.barCtx.barOptions.distributed ? o : a,
          color: n,
          value: t[e][i]
        });
      }
    }, {
      key: "getStrokeWidth",
      value: function value(t, e, i) {
        var a = 0,
            s = this.w;
        return void 0 === this.barCtx.series[t][e] || null === this.barCtx.series[t][e] ? this.barCtx.isNullValue = !0 : this.barCtx.isNullValue = !1, s.config.stroke.show && (this.barCtx.isNullValue || (a = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i] : this.barCtx.strokeWidth)), a;
      }
    }, {
      key: "getBarEndingShape",
      value: function value(t, e, i, a, s) {
        var r = new p(this.barCtx.ctx);

        if (this.barCtx.isHorizontal) {
          var n = null,
              o = e.x;

          if (void 0 !== i[a][s] || null !== i[a][s]) {
            var l = i[a][s] < 0,
                h = e.barHeight / 2 - e.strokeWidth;

            switch (l && (h = -e.barHeight / 2 - e.strokeWidth), t.config.chart.stacked || "rounded" === this.barCtx.barOptions.endingShape && (o = e.x - h / 2), this.barCtx.barOptions.endingShape) {
              case "flat":
                n = r.line(o, e.barYPosition + e.barHeight - e.strokeWidth);
                break;

              case "rounded":
                n = r.quadraticCurve(o + h, e.barYPosition + (e.barHeight - e.strokeWidth) / 2, o, e.barYPosition + e.barHeight - e.strokeWidth);
            }
          }

          return {
            path: n,
            ending_p_from: "",
            newX: o
          };
        }

        var c = null,
            d = e.y;

        if (void 0 !== i[a][s] || null !== i[a][s]) {
          var g = i[a][s] < 0,
              u = e.barWidth / 2 - e.strokeWidth;

          switch (g && (u = -e.barWidth / 2 - e.strokeWidth), t.config.chart.stacked || "rounded" === this.barCtx.barOptions.endingShape && (d += u / 2), this.barCtx.barOptions.endingShape) {
            case "flat":
              c = r.line(e.barXPosition + e.barWidth - e.strokeWidth, d);
              break;

            case "rounded":
              c = r.quadraticCurve(e.barXPosition + (e.barWidth - e.strokeWidth) / 2, d - u, e.barXPosition + e.barWidth - e.strokeWidth, d);
          }
        }

        return {
          path: c,
          ending_p_from: "",
          newY: d
        };
      }
    }]), t;
  }(),
      bt = function () {
    function t(i, a) {
      e(this, t), this.ctx = i, this.w = i.w;
      var s = this.w;
      this.barOptions = s.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s.config.stroke.width, this.isNullValue = !1, this.isTimelineBar = "datetime" === s.config.xaxis.type && s.globals.seriesRangeBarTimeline.length, this.xyRatios = a, null !== this.xyRatios && (this.xRatio = a.xRatio, this.initialXRatio = a.initialXRatio, this.yRatio = a.yRatio, this.invertedXRatio = a.invertedXRatio, this.invertedYRatio = a.invertedYRatio, this.baseLineY = a.baseLineY, this.baseLineInvertedY = a.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0, this.barHelpers = new xt(this);
    }

    return a(t, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w,
            a = new p(this.ctx),
            s = new E(this.ctx, i);
        t = s.getLogSeries(t), this.series = t, this.yRatio = s.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);
        var r = a.group({
          "class": "apexcharts-bar-series apexcharts-plot-series"
        });
        i.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");

        for (var o = 0, l = 0; o < t.length; o++, l++) {
          var h,
              c,
              d,
              u,
              f = void 0,
              x = void 0,
              b = [],
              m = [],
              v = i.globals.comboCharts ? e[o] : o,
              y = a.group({
            "class": "apexcharts-series",
            rel: o + 1,
            seriesName: g.escapeString(i.globals.seriesNames[v]),
            "data:realIndex": v
          });
          this.ctx.series.addCollapsedClassToSeries(y, v), t[o].length > 0 && (this.visibleI = this.visibleI + 1);
          var w = 0,
              k = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = v), this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;
          var A = this.barHelpers.initialPositions();
          x = A.y, w = A.barHeight, c = A.yDivision, u = A.zeroW, f = A.x, k = A.barWidth, h = A.xDivision, d = A.zeroH, this.horizontal || m.push(f + k / 2);

          for (var S = a.group({
            "class": "apexcharts-datalabels"
          }), C = 0; C < i.globals.dataPoints; C++) {
            var L = this.barHelpers.getStrokeWidth(o, C, v),
                P = null,
                z = {
              indexes: {
                i: o,
                j: C,
                realIndex: v,
                bc: l
              },
              x: f,
              y: x,
              strokeWidth: L,
              elSeries: y
            };
            this.isHorizontal ? (P = this.drawBarPaths(n({}, z, {
              barHeight: w,
              zeroW: u,
              yDivision: c
            })), k = this.series[o][C] / this.invertedYRatio) : (P = this.drawColumnPaths(n({}, z, {
              xDivision: h,
              barWidth: k,
              zeroH: d
            })), w = this.series[o][C] / this.yRatio[this.yaxisIndex]), x = P.y, f = P.x, C > 0 && m.push(f + k / 2), b.push(x);
            var T = this.barHelpers.getPathFillColor(t, o, C, v);
            this.renderSeries({
              realIndex: v,
              pathFill: T,
              j: C,
              i: o,
              pathFrom: P.pathFrom,
              pathTo: P.pathTo,
              strokeWidth: L,
              elSeries: y,
              x: f,
              y: x,
              series: t,
              barHeight: w,
              barWidth: k,
              elDataLabelsWrap: S,
              visibleSeries: this.visibleI,
              type: "bar"
            });
          }

          i.globals.seriesXvalues[v] = m, i.globals.seriesYvalues[v] = b, r.add(y);
        }

        return r;
      }
    }, {
      key: "renderSeries",
      value: function value(t) {
        var e = t.realIndex,
            i = t.pathFill,
            a = t.lineFill,
            s = t.j,
            r = t.i,
            n = t.pathFrom,
            o = t.pathTo,
            l = t.strokeWidth,
            h = t.elSeries,
            c = t.x,
            d = t.y,
            g = t.y1,
            f = t.y2,
            x = t.series,
            b = t.barHeight,
            m = t.barWidth,
            v = t.barYPosition,
            y = t.elDataLabelsWrap,
            w = t.visibleSeries,
            k = t.type,
            A = this.w,
            S = new p(this.ctx);
        a || (a = this.barOptions.distributed ? A.globals.stroke.colors[s] : A.globals.stroke.colors[e]), A.config.series[r].data[s] && A.config.series[r].data[s].strokeColor && (a = A.config.series[r].data[s].strokeColor), this.isNullValue && (i = "none");
        var C = s / A.config.chart.animations.animateGradually.delay * (A.config.chart.animations.speed / A.globals.dataPoints) / 2.4,
            L = S.renderPaths({
          i: r,
          j: s,
          realIndex: e,
          pathFrom: n,
          pathTo: o,
          stroke: a,
          strokeWidth: l,
          strokeLineCap: A.config.stroke.lineCap,
          fill: i,
          animationDelay: C,
          initialSpeed: A.config.chart.animations.speed,
          dataChangeSpeed: A.config.chart.animations.dynamicAnimation.speed,
          className: "apexcharts-".concat(k, "-area")
        });
        L.attr("clip-path", "url(#gridRectMask".concat(A.globals.cuid, ")")), void 0 !== g && void 0 !== f && (L.attr("data-range-y1", g), L.attr("data-range-y2", f)), new u(this.ctx).setSelectionFilter(L, e, s), h.add(L);
        var P = new pt(this).handleBarDataLabels({
          x: c,
          y: d,
          y1: g,
          y2: f,
          i: r,
          j: s,
          series: x,
          realIndex: e,
          barHeight: b,
          barWidth: m,
          barYPosition: v,
          renderedPath: L,
          visibleSeries: w
        });
        return null !== P && y.add(P), h.add(y), h;
      }
    }, {
      key: "drawBarPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.barHeight,
            a = t.strokeWidth,
            s = t.zeroW,
            r = t.x,
            n = t.y,
            o = t.yDivision,
            l = t.elSeries,
            h = this.w,
            c = new p(this.ctx),
            d = e.i,
            g = e.j,
            u = e.realIndex,
            f = e.bc;
        h.globals.isXNumeric && (n = (h.globals.seriesX[d][g] - h.globals.minX) / this.invertedXRatio - i);
        var x = n + i * this.visibleI,
            b = c.move(s, x),
            m = c.move(s, x);
        h.globals.previousPaths.length > 0 && (m = this.getPreviousPath(u, g));
        var v = {
          barHeight: i,
          strokeWidth: a,
          barYPosition: x,
          x: r = void 0 === this.series[d][g] || null === this.series[d][g] ? s : s + this.series[d][g] / this.invertedYRatio - 2 * (this.isReversed ? this.series[d][g] / this.invertedYRatio : 0),
          zeroW: s
        },
            y = this.barHelpers.getBarEndingShape(h, v, this.series, d, g);

        if (b = b + c.line(y.newX, x) + y.path + c.line(s, x + i - a) + c.line(s, x), m = m + c.line(s, x) + y.ending_p_from + c.line(s, x + i - a) + c.line(s, x + i - a) + c.line(s, x), h.globals.isXNumeric || (n += o), this.barOptions.colors.backgroundBarColors.length > 0 && 0 === d) {
          f >= this.barOptions.colors.backgroundBarColors.length && (f = 0);
          var w = this.barOptions.colors.backgroundBarColors[f],
              k = c.drawRect(0, x - i * this.visibleI, h.globals.gridWidth, i * this.seriesLen, 0, w, this.barOptions.colors.backgroundBarOpacity);
          l.add(k), k.node.classList.add("apexcharts-backgroundBar");
        }

        return {
          pathTo: b,
          pathFrom: m,
          x: r,
          y: n,
          barYPosition: x
        };
      }
    }, {
      key: "drawColumnPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            a = t.y,
            s = t.xDivision,
            r = t.barWidth,
            n = t.zeroH,
            o = t.strokeWidth,
            l = t.elSeries,
            h = this.w,
            c = new p(this.ctx),
            d = e.i,
            g = e.j,
            u = e.realIndex,
            f = e.bc;

        if (h.globals.isXNumeric) {
          var x = d;
          h.globals.seriesX[d].length || (x = h.globals.maxValsInArrayIndex), i = (h.globals.seriesX[x][g] - h.globals.minX) / this.xRatio - r * this.seriesLen / 2;
        }

        var b = i + r * this.visibleI,
            m = c.move(b, n),
            v = c.move(b, n);
        h.globals.previousPaths.length > 0 && (v = this.getPreviousPath(u, g));
        var y = {
          barWidth: r,
          strokeWidth: o,
          barXPosition: b,
          y: a = void 0 === this.series[d][g] || null === this.series[d][g] ? n : n - this.series[d][g] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[d][g] / this.yRatio[this.yaxisIndex] : 0),
          zeroH: n
        },
            w = this.barHelpers.getBarEndingShape(h, y, this.series, d, g);

        if (m = m + c.line(b, w.newY) + w.path + c.line(b + r - o, n) + c.line(b - o / 2, n), v = v + c.line(b, n) + w.ending_p_from + c.line(b + r - o, n) + c.line(b + r - o, n) + c.line(b - o / 2, n), h.globals.isXNumeric || (i += s), this.barOptions.colors.backgroundBarColors.length > 0 && 0 === d) {
          f >= this.barOptions.colors.backgroundBarColors.length && (f = 0);
          var k = this.barOptions.colors.backgroundBarColors[f],
              A = c.drawRect(b - r * this.visibleI, 0, r * this.seriesLen, h.globals.gridHeight, 0, k, this.barOptions.colors.backgroundBarOpacity);
          l.add(A), A.node.classList.add("apexcharts-backgroundBar");
        }

        return {
          pathTo: m,
          pathFrom: v,
          x: i,
          y: a,
          barXPosition: b
        };
      }
    }, {
      key: "getPreviousPath",
      value: function value(t, e) {
        for (var i, a = this.w, s = 0; s < a.globals.previousPaths.length; s++) {
          var r = a.globals.previousPaths[s];
          r.paths && r.paths.length > 0 && parseInt(r.realIndex, 10) === parseInt(t, 10) && void 0 !== a.globals.previousPaths[s].paths[e] && (i = a.globals.previousPaths[s].paths[e].d);
        }

        return i;
      }
    }]), t;
  }(),
      mt = function (t) {
    function i() {
      return e(this, i), c(this, l(i).apply(this, arguments));
    }

    return o(i, t), a(i, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w;
        this.graphics = new p(this.ctx), this.bar = new bt(this.ctx, this.xyRatios);
        var a = new E(this.ctx, i);
        t = a.getLogSeries(t), this.yRatio = a.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t), "100%" === i.config.chart.stackType && (t = i.globals.seriesPercent.slice()), this.series = t, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];

        for (var s = 0; s < t.length; s++) {
          t[s].length > 0 && (this.totalItems += t[s].length);
        }

        for (var r = this.graphics.group({
          "class": "apexcharts-bar-series apexcharts-plot-series"
        }), o = 0, l = 0, h = 0, c = 0; h < t.length; h++, c++) {
          var d = void 0,
              u = void 0,
              f = void 0,
              x = void 0,
              b = [],
              m = [],
              v = i.globals.comboCharts ? e[h] : h;
          this.yRatio.length > 1 && (this.yaxisIndex = v), this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;
          var y = this.graphics.group({
            "class": "apexcharts-series",
            seriesName: g.escapeString(i.globals.seriesNames[v]),
            rel: h + 1,
            "data:realIndex": v
          }),
              w = this.graphics.group({
            "class": "apexcharts-datalabels"
          }),
              k = 0,
              A = 0,
              S = this.initialPositions(o, l, d, u, f, x);
          l = S.y, k = S.barHeight, u = S.yDivision, x = S.zeroW, o = S.x, A = S.barWidth, d = S.xDivision, f = S.zeroH, this.yArrj = [], this.yArrjF = [], this.yArrjVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [];

          for (var C = 0; C < i.globals.dataPoints; C++) {
            var L = this.barHelpers.getStrokeWidth(h, C, v),
                P = {
              indexes: {
                i: h,
                j: C,
                realIndex: v,
                bc: c
              },
              strokeWidth: L,
              x: o,
              y: l,
              elSeries: y
            },
                z = null;
            this.isHorizontal ? (z = this.drawBarPaths(n({}, P, {
              zeroW: x,
              barHeight: k,
              yDivision: u
            })), A = this.series[h][C] / this.invertedYRatio) : (z = this.drawColumnPaths(n({}, P, {
              xDivision: d,
              barWidth: A,
              zeroH: f
            })), k = this.series[h][C] / this.yRatio[this.yaxisIndex]), l = z.y, o = z.x, b.push(o), m.push(l);
            var T = this.barHelpers.getPathFillColor(t, h, C, v);
            y = this.renderSeries({
              realIndex: v,
              pathFill: T,
              j: C,
              i: h,
              pathFrom: z.pathFrom,
              pathTo: z.pathTo,
              strokeWidth: L,
              elSeries: y,
              x: o,
              y: l,
              series: t,
              barHeight: k,
              barWidth: A,
              elDataLabelsWrap: w,
              type: "bar",
              visibleSeries: 0
            });
          }

          i.globals.seriesXvalues[v] = b, i.globals.seriesYvalues[v] = m, this.prevY.push(this.yArrj), this.prevYF.push(this.yArrjF), this.prevYVal.push(this.yArrjVal), this.prevX.push(this.xArrj), this.prevXF.push(this.xArrjF), this.prevXVal.push(this.xArrjVal), r.add(y);
        }

        return r;
      }
    }, {
      key: "initialPositions",
      value: function value(t, e, i, a, s, r) {
        var n,
            o,
            l = this.w;
        return this.isHorizontal ? (n = (n = a = l.globals.gridHeight / l.globals.dataPoints) * parseInt(l.config.plotOptions.bar.barHeight, 10) / 100, r = this.baseLineInvertedY + l.globals.padHorizontal + (this.isReversed ? l.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (a - n) / 2) : (o = i = l.globals.gridWidth / l.globals.dataPoints, o = l.globals.isXNumeric ? (i = l.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : o * parseInt(l.config.plotOptions.bar.columnWidth, 10) / 100, s = this.baseLineY[this.yaxisIndex] + (this.isReversed ? l.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = l.globals.padHorizontal + (i - o) / 2), {
          x: t,
          y: e,
          yDivision: a,
          xDivision: i,
          barHeight: n,
          barWidth: o,
          zeroH: s,
          zeroW: r
        };
      }
    }, {
      key: "drawBarPaths",
      value: function value(t) {
        for (var e, i = t.indexes, a = t.barHeight, s = t.strokeWidth, r = t.zeroW, n = t.x, o = t.y, l = t.yDivision, h = t.elSeries, c = this.w, d = o, g = i.i, u = i.j, f = i.realIndex, p = i.bc, x = 0, b = 0; b < this.prevXF.length; b++) {
          x += this.prevXF[b][u];
        }

        if (g > 0) {
          var m = r;
          this.prevXVal[g - 1][u] < 0 ? m = this.series[g][u] >= 0 ? this.prevX[g - 1][u] + x - 2 * (this.isReversed ? x : 0) : this.prevX[g - 1][u] : this.prevXVal[g - 1][u] >= 0 && (m = this.series[g][u] >= 0 ? this.prevX[g - 1][u] : this.prevX[g - 1][u] - x + 2 * (this.isReversed ? x : 0)), e = m;
        } else e = r;

        n = null === this.series[g][u] ? e : e + this.series[g][u] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g][u] / this.invertedYRatio : 0);
        var v = {
          barHeight: a,
          strokeWidth: s,
          invertedYRatio: this.invertedYRatio,
          barYPosition: d,
          x: n
        },
            y = this.barHelpers.getBarEndingShape(c, v, this.series, g, u);
        this.series.length > 1 && g !== this.endingShapeOnSeriesNumber && (y.path = this.graphics.line(y.newX, d + a - s)), this.xArrj.push(y.newX), this.xArrjF.push(Math.abs(e - y.newX)), this.xArrjVal.push(this.series[g][u]);
        var w = this.graphics.move(e, d),
            k = this.graphics.move(e, d);

        if (c.globals.previousPaths.length > 0 && (k = this.bar.getPreviousPath(f, u, !1)), w = w + this.graphics.line(y.newX, d) + y.path + this.graphics.line(e, d + a - s) + this.graphics.line(e, d), k = k + this.graphics.line(e, d) + this.graphics.line(e, d + a - s) + this.graphics.line(e, d + a - s) + this.graphics.line(e, d + a - s) + this.graphics.line(e, d), c.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && 0 === g) {
          p >= c.config.plotOptions.bar.colors.backgroundBarColors.length && (p = 0);
          var A = c.config.plotOptions.bar.colors.backgroundBarColors[p],
              S = this.graphics.drawRect(0, d, c.globals.gridWidth, a, 0, A, c.config.plotOptions.bar.colors.backgroundBarOpacity);
          h.add(S), S.node.classList.add("apexcharts-backgroundBar");
        }

        return {
          pathTo: w,
          pathFrom: k,
          x: n,
          y: o += l
        };
      }
    }, {
      key: "drawColumnPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            a = t.y,
            s = t.xDivision,
            r = t.barWidth,
            n = t.zeroH,
            o = t.strokeWidth,
            l = t.elSeries,
            h = this.w,
            c = e.i,
            d = e.j,
            g = e.realIndex,
            u = e.bc;

        if (h.globals.isXNumeric) {
          var f = h.globals.seriesX[c][d];
          f || (f = 0), i = (f - h.globals.minX) / this.xRatio - r / 2;
        }

        for (var p, x = i, b = 0, m = 0; m < this.prevYF.length; m++) {
          b += this.prevYF[m][d];
        }

        if (c > 0 && !h.globals.isXNumeric || c > 0 && h.globals.isXNumeric && h.globals.seriesX[c - 1][d] === h.globals.seriesX[c][d]) {
          var v = this.prevY[c - 1][d];
          p = this.prevYVal[c - 1][d] < 0 ? this.series[c][d] >= 0 ? v - b + 2 * (this.isReversed ? b : 0) : v : this.series[c][d] >= 0 ? v : v + b - 2 * (this.isReversed ? b : 0);
        } else p = h.globals.gridHeight - n;

        a = p - this.series[c][d] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[c][d] / this.yRatio[this.yaxisIndex] : 0);
        var y = {
          barWidth: r,
          strokeWidth: o,
          yRatio: this.yRatio[this.yaxisIndex],
          barXPosition: x,
          y: a
        },
            w = this.barHelpers.getBarEndingShape(h, y, this.series, c, d);
        this.yArrj.push(w.newY), this.yArrjF.push(Math.abs(p - w.newY)), this.yArrjVal.push(this.series[c][d]);
        var k = this.graphics.move(x, p),
            A = this.graphics.move(x, p);

        if (h.globals.previousPaths.length > 0 && (A = this.bar.getPreviousPath(g, d, !1)), k = k + this.graphics.line(x, w.newY) + w.path + this.graphics.line(x + r - o, p) + this.graphics.line(x - o / 2, p), A = A + this.graphics.line(x, p) + this.graphics.line(x + r - o, p) + this.graphics.line(x + r - o, p) + this.graphics.line(x + r - o, p) + this.graphics.line(x - o / 2, p), h.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && 0 === c) {
          u >= h.config.plotOptions.bar.colors.backgroundBarColors.length && (u = 0);
          var S = h.config.plotOptions.bar.colors.backgroundBarColors[u],
              C = this.graphics.drawRect(x, 0, r, h.globals.gridHeight, 0, S, h.config.plotOptions.bar.colors.backgroundBarOpacity);
          l.add(C), C.node.classList.add("apexcharts-backgroundBar");
        }

        return i += s, {
          pathTo: k,
          pathFrom: A,
          x: h.globals.isXNumeric ? i - s : i,
          y: a
        };
      }
    }]), i;
  }(bt),
      vt = function (t) {
    function i() {
      return e(this, i), c(this, l(i).apply(this, arguments));
    }

    return o(i, t), a(i, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w,
            a = new p(this.ctx),
            s = new M(this.ctx);
        this.candlestickOptions = this.w.config.plotOptions.candlestick;
        var r = new E(this.ctx, i);
        t = r.getLogSeries(t), this.series = t, this.yRatio = r.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);

        for (var n = a.group({
          "class": "apexcharts-candlestick-series apexcharts-plot-series"
        }), o = 0; o < t.length; o++) {
          var l,
              h,
              c = void 0,
              d = void 0,
              u = [],
              f = [],
              x = i.globals.comboCharts ? e[o] : o,
              b = a.group({
            "class": "apexcharts-series",
            seriesName: g.escapeString(i.globals.seriesNames[x]),
            rel: o + 1,
            "data:realIndex": x
          });
          t[o].length > 0 && (this.visibleI = this.visibleI + 1);
          var m, v;
          this.yRatio.length > 1 && (this.yaxisIndex = x);
          var y = this.barHelpers.initialPositions();
          d = y.y, m = y.barHeight, c = y.x, v = y.barWidth, l = y.xDivision, h = y.zeroH, f.push(c + v / 2);

          for (var w = a.group({
            "class": "apexcharts-datalabels"
          }), k = 0; k < i.globals.dataPoints; k++) {
            var A,
                S = this.barHelpers.getStrokeWidth(o, k, x),
                C = this.drawCandleStickPaths({
              indexes: {
                i: o,
                j: k,
                realIndex: x
              },
              x: c,
              y: d,
              xDivision: l,
              barWidth: v,
              zeroH: h,
              strokeWidth: S,
              elSeries: b
            });
            d = C.y, c = C.x, A = C.color, k > 0 && f.push(c + v / 2), u.push(d);
            var L = s.fillPath({
              seriesNumber: x,
              color: A,
              value: t[o][k]
            }),
                P = this.candlestickOptions.wick.useFillColor ? A : void 0;
            this.renderSeries({
              realIndex: x,
              pathFill: L,
              lineFill: P,
              j: k,
              i: o,
              pathFrom: C.pathFrom,
              pathTo: C.pathTo,
              strokeWidth: S,
              elSeries: b,
              x: c,
              y: d,
              series: t,
              barHeight: m,
              barWidth: v,
              elDataLabelsWrap: w,
              visibleSeries: this.visibleI,
              type: "candlestick"
            });
          }

          i.globals.seriesXvalues[x] = f, i.globals.seriesYvalues[x] = u, n.add(b);
        }

        return n;
      }
    }, {
      key: "drawCandleStickPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            a = (t.y, t.xDivision),
            s = t.barWidth,
            r = t.zeroH,
            n = t.strokeWidth,
            o = this.w,
            l = new p(this.ctx),
            h = e.i,
            c = e.j,
            d = !0,
            g = o.config.plotOptions.candlestick.colors.upward,
            u = o.config.plotOptions.candlestick.colors.downward,
            f = this.yRatio[this.yaxisIndex],
            x = e.realIndex,
            b = this.getOHLCValue(x, c),
            m = r,
            v = r;
        b.o > b.c && (d = !1);
        var y = Math.min(b.o, b.c),
            w = Math.max(b.o, b.c);
        o.globals.isXNumeric && (i = (o.globals.seriesX[x][c] - o.globals.minX) / this.xRatio - s / 2);
        var k = i + s * this.visibleI;
        void 0 === this.series[h][c] || null === this.series[h][c] ? y = r : (y = r - y / f, w = r - w / f, m = r - b.h / f, v = r - b.l / f);
        var A = l.move(k, r),
            S = l.move(k, y);
        return o.globals.previousPaths.length > 0 && (S = this.getPreviousPath(x, c, !0)), A = l.move(k, w) + l.line(k + s / 2, w) + l.line(k + s / 2, m) + l.line(k + s / 2, w) + l.line(k + s, w) + l.line(k + s, y) + l.line(k + s / 2, y) + l.line(k + s / 2, v) + l.line(k + s / 2, y) + l.line(k, y) + l.line(k, w - n / 2), S += l.move(k, y), o.globals.isXNumeric || (i += a), {
          pathTo: A,
          pathFrom: S,
          x: i,
          y: w,
          barXPosition: k,
          color: d ? g : u
        };
      }
    }, {
      key: "getOHLCValue",
      value: function value(t, e) {
        var i = this.w;
        return {
          o: i.globals.seriesCandleO[t][e],
          h: i.globals.seriesCandleH[t][e],
          l: i.globals.seriesCandleL[t][e],
          c: i.globals.seriesCandleC[t][e]
        };
      }
    }]), i;
  }(bt),
      yt = function () {
    function t(i, a) {
      e(this, t), this.ctx = i, this.w = i.w, this.xRatio = a.xRatio, this.yRatio = a.yRatio, this.negRange = !1, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.width;
    }

    return a(t, [{
      key: "draw",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = i.group({
          "class": "apexcharts-heatmap"
        });
        a.attr("clip-path", "url(#gridRectMask".concat(e.globals.cuid, ")"));
        var s = e.globals.gridWidth / e.globals.dataPoints,
            r = e.globals.gridHeight / e.globals.series.length,
            n = 0,
            o = !1;
        this.checkColorRange();
        var l = t.slice();
        e.config.yaxis[0].reversed && (o = !0, l.reverse());

        for (var h = o ? 0 : l.length - 1; o ? h < l.length : h >= 0; o ? h++ : h--) {
          var c = i.group({
            "class": "apexcharts-series apexcharts-heatmap-series",
            seriesName: g.escapeString(e.globals.seriesNames[h]),
            rel: h + 1,
            "data:realIndex": h
          });

          if (e.config.chart.dropShadow.enabled) {
            var d = e.config.chart.dropShadow;
            new u(this.ctx).dropShadow(c, d, h);
          }

          for (var f = 0, x = 0; x < l[h].length; x++) {
            var b = 1,
                m = e.config.plotOptions.heatmap.shadeIntensity,
                v = this.determineHeatColor(h, x);
            b = e.globals.hasNegs || this.negRange ? e.config.plotOptions.heatmap.reverseNegativeShade ? v.percent < 0 ? v.percent / 100 * (1.25 * m) : (1 - v.percent / 100) * (1.25 * m) : v.percent < 0 ? 1 - (1 + v.percent / 100) * m : (1 - v.percent / 100) * m : 1 - v.percent / 100;
            var y = v.color,
                w = new g();
            if (e.config.plotOptions.heatmap.enableShades && (y = g.hexToRgba(w.shadeColor(b, v.color), e.config.fill.opacity)), "image" === e.config.fill.type) y = new M(this.ctx).fillPath({
              seriesNumber: h,
              opacity: e.globals.hasNegs ? v.percent < 0 ? 1 - (1 + v.percent / 100) : m + v.percent / 100 : v.percent / 100,
              patternID: g.randomId(),
              width: e.config.fill.image.width ? e.config.fill.image.width : s,
              height: e.config.fill.image.height ? e.config.fill.image.height : r
            });
            var k = this.rectRadius,
                A = i.drawRect(f, n, s, r, k);

            if (A.attr({
              cx: f,
              cy: n
            }), A.node.classList.add("apexcharts-heatmap-rect"), c.add(A), A.attr({
              fill: y,
              i: h,
              index: h,
              j: x,
              val: l[h][x],
              "stroke-width": this.strokeWidth,
              stroke: e.globals.stroke.colors[0],
              color: y
            }), A.node.addEventListener("mouseenter", i.pathMouseEnter.bind(this, A)), A.node.addEventListener("mouseleave", i.pathMouseLeave.bind(this, A)), A.node.addEventListener("mousedown", i.pathMouseDown.bind(this, A)), e.config.chart.animations.enabled && !e.globals.dataChanged) {
              var S = 1;
              e.globals.resized || (S = e.config.chart.animations.speed), this.animateHeatMap(A, f, n, s, r, S);
            }

            if (e.globals.dataChanged) {
              var C = 1;

              if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {
                C = this.dynamicAnim.speed;
                var L = e.globals.previousPaths[h] && e.globals.previousPaths[h][x] && e.globals.previousPaths[h][x].color;
                L || (L = "rgba(255, 255, 255, 0)"), this.animateHeatColor(A, g.isColorHex(L) ? L : g.rgb2hex(L), g.isColorHex(y) ? y : g.rgb2hex(y), C);
              }
            }

            var P = this.calculateHeatmapDataLabels({
              x: f,
              y: n,
              i: h,
              j: x,
              series: l,
              rectHeight: r,
              rectWidth: s
            });
            null !== P && c.add(P), f += s;
          }

          n += r, a.add(c);
        }

        var z = e.globals.yAxisScale[0].result.slice();
        e.config.yaxis[0].reversed ? z.unshift("") : z.push(""), e.globals.yAxisScale[0].result = z;
        var T = e.globals.gridHeight / e.globals.series.length;
        return e.config.yaxis[0].labels.offsetY = -T / 2, a;
      }
    }, {
      key: "checkColorRange",
      value: function value() {
        var t = this,
            e = this.w.config.plotOptions.heatmap;
        e.colorScale.ranges.length > 0 && e.colorScale.ranges.map(function (e, i) {
          e.from < 0 && (t.negRange = !0);
        });
      }
    }, {
      key: "determineHeatColor",
      value: function value(t, e) {
        var i = this.w,
            a = i.globals.series[t][e],
            s = i.config.plotOptions.heatmap,
            r = s.colorScale.inverse ? e : t,
            n = i.globals.colors[r],
            o = Math.min.apply(Math, d(i.globals.series[t])),
            l = Math.max.apply(Math, d(i.globals.series[t]));
        s.distributed || (o = i.globals.minY, l = i.globals.maxY), void 0 !== s.colorScale.min && (o = s.colorScale.min < i.globals.minY ? s.colorScale.min : i.globals.minY, l = s.colorScale.max > i.globals.maxY ? s.colorScale.max : i.globals.maxY);
        var h = Math.abs(l) + Math.abs(o);
        0 === a && (a = 1e-6);
        var c = 100 * a / (0 === h ? h - 1e-6 : h);
        s.colorScale.ranges.length > 0 && s.colorScale.ranges.map(function (t, e) {
          if (a >= t.from && a <= t.to) {
            n = t.color, o = t.from, l = t.to;
            var i = Math.abs(l) + Math.abs(o);
            c = 100 * a / (0 === i ? i - 1e-6 : i);
          }
        });
        return {
          color: n,
          percent: c
        };
      }
    }, {
      key: "calculateHeatmapDataLabels",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            a = t.i,
            s = t.j,
            r = (t.series, t.rectHeight),
            n = t.rectWidth,
            o = this.w,
            l = o.config.dataLabels,
            h = new p(this.ctx),
            c = new Y(this.ctx),
            d = l.formatter,
            g = null;

        if (l.enabled) {
          g = h.group({
            "class": "apexcharts-data-labels"
          });
          var u = l.offsetX,
              f = l.offsetY,
              x = e + n / 2 + u,
              b = i + r / 2 + parseFloat(l.style.fontSize) / 3 + f,
              m = d(o.globals.series[a][s], {
            seriesIndex: a,
            dataPointIndex: s,
            w: o
          });
          c.plotDataLabelsText({
            x: x,
            y: b,
            text: m,
            i: a,
            j: s,
            parent: g,
            dataLabelsConfig: l
          });
        }

        return g;
      }
    }, {
      key: "animateHeatMap",
      value: function value(t, e, i, a, s, r) {
        var n = new f(this.ctx);
        n.animateRect(t, {
          x: e + a / 2,
          y: i + s / 2,
          width: 0,
          height: 0
        }, {
          x: e,
          y: i,
          width: a,
          height: s
        }, r, function () {
          n.animationCompleted(t);
        });
      }
    }, {
      key: "animateHeatColor",
      value: function value(t, e, i, a) {
        t.attr({
          fill: e
        }).animate(a).attr({
          fill: i
        });
      }
    }]), t;
  }(),
      wt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
      var a = this.w;
      this.graphics = new p(this.ctx), this.lineColorArr = void 0 !== a.globals.stroke.colors ? a.globals.stroke.colors : a.globals.colors, this.defaultSize = a.globals.svgHeight < a.globals.svgWidth ? a.globals.gridHeight + 1.5 * a.globals.goldenPadding : a.globals.gridWidth, this.maxValue = this.w.globals.maxY, this.minValue = this.w.globals.minY, this.polygons = a.config.plotOptions.radar.polygons;
      var s = a.globals.labels.slice().sort(function (t, e) {
        return e.length - t.length;
      })[0],
          r = this.graphics.getTextRects(s, a.config.xaxis.labels.style.fontSize);
      this.size = this.defaultSize / 2.1 - a.config.stroke.width - a.config.chart.dropShadow.blur, a.config.xaxis.labels.show && (this.size = this.size - r.width / 1.75), void 0 !== a.config.plotOptions.radar.size && (this.size = a.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
    }

    return a(t, [{
      key: "draw",
      value: function value(t) {
        var e = this,
            i = this.w,
            a = new M(this.ctx),
            s = [],
            r = new Y(this.ctx);
        t.length && (this.dataPointsLen = t[i.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
        var o = i.globals.gridWidth / 2,
            l = i.globals.gridHeight / 2,
            h = this.graphics.group({
          "class": "apexcharts-radar-series apexcharts-plot-series",
          "data:innerTranslateX": o,
          "data:innerTranslateY": l - 25,
          transform: "translate(".concat(o || 0, ", ").concat(l || 0, ")")
        }),
            c = [],
            d = null,
            f = null;

        if (this.yaxisLabels = this.graphics.group({
          "class": "apexcharts-yaxis"
        }), t.forEach(function (t, o) {
          var l = e.graphics.group().attr({
            "class": "apexcharts-series",
            seriesName: g.escapeString(i.globals.seriesNames[o]),
            rel: o + 1,
            "data:realIndex": o
          });
          e.dataRadiusOfPercent[o] = [], e.dataRadius[o] = [], e.angleArr[o] = [], t.forEach(function (t, i) {
            var a = Math.abs(e.maxValue - e.minValue);
            t += Math.abs(e.minValue), e.dataRadiusOfPercent[o][i] = t / a, e.dataRadius[o][i] = e.dataRadiusOfPercent[o][i] * e.size, e.angleArr[o][i] = i * e.disAngle;
          }), c = e.getDataPointsPos(e.dataRadius[o], e.angleArr[o]);
          var h = e.createPaths(c, {
            x: 0,
            y: 0
          });
          d = e.graphics.group({
            "class": "apexcharts-series-markers-wrap apexcharts-element-hidden"
          }), f = e.graphics.group({
            "class": "apexcharts-datalabels"
          }), i.globals.delayedElements.push({
            el: d.node,
            index: o
          });
          var p = {
            i: o,
            realIndex: o,
            animationDelay: o,
            initialSpeed: i.config.chart.animations.speed,
            dataChangeSpeed: i.config.chart.animations.dynamicAnimation.speed,
            className: "apexcharts-radar",
            shouldClipToGrid: !1,
            bindEventsOnPaths: !1,
            stroke: i.globals.stroke.colors[o],
            strokeLineCap: i.config.stroke.lineCap
          },
              x = null;
          i.globals.previousPaths.length > 0 && (x = e.getPreviousPath(o));

          for (var b = 0; b < h.linePathsTo.length; b++) {
            var m = e.graphics.renderPaths(n({}, p, {
              pathFrom: null === x ? h.linePathsFrom[b] : x,
              pathTo: h.linePathsTo[b],
              strokeWidth: Array.isArray(i.config.stroke.width) ? i.config.stroke.width[o] : i.config.stroke.width,
              fill: "none",
              drawShadow: !1
            }));
            l.add(m);
            var v = a.fillPath({
              seriesNumber: o
            }),
                y = e.graphics.renderPaths(n({}, p, {
              pathFrom: null === x ? h.areaPathsFrom[b] : x,
              pathTo: h.areaPathsTo[b],
              strokeWidth: 0,
              fill: v,
              drawShadow: !1
            }));

            if (i.config.chart.dropShadow.enabled) {
              var w = new u(e.ctx),
                  k = i.config.chart.dropShadow;
              w.dropShadow(y, Object.assign({}, k, {
                noUserSpaceOnUse: !0
              }), o);
            }

            l.add(y);
          }

          t.forEach(function (t, a) {
            var s = new I(e.ctx).getMarkerConfig("apexcharts-marker", o, a),
                h = e.graphics.drawMarker(c[a].x, c[a].y, s);
            h.attr("rel", a), h.attr("j", a), h.attr("index", o), h.node.setAttribute("default-marker-size", s.pSize);
            var g = e.graphics.group({
              "class": "apexcharts-series-markers"
            });

            if (g && g.add(h), d.add(g), l.add(d), i.config.dataLabels.enabled) {
              var u = i.config.dataLabels;
              r.plotDataLabelsText({
                x: c[a].x,
                y: c[a].y,
                text: i.globals.series[o][a],
                textAnchor: "middle",
                i: o,
                j: o,
                parent: f,
                offsetCorrection: !1,
                dataLabelsConfig: n({}, u)
              });
            }

            l.add(f);
          }), s.push(l);
        }), this.drawPolygons({
          parent: h
        }), i.config.xaxis.labels.show) {
          var p = this.drawXAxisTexts();
          h.add(p);
        }

        return h.add(this.yaxisLabels), s.forEach(function (t) {
          h.add(t);
        }), h;
      }
    }, {
      key: "drawPolygons",
      value: function value(t) {
        for (var e = this, i = this.w, a = t.parent, s = i.globals.yAxisScale[0].result.reverse(), r = s.length, n = [], o = this.size / (r - 1), l = 0; l < r; l++) {
          n[l] = o * l;
        }

        n.reverse();
        var h = [],
            c = [];
        n.forEach(function (t, i) {
          var a = e.getPolygonPos(t),
              s = "";
          a.forEach(function (t, a) {
            if (0 === i) {
              var r = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[a] : e.polygons.connectorColors);
              c.push(r);
            }

            0 === a && e.yaxisLabelsTextsPos.push({
              x: t.x,
              y: t.y
            }), s += t.x + "," + t.y + " ";
          }), h.push(s);
        }), h.forEach(function (t, s) {
          var r = e.polygons.strokeColors,
              n = e.graphics.drawPolygon(t, Array.isArray(r) ? r[s] : r, i.globals.radarPolygons.fill.colors[s]);
          a.add(n);
        }), c.forEach(function (t) {
          a.add(t);
        }), i.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function (t, i) {
          var a = e.drawYAxisTexts(t.x, t.y, i, s[i]);
          e.yaxisLabels.add(a);
        });
      }
    }, {
      key: "drawYAxisTexts",
      value: function value(t, e, i, a) {
        var s = this.w,
            r = s.config.yaxis[0],
            n = s.globals.yLabelFormatters[0];
        return this.graphics.drawText({
          x: t + r.labels.offsetX,
          y: e + r.labels.offsetY,
          text: n(a, i),
          textAnchor: "middle",
          fontSize: r.labels.style.fontSize,
          fontFamily: r.labels.style.fontFamily,
          foreColor: r.labels.style.color
        });
      }
    }, {
      key: "drawXAxisTexts",
      value: function value() {
        var t = this,
            e = this.w,
            i = e.config.xaxis.labels,
            a = this.graphics.group({
          "class": "apexcharts-xaxis"
        }),
            s = this.getPolygonPos(this.size);
        return e.globals.labels.forEach(function (r, o) {
          var l = e.config.xaxis.labels.formatter,
              h = new Y(t.ctx);

          if (s[o]) {
            var c = t.getTextPos(s[o], t.size),
                d = l(r, {
              seriesIndex: -1,
              dataPointIndex: o,
              w: e
            });
            h.plotDataLabelsText({
              x: c.newX,
              y: c.newY,
              text: d,
              textAnchor: c.textAnchor,
              i: o,
              j: o,
              parent: a,
              color: i.style.colors[o] ? i.style.colors[o] : "#a8a8a8",
              dataLabelsConfig: n({
                textAnchor: c.textAnchor,
                dropShadow: {
                  enabled: !1
                }
              }, i),
              offsetCorrection: !1
            });
          }
        }), a;
      }
    }, {
      key: "createPaths",
      value: function value(t, e) {
        var i = this,
            a = [],
            s = [],
            r = [],
            n = [];

        if (t.length) {
          s = [this.graphics.move(e.x, e.y)], n = [this.graphics.move(e.x, e.y)];
          var o = this.graphics.move(t[0].x, t[0].y),
              l = this.graphics.move(t[0].x, t[0].y);
          t.forEach(function (e, a) {
            o += i.graphics.line(e.x, e.y), l += i.graphics.line(e.x, e.y), a === t.length - 1 && (o += "Z", l += "Z");
          }), a.push(o), r.push(l);
        }

        return {
          linePathsFrom: s,
          linePathsTo: a,
          areaPathsFrom: n,
          areaPathsTo: r
        };
      }
    }, {
      key: "getTextPos",
      value: function value(t, e) {
        var i = "middle",
            a = t.x,
            s = t.y;
        return Math.abs(t.x) >= 10 ? t.x > 0 ? (i = "start", a += 10) : t.x < 0 && (i = "end", a -= 10) : i = "middle", Math.abs(t.y) >= e - 10 && (t.y < 0 ? s -= 10 : t.y > 0 && (s += 10)), {
          textAnchor: i,
          newX: a,
          newY: s
        };
      }
    }, {
      key: "getPreviousPath",
      value: function value(t) {
        for (var e = this.w, i = null, a = 0; a < e.globals.previousPaths.length; a++) {
          var s = e.globals.previousPaths[a];
          s.paths.length > 0 && parseInt(s.realIndex, 10) === parseInt(t, 10) && void 0 !== e.globals.previousPaths[a].paths[0] && (i = e.globals.previousPaths[a].paths[0].d);
        }

        return i;
      }
    }, {
      key: "getDataPointsPos",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
        t = t || [], e = e || [];

        for (var a = [], s = 0; s < i; s++) {
          var r = {};
          r.x = t[s] * Math.sin(e[s]), r.y = -t[s] * Math.cos(e[s]), a.push(r);
        }

        return a;
      }
    }, {
      key: "getPolygonPos",
      value: function value(t) {
        for (var e = [], i = 2 * Math.PI / this.dataPointsLen, a = 0; a < this.dataPointsLen; a++) {
          var s = {};
          s.x = t * Math.sin(a * i), s.y = -t * Math.cos(a * i), e.push(s);
        }

        return e;
      }
    }]), t;
  }(),
      kt = function (t) {
    function i(t) {
      var a;
      e(this, i), (a = c(this, l(i).call(this, t))).ctx = t, a.w = t.w, a.animBeginArr = [0], a.animDur = 0;
      var s = a.w;
      return a.startAngle = s.config.plotOptions.radialBar.startAngle, a.endAngle = s.config.plotOptions.radialBar.endAngle, a.totalAngle = Math.abs(s.config.plotOptions.radialBar.endAngle - s.config.plotOptions.radialBar.startAngle), a.trackStartAngle = s.config.plotOptions.radialBar.track.startAngle, a.trackEndAngle = s.config.plotOptions.radialBar.track.endAngle, a.radialDataLabels = s.config.plotOptions.radialBar.dataLabels, a.trackStartAngle || (a.trackStartAngle = a.startAngle), a.trackEndAngle || (a.trackEndAngle = a.endAngle), 360 === a.endAngle && (a.endAngle = 359.99), a.fullAngle = 360 - s.config.plotOptions.radialBar.endAngle - s.config.plotOptions.radialBar.startAngle, a.margin = parseInt(s.config.plotOptions.radialBar.track.margin, 10), a;
    }

    return o(i, t), a(i, [{
      key: "draw",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = i.group({
          "class": "apexcharts-radialbar"
        });
        if (e.globals.noData) return a;
        var s = i.group(),
            r = this.defaultSize / 2,
            n = e.globals.gridWidth / 2,
            o = this.defaultSize / 2.05 - e.config.stroke.width - e.config.chart.dropShadow.blur;
        void 0 !== e.config.plotOptions.radialBar.size && (o = e.config.plotOptions.radialBar.size);
        var l = e.globals.fill.colors;

        if (e.config.plotOptions.radialBar.track.show) {
          var h = this.drawTracks({
            size: o,
            centerX: n,
            centerY: r,
            colorArr: l,
            series: t
          });
          s.add(h);
        }

        var c = this.drawArcs({
          size: o,
          centerX: n,
          centerY: r,
          colorArr: l,
          series: t
        }),
            d = 360;
        e.config.plotOptions.radialBar.startAngle < 0 && (d = this.totalAngle);
        var g = (360 - d) / 360;

        if (e.globals.radialSize = o - o * g, this.radialDataLabels.value.show) {
          var u = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
          e.globals.radialSize += u * g;
        }

        return s.add(c.g), "front" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), a.add(s), a;
      }
    }, {
      key: "drawTracks",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = i.group({
          "class": "apexcharts-tracks"
        }),
            s = new u(this.ctx),
            r = new M(this.ctx),
            n = this.getStrokeWidth(t);
        t.size = t.size - n / 2;

        for (var o = 0; o < t.series.length; o++) {
          var l = i.group({
            "class": "apexcharts-radialbar-track apexcharts-track"
          });
          a.add(l), l.attr({
            rel: o + 1
          }), t.size = t.size - n - this.margin;
          var h = e.config.plotOptions.radialBar.track,
              c = r.fillPath({
            seriesNumber: 0,
            size: t.size,
            fillColors: Array.isArray(h.background) ? h.background[o] : h.background,
            solid: !0
          }),
              d = this.trackStartAngle,
              g = this.trackEndAngle;
          Math.abs(g) + Math.abs(d) >= 360 && (g = 360 - Math.abs(this.startAngle) - .1);
          var f = i.drawPath({
            d: "",
            stroke: c,
            strokeWidth: n * parseInt(h.strokeWidth, 10) / 100,
            fill: "none",
            strokeOpacity: h.opacity,
            classes: "apexcharts-radialbar-area"
          });

          if (h.dropShadow.enabled) {
            var x = h.dropShadow;
            s.dropShadow(f, x);
          }

          l.add(f), f.attr("id", "apexcharts-radialbarTrack-" + o), this.animatePaths(f, {
            centerX: t.centerX,
            centerY: t.centerY,
            endAngle: g,
            startAngle: d,
            size: t.size,
            i: o,
            totalItems: 2,
            animBeginArr: 0,
            dur: 0,
            isTrack: !0,
            easing: e.globals.easing
          });
        }

        return a;
      }
    }, {
      key: "drawArcs",
      value: function value(t) {
        var e = this.w,
            i = new p(this.ctx),
            a = new M(this.ctx),
            s = new u(this.ctx),
            r = i.group(),
            n = this.getStrokeWidth(t);
        t.size = t.size - n / 2;
        var o = e.config.plotOptions.radialBar.hollow.background,
            l = t.size - n * t.series.length - this.margin * t.series.length - n * parseInt(e.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2,
            h = l - e.config.plotOptions.radialBar.hollow.margin;
        void 0 !== e.config.plotOptions.radialBar.hollow.image && (o = this.drawHollowImage(t, r, l, o));
        var c = this.drawHollow({
          size: h,
          centerX: t.centerX,
          centerY: t.centerY,
          fill: o
        });

        if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
          var d = e.config.plotOptions.radialBar.hollow.dropShadow;
          s.dropShadow(c, d);
        }

        var f = 1;
        !this.radialDataLabels.total.show && e.globals.series.length > 1 && (f = 0);
        var x = null;
        this.radialDataLabels.show && (x = this.renderInnerDataLabels(this.radialDataLabels, {
          hollowSize: l,
          centerX: t.centerX,
          centerY: t.centerY,
          opacity: f
        })), "back" === e.config.plotOptions.radialBar.hollow.position && (r.add(c), x && r.add(x));
        var b = !1;
        e.config.plotOptions.radialBar.inverseOrder && (b = !0);

        for (var m = b ? t.series.length - 1 : 0; b ? m >= 0 : m < t.series.length; b ? m-- : m++) {
          var v = i.group({
            "class": "apexcharts-series apexcharts-radial-series",
            seriesName: g.escapeString(e.globals.seriesNames[m])
          });
          r.add(v), v.attr({
            rel: m + 1,
            "data:realIndex": m
          }), this.ctx.series.addCollapsedClassToSeries(v, m), t.size = t.size - n - this.margin;
          var y = a.fillPath({
            seriesNumber: m,
            size: t.size,
            value: t.series[m]
          }),
              w = this.startAngle,
              k = void 0,
              A = g.negToZero(t.series[m] > 100 ? 100 : t.series[m]) / 100,
              S = Math.round(this.totalAngle * A) + this.startAngle,
              C = void 0;
          e.globals.dataChanged && (k = this.startAngle, C = Math.round(this.totalAngle * g.negToZero(e.globals.previousPaths[m]) / 100) + k), Math.abs(S) + Math.abs(w) >= 360 && (S -= .01), Math.abs(C) + Math.abs(k) >= 360 && (C -= .01);
          var L = S - w,
              P = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[m] : e.config.stroke.dashArray,
              z = i.drawPath({
            d: "",
            stroke: y,
            strokeWidth: n,
            fill: "none",
            fillOpacity: e.config.fill.opacity,
            classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + m,
            strokeDashArray: P
          });

          if (p.setAttrs(z.node, {
            "data:angle": L,
            "data:value": t.series[m]
          }), e.config.chart.dropShadow.enabled) {
            var T = e.config.chart.dropShadow;
            s.dropShadow(z, T, m);
          }

          this.addListeners(z, this.radialDataLabels), v.add(z), z.attr({
            index: 0,
            j: m
          });
          var E = 0;
          !this.initialAnim || e.globals.resized || e.globals.dataChanged || (E = (S - w) / 360 * e.config.chart.animations.speed, this.animDur = E / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), e.globals.dataChanged && (E = (S - w) / 360 * e.config.chart.animations.dynamicAnimation.speed, this.animDur = E / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), this.animatePaths(z, {
            centerX: t.centerX,
            centerY: t.centerY,
            endAngle: S,
            startAngle: w,
            prevEndAngle: C,
            prevStartAngle: k,
            size: t.size,
            i: m,
            totalItems: 2,
            animBeginArr: this.animBeginArr,
            dur: E,
            shouldSetPrevPaths: !0,
            easing: e.globals.easing
          });
        }

        return {
          g: r,
          elHollow: c,
          dataLabels: x
        };
      }
    }, {
      key: "drawHollow",
      value: function value(t) {
        var e = new p(this.ctx).drawCircle(2 * t.size);
        return e.attr({
          "class": "apexcharts-radialbar-hollow",
          cx: t.centerX,
          cy: t.centerY,
          r: t.size,
          fill: t.fill
        }), e;
      }
    }, {
      key: "drawHollowImage",
      value: function value(t, e, i, a) {
        var s = this.w,
            r = new M(this.ctx),
            n = g.randomId(),
            o = s.config.plotOptions.radialBar.hollow.image;
        if (s.config.plotOptions.radialBar.hollow.imageClipped) r.clippedImgArea({
          width: i,
          height: i,
          image: o,
          patternID: "pattern".concat(s.globals.cuid).concat(n)
        }), a = "url(#pattern".concat(s.globals.cuid).concat(n, ")");else {
          var l = s.config.plotOptions.radialBar.hollow.imageWidth,
              h = s.config.plotOptions.radialBar.hollow.imageHeight;

          if (void 0 === l && void 0 === h) {
            var c = s.globals.dom.Paper.image(o).loaded(function (e) {
              this.move(t.centerX - e.width / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY);
            });
            e.add(c);
          } else {
            var d = s.globals.dom.Paper.image(o).loaded(function (e) {
              this.move(t.centerX - l / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l, h);
            });
            e.add(d);
          }
        }
        return a;
      }
    }, {
      key: "getStrokeWidth",
      value: function value(t) {
        var e = this.w;
        return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t.series.length + 1) - this.margin;
      }
    }]), i;
  }(at),
      At = function (t) {
    function i() {
      return e(this, i), c(this, l(i).apply(this, arguments));
    }

    return o(i, t), a(i, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w,
            a = new p(this.ctx);
        this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = i.globals.seriesRangeStart, this.seriesRangeEnd = i.globals.seriesRangeEnd, this.barHelpers.initVariables(t);

        for (var s = a.group({
          "class": "apexcharts-rangebar-series apexcharts-plot-series"
        }), r = 0; r < t.length; r++) {
          var o,
              l,
              h,
              c = void 0,
              d = void 0,
              u = void 0,
              f = i.globals.comboCharts ? e[r] : r,
              x = a.group({
            "class": "apexcharts-series",
            seriesName: g.escapeString(i.globals.seriesNames[f]),
            rel: r + 1,
            "data:realIndex": f
          });
          t[r].length > 0 && (this.visibleI = this.visibleI + 1);
          var b = 0,
              m = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = f);
          var v = this.barHelpers.initialPositions();
          d = v.y, h = v.zeroW, c = v.x, m = v.barWidth, o = v.xDivision, l = v.zeroH;

          for (var y = a.group({
            "class": "apexcharts-datalabels"
          }), w = 0; w < i.globals.dataPoints; w++) {
            var k = this.barHelpers.getStrokeWidth(r, w, f),
                A = this.seriesRangeStart[r][w],
                S = this.seriesRangeEnd[r][w],
                C = null,
                L = null,
                P = {
              x: c,
              y: d,
              strokeWidth: k,
              elSeries: x
            };

            if (u = v.yDivision, b = v.barHeight, this.isHorizontal) {
              L = d + b * this.visibleI;
              var z = (u - b * this.seriesLen) / 2;
              if (void 0 === i.config.series[r].data[w]) break;

              if (this.isTimelineBar && i.config.series[r].data[w].x) {
                var T = this.detectOverlappingBars({
                  i: r,
                  j: w,
                  barYPosition: L,
                  srty: z,
                  barHeight: b,
                  yDivision: u,
                  initPositions: v
                });
                b = T.barHeight, L = T.barYPosition;
              }

              m = (C = this.drawRangeBarPaths(n({
                indexes: {
                  i: r,
                  j: w,
                  realIndex: f
                },
                barHeight: b,
                barYPosition: L,
                zeroW: h,
                yDivision: u,
                y1: A,
                y2: S
              }, P))).barWidth;
            } else b = (C = this.drawRangeColumnPaths(n({
              indexes: {
                i: r,
                j: w,
                realIndex: f
              },
              zeroH: l,
              barWidth: m,
              xDivision: o
            }, P))).barHeight;

            d = C.y, c = C.x;
            var E = this.barHelpers.getPathFillColor(t, r, w, f),
                M = i.globals.stroke.colors[f];
            this.renderSeries({
              realIndex: f,
              pathFill: E,
              lineFill: M,
              j: w,
              i: r,
              x: c,
              y: d,
              y1: A,
              y2: S,
              pathFrom: C.pathFrom,
              pathTo: C.pathTo,
              strokeWidth: k,
              elSeries: x,
              series: t,
              barHeight: b,
              barYPosition: L,
              barWidth: m,
              elDataLabelsWrap: y,
              visibleSeries: this.visibleI,
              type: "rangebar"
            });
          }

          s.add(x);
        }

        return s;
      }
    }, {
      key: "detectOverlappingBars",
      value: function value(t) {
        var e = t.i,
            i = t.j,
            a = t.barYPosition,
            s = t.srty,
            r = t.barHeight,
            n = t.yDivision,
            o = t.initPositions,
            l = this.w,
            h = [],
            c = l.config.series[e].data[i].rangeName,
            d = l.config.series[e].data[i].x,
            g = l.globals.labels.indexOf(d),
            u = l.globals.seriesRangeBarTimeline[e].findIndex(function (t) {
          return t.x === d && t.overlaps.length > 0;
        });
        return a = s + r * this.visibleI + n * g, u > -1 && (h = l.globals.seriesRangeBarTimeline[e][u].overlaps).indexOf(c) > -1 && (a = (r = o.barHeight / h.length) * this.visibleI + n * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + r * (this.visibleI + h.indexOf(c)) + n * g), {
          barYPosition: a,
          barHeight: r
        };
      }
    }, {
      key: "drawRangeColumnPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            a = t.strokeWidth,
            s = t.xDivision,
            r = t.barWidth,
            n = t.zeroH,
            o = this.w,
            l = new p(this.ctx),
            h = e.i,
            c = e.j,
            d = this.yRatio[this.yaxisIndex],
            g = e.realIndex,
            u = this.getRangeValue(g, c),
            f = Math.min(u.start, u.end),
            x = Math.max(u.start, u.end);
        o.globals.isXNumeric && (i = (o.globals.seriesX[h][c] - o.globals.minX) / this.xRatio - r / 2);
        var b = i + r * this.visibleI;
        void 0 === this.series[h][c] || null === this.series[h][c] ? f = n : (f = n - f / d, x = n - x / d);
        var m = Math.abs(x - f),
            v = l.move(b, n),
            y = l.move(b, f);
        return o.globals.previousPaths.length > 0 && (y = this.getPreviousPath(g, c, !0)), v = l.move(b, x) + l.line(b + r, x) + l.line(b + r, f) + l.line(b, f) + l.line(b, x - a / 2), y = y + l.move(b, f) + l.line(b + r, f) + l.line(b + r, f) + l.line(b, f), o.globals.isXNumeric || (i += s), {
          pathTo: v,
          pathFrom: y,
          barHeight: m,
          x: i,
          y: x,
          barXPosition: b
        };
      }
    }, {
      key: "drawRangeBarPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.y,
            a = t.y1,
            s = t.y2,
            r = t.yDivision,
            n = t.barHeight,
            o = t.barYPosition,
            l = t.zeroW,
            h = this.w,
            c = new p(this.ctx),
            d = l + a / this.invertedYRatio,
            g = l + s / this.invertedYRatio,
            u = c.move(l, o),
            f = c.move(d, o);
        h.globals.previousPaths.length > 0 && (f = this.getPreviousPath(e.realIndex, e.j));
        var x = Math.abs(g - d);
        return u = c.move(d, o) + c.line(g, o) + c.line(g, o + n) + c.line(d, o + n) + c.line(d, o), f = f + c.line(d, o) + c.line(d, o + n) + c.line(d, o + n) + c.line(d, o), h.globals.isXNumeric || (i += r), {
          pathTo: u,
          pathFrom: f,
          barWidth: x,
          x: g,
          y: i
        };
      }
    }, {
      key: "getRangeValue",
      value: function value(t, e) {
        var i = this.w;
        return {
          start: i.globals.seriesRangeStart[t][e],
          end: i.globals.seriesRangeEnd[t][e]
        };
      }
    }]), i;
  }(bt),
      St = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.lineCtx = i;
    }

    return a(t, [{
      key: "sameValueSeriesFix",
      value: function value(t, e) {
        var i = this.w;

        if ("line" === i.config.chart.type && ("gradient" === i.config.fill.type || "gradient" === i.config.fill.type[t]) && new E(this.lineCtx.ctx, i).seriesHaveSameValues(t)) {
          var a = e[t].slice();
          a[a.length - 1] = a[a.length - 1] + 1e-6, e[t] = a;
        }

        return e;
      }
    }, {
      key: "calculatePoints",
      value: function value(t) {
        var e = t.series,
            i = t.realIndex,
            a = t.x,
            s = t.y,
            r = t.i,
            n = t.j,
            o = t.prevY,
            l = this.w,
            h = [],
            c = [];

        if (0 === n) {
          var d = this.lineCtx.categoryAxisCorrection + l.config.markers.offsetX;
          l.globals.isXNumeric && (d = (l.globals.seriesX[i][0] - l.globals.minX) / this.lineCtx.xRatio + l.config.markers.offsetX), h.push(d), c.push(g.isNumber(e[r][0]) ? o + l.config.markers.offsetY : null), h.push(a + l.config.markers.offsetX), c.push(g.isNumber(e[r][n + 1]) ? s + l.config.markers.offsetY : null);
        } else h.push(a + l.config.markers.offsetX), c.push(g.isNumber(e[r][n + 1]) ? s + l.config.markers.offsetY : null);

        return {
          x: h,
          y: c
        };
      }
    }, {
      key: "checkPreviousPaths",
      value: function value(t) {
        for (var e = t.pathFromLine, i = t.pathFromArea, a = t.realIndex, s = this.w, r = 0; r < s.globals.previousPaths.length; r++) {
          var n = s.globals.previousPaths[r];
          ("line" === n.type || "area" === n.type) && n.paths.length > 0 && parseInt(n.realIndex, 10) === parseInt(a, 10) && ("line" === n.type ? (this.lineCtx.appendPathFrom = !1, e = s.globals.previousPaths[r].paths[0].d) : "area" === n.type && (this.lineCtx.appendPathFrom = !1, i = s.globals.previousPaths[r].paths[0].d, s.config.stroke.show && (e = s.globals.previousPaths[r].paths[1].d)));
        }

        return {
          pathFromLine: e,
          pathFromArea: i
        };
      }
    }, {
      key: "determineFirstPrevY",
      value: function value(t) {
        var e = t.i,
            i = t.series,
            a = t.prevY,
            s = t.lineYPosition,
            r = this.w;
        if (void 0 !== i[e][0]) a = (s = r.config.chart.stacked && e > 0 ? this.lineCtx.prevSeriesY[e - 1][0] : this.lineCtx.zeroY) - i[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? i[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);else if (r.config.chart.stacked && e > 0 && void 0 === i[e][0]) for (var n = e - 1; n >= 0; n--) {
          if (null !== i[n][0] && void 0 !== i[n][0]) {
            a = s = this.lineCtx.prevSeriesY[n][0];
            break;
          }
        }
        return {
          prevY: a,
          lineYPosition: s
        };
      }
    }]), t;
  }(),
      Ct = function () {
    function t(i, a, s) {
      e(this, t), this.ctx = i, this.w = i.w, this.xyRatios = a, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s, this.scatter = new X(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new St(this), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
    }

    return a(t, [{
      key: "draw",
      value: function value(t, e, i) {
        var a = this.w,
            s = new p(this.ctx),
            r = a.globals.comboCharts ? e : a.config.chart.type,
            n = s.group({
          "class": "apexcharts-".concat(r, "-series apexcharts-plot-series")
        }),
            o = new E(this.ctx, a);
        this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t = o.getLogSeries(t), this.yRatio = o.getLogYRatios(this.yRatio);

        for (var l = [], h = 0; h < t.length; h++) {
          t = this.lineHelpers.sameValueSeriesFix(h, t);
          var c = a.globals.comboCharts ? i[h] : h;

          this._initSerieVariables(t, h, c);

          var d = [],
              g = [],
              u = a.globals.padHorizontal + this.categoryAxisCorrection;
          this.ctx.series.addCollapsedClassToSeries(this.elSeries, c), a.globals.isXNumeric && a.globals.seriesX.length > 0 && (u = (a.globals.seriesX[c][0] - a.globals.minX) / this.xRatio), g.push(u);
          var f,
              x = u,
              b = x,
              m = this.zeroY;
          m = this.lineHelpers.determineFirstPrevY({
            i: h,
            series: t,
            prevY: m,
            lineYPosition: 0
          }).prevY, d.push(m), f = m;

          var v = this._calculatePathsFrom({
            series: t,
            i: h,
            realIndex: c,
            prevX: b,
            prevY: m
          }),
              y = this._iterateOverDataPoints({
            series: t,
            realIndex: c,
            i: h,
            x: u,
            y: 1,
            pX: x,
            pY: f,
            pathsFrom: v,
            linePaths: [],
            areaPaths: [],
            seriesIndex: i,
            lineYPosition: 0,
            xArrj: g,
            yArrj: d
          });

          this._handlePaths({
            type: r,
            realIndex: c,
            i: h,
            paths: y
          }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), l.push(this.elSeries);
        }

        for (var w = l.length; w > 0; w--) {
          n.add(l[w - 1]);
        }

        return n;
      }
    }, {
      key: "_initSerieVariables",
      value: function value(t, e, i) {
        var a = this.w,
            s = new p(this.ctx);
        this.xDivision = a.globals.gridWidth / (a.globals.dataPoints - ("on" === a.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a.config.stroke.width) ? a.config.stroke.width[i] : a.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i), this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, this.zeroY > a.globals.gridHeight && (this.areaBottomY = a.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s.group({
          "class": "apexcharts-series",
          seriesName: g.escapeString(a.globals.seriesNames[i])
        }), this.elPointsMain = s.group({
          "class": "apexcharts-series-markers-wrap"
        }), this.elDataLabelsWrap = s.group({
          "class": "apexcharts-datalabels"
        });
        var r = t[e].length === a.globals.dataPoints;
        this.elSeries.attr({
          "data:longestSeries": r,
          rel: e + 1,
          "data:realIndex": i
        }), this.appendPathFrom = !0;
      }
    }, {
      key: "_calculatePathsFrom",
      value: function value(t) {
        var e,
            i,
            a,
            s,
            r = t.series,
            n = t.i,
            o = t.realIndex,
            l = t.prevX,
            h = t.prevY,
            c = this.w,
            d = new p(this.ctx);

        if (null === r[n][0]) {
          for (var g = 0; g < r[n].length; g++) {
            if (null !== r[n][g]) {
              l = this.xDivision * g, h = this.zeroY - r[n][g] / this.yRatio[this.yaxisIndex], e = d.move(l, h), i = d.move(l, this.areaBottomY);
              break;
            }
          }
        } else e = d.move(l, h), i = d.move(l, this.areaBottomY) + d.line(l, h);

        if (a = d.move(-1, this.zeroY) + d.line(-1, this.zeroY), s = d.move(-1, this.zeroY) + d.line(-1, this.zeroY), c.globals.previousPaths.length > 0) {
          var u = this.lineHelpers.checkPreviousPaths({
            pathFromLine: a,
            pathFromArea: s,
            realIndex: o
          });
          a = u.pathFromLine, s = u.pathFromArea;
        }

        return {
          prevX: l,
          prevY: h,
          linePath: e,
          areaPath: i,
          pathFromLine: a,
          pathFromArea: s
        };
      }
    }, {
      key: "_handlePaths",
      value: function value(t) {
        var e = t.type,
            i = t.realIndex,
            a = t.i,
            s = t.paths,
            r = this.w,
            o = new p(this.ctx),
            l = new M(this.ctx);
        this.prevSeriesY.push(s.yArrj), r.globals.seriesXvalues[i] = s.xArrj, r.globals.seriesYvalues[i] = s.yArrj, this.pointsChart || r.globals.delayedElements.push({
          el: this.elPointsMain.node,
          index: i
        });
        var h = {
          i: a,
          realIndex: i,
          animationDelay: a,
          initialSpeed: r.config.chart.animations.speed,
          dataChangeSpeed: r.config.chart.animations.dynamicAnimation.speed,
          className: "apexcharts-".concat(e)
        };
        if ("area" === e) for (var c = l.fillPath({
          seriesNumber: i
        }), d = 0; d < s.areaPaths.length; d++) {
          var g = o.renderPaths(n({}, h, {
            pathFrom: s.pathFromArea,
            pathTo: s.areaPaths[d],
            stroke: "none",
            strokeWidth: 0,
            strokeLineCap: null,
            fill: c
          }));
          this.elSeries.add(g);
        }

        if (r.config.stroke.show && !this.pointsChart) {
          var u = null;
          u = "line" === e ? l.fillPath({
            seriesNumber: i,
            i: a
          }) : r.globals.stroke.colors[i];

          for (var f = 0; f < s.linePaths.length; f++) {
            var x = o.renderPaths(n({}, h, {
              pathFrom: s.pathFromLine,
              pathTo: s.linePaths[f],
              stroke: u,
              strokeWidth: this.strokeWidth,
              strokeLineCap: r.config.stroke.lineCap,
              fill: "none"
            }));
            this.elSeries.add(x);
          }
        }
      }
    }, {
      key: "_iterateOverDataPoints",
      value: function value(t) {
        for (var e = t.series, i = t.realIndex, a = t.i, s = t.x, r = t.y, n = t.pX, o = t.pY, l = t.pathsFrom, h = t.linePaths, c = t.areaPaths, d = t.seriesIndex, u = t.lineYPosition, f = t.xArrj, x = t.yArrj, b = this.w, m = new p(this.ctx), v = this.yRatio, y = l.prevY, w = l.linePath, k = l.areaPath, A = l.pathFromLine, S = l.pathFromArea, C = g.isNumber(b.globals.minYArr[i]) ? b.globals.minYArr[i] : b.globals.minY, L = b.globals.dataPoints > 1 ? b.globals.dataPoints - 1 : b.globals.dataPoints, P = 0; P < L; P++) {
          var z = void 0 === e[a][P + 1] || null === e[a][P + 1];

          if (b.globals.isXNumeric) {
            var T = b.globals.seriesX[i][P + 1];
            void 0 === b.globals.seriesX[i][P + 1] && (T = b.globals.seriesX[i][L - 1]), s = (T - b.globals.minX) / this.xRatio;
          } else s += this.xDivision;

          u = b.config.chart.stacked && a > 0 && b.globals.collapsedSeries.length < b.config.series.length - 1 ? this.prevSeriesY[a - 1][P + 1] : this.zeroY, r = z ? u - C / v[this.yaxisIndex] + 2 * (this.isReversed ? C / v[this.yaxisIndex] : 0) : u - e[a][P + 1] / v[this.yaxisIndex] + 2 * (this.isReversed ? e[a][P + 1] / v[this.yaxisIndex] : 0), f.push(s), x.push(r);

          var E = this._createPaths({
            series: e,
            i: a,
            realIndex: i,
            j: P,
            x: s,
            y: r,
            pX: n,
            pY: o,
            linePath: w,
            areaPath: k,
            linePaths: h,
            areaPaths: c,
            seriesIndex: d
          });

          c = E.areaPaths, h = E.linePaths, n = E.pX, o = E.pY, k = E.areaPath, w = E.linePath, this.appendPathFrom && (A += m.line(s, this.zeroY), S += m.line(s, this.zeroY)), this._handleMarkersAndLabels({
            series: e,
            x: s,
            y: r,
            prevY: y,
            i: a,
            j: P,
            realIndex: i
          });
        }

        return {
          yArrj: x,
          xArrj: f,
          pathFromArea: S,
          areaPaths: c,
          pathFromLine: A,
          linePaths: h
        };
      }
    }, {
      key: "_handleMarkersAndLabels",
      value: function value(t) {
        var e = t.series,
            i = t.x,
            a = t.y,
            s = t.prevY,
            r = t.i,
            n = t.j,
            o = t.realIndex,
            l = this.w,
            h = new Y(this.ctx),
            c = this.lineHelpers.calculatePoints({
          series: e,
          x: i,
          y: a,
          realIndex: o,
          i: r,
          j: n,
          prevY: s
        });
        if (this.pointsChart) this.scatter.draw(this.elSeries, n, {
          realIndex: o,
          pointsPos: c,
          zRatio: this.zRatio,
          elParent: this.elPointsMain
        });else {
          var d = new I(this.ctx);
          l.globals.series[r].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
          var g = d.plotChartMarkers(c, o, n + 1);
          null !== g && this.elPointsMain.add(g);
        }
        var u = h.drawDataLabel(c, o, n + 1, null, this.strokeWidth);
        null !== u && this.elDataLabelsWrap.add(u);
      }
    }, {
      key: "_createPaths",
      value: function value(t) {
        var e = t.series,
            i = t.i,
            a = t.realIndex,
            s = t.j,
            r = t.x,
            n = t.y,
            o = t.pX,
            l = t.pY,
            h = t.linePath,
            c = t.areaPath,
            d = t.linePaths,
            g = t.areaPaths,
            u = t.seriesIndex,
            f = this.w,
            x = new p(this.ctx),
            b = f.config.stroke.curve,
            m = this.areaBottomY;

        if (Array.isArray(f.config.stroke.curve) && (b = Array.isArray(u) ? f.config.stroke.curve[u[i]] : f.config.stroke.curve[i]), "smooth" === b) {
          var v = .35 * (r - o);
          f.globals.hasNullValues ? (null !== e[i][s] && (null !== e[i][s + 1] ? (h = x.move(o, l) + x.curve(o + v, l, r - v, n, r + 1, n), c = x.move(o + 1, l) + x.curve(o + v, l, r - v, n, r + 1, n) + x.line(r, m) + x.line(o, m) + "z") : (h = x.move(o, l), c = x.move(o, l) + "z")), d.push(h), g.push(c)) : (h += x.curve(o + v, l, r - v, n, r, n), c += x.curve(o + v, l, r - v, n, r, n)), o = r, l = n, s === e[i].length - 2 && (c = c + x.curve(o, l, r, n, r, m) + x.move(r, n) + "z", f.globals.hasNullValues || (d.push(h), g.push(c)));
        } else {
          if (null === e[i][s + 1]) {
            h += x.move(r, n);
            var y = f.globals.isXNumeric ? (f.globals.seriesX[a][s] - f.globals.minX) / this.xRatio : r - this.xDivision;
            c = c + x.line(y, m) + x.move(r, n) + "z";
          }

          null === e[i][s] && (h += x.move(r, n), c += x.move(r, m)), "stepline" === b ? (h = h + x.line(r, null, "H") + x.line(null, n, "V"), c = c + x.line(r, null, "H") + x.line(null, n, "V")) : "straight" === b && (h += x.line(r, n), c += x.line(r, n)), s === e[i].length - 2 && (c = c + x.line(r, m) + x.move(r, n) + "z", d.push(h), g.push(c));
        }

        return {
          linePaths: d,
          areaPaths: g,
          pX: o,
          pY: l,
          linePath: h,
          areaPath: c
        };
      }
    }]), t;
  }(),
      Lt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
    }

    return a(t, [{
      key: "calculateTimeScaleTicks",
      value: function value(t, e) {
        var i = this,
            a = this.w;
        if (a.globals.allSeriesCollapsed) return a.globals.labels = [], a.globals.timescaleLabels = [], [];
        var s = new C(this.ctx),
            r = (e - t) / 864e5;
        this.determineInterval(r), a.globals.disableZoomIn = !1, a.globals.disableZoomOut = !1, r < .005 ? a.globals.disableZoomIn = !0 : r > 5e4 && (a.globals.disableZoomOut = !0);
        var o = s.getTimeUnitsfromTimestamp(t, e, this.utc),
            l = a.globals.gridWidth / r,
            h = l / 24,
            c = h / 60,
            d = Math.floor(24 * r),
            g = Math.floor(24 * r * 60),
            u = Math.floor(r),
            f = Math.floor(r / 30),
            p = Math.floor(r / 365),
            x = {
          minMinute: o.minMinute,
          minHour: o.minHour,
          minDate: o.minDate,
          minMonth: o.minMonth,
          minYear: o.minYear
        },
            b = {
          firstVal: x,
          currentMinute: x.minMinute,
          currentHour: x.minHour,
          currentMonthDate: x.minDate,
          currentDate: x.minDate,
          currentMonth: x.minMonth,
          currentYear: x.minYear,
          daysWidthOnXAxis: l,
          hoursWidthOnXAxis: h,
          minutesWidthOnXAxis: c,
          numberOfMinutes: g,
          numberOfHours: d,
          numberOfDays: u,
          numberOfMonths: f,
          numberOfYears: p
        };

        switch (this.tickInterval) {
          case "years":
            this.generateYearScale(b);
            break;

          case "months":
          case "half_year":
            this.generateMonthScale(b);
            break;

          case "months_days":
          case "months_fortnight":
          case "days":
          case "week_days":
            this.generateDayScale(b);
            break;

          case "hours":
            this.generateHourScale(b);
            break;

          case "minutes":
            this.generateMinuteScale(b);
        }

        var m = this.timeScaleArray.map(function (t) {
          var e = {
            position: t.position,
            unit: t.unit,
            year: t.year,
            day: t.day ? t.day : 1,
            hour: t.hour ? t.hour : 0,
            month: t.month + 1
          };
          return "month" === t.unit ? n({}, e, {
            day: 1,
            value: t.value + 1
          }) : "day" === t.unit || "hour" === t.unit ? n({}, e, {
            value: t.value
          }) : "minute" === t.unit ? n({}, e, {
            value: t.value,
            minute: t.value
          }) : t;
        });
        return m.filter(function (t) {
          var e = 1,
              s = Math.ceil(a.globals.gridWidth / 120),
              r = t.value;
          void 0 !== a.config.xaxis.tickAmount && (s = a.config.xaxis.tickAmount), m.length > s && (e = Math.floor(m.length / s));
          var n = !1,
              o = !1;

          switch (i.tickInterval) {
            case "half_year":
              e = 7, "year" === t.unit && (n = !0);
              break;

            case "months":
              e = 1, "year" === t.unit && (n = !0);
              break;

            case "months_fortnight":
              e = 15, "year" !== t.unit && "month" !== t.unit || (n = !0), 30 === r && (o = !0);
              break;

            case "months_days":
              e = 10, "month" === t.unit && (n = !0), 30 === r && (o = !0);
              break;

            case "week_days":
              e = 8, "month" === t.unit && (n = !0);
              break;

            case "days":
              e = 1, "month" === t.unit && (n = !0);
              break;

            case "hours":
              "day" === t.unit && (n = !0);
              break;

            case "minutes":
              r % 5 != 0 && (o = !0);
          }

          if ("minutes" === i.tickInterval || "hours" === i.tickInterval) {
            if (!o) return !0;
          } else if ((r % e == 0 || n) && !o) return !0;
        });
      }
    }, {
      key: "recalcDimensionsBasedOnFormat",
      value: function value(t, e) {
        var i = this.w,
            a = this.formatDates(t),
            s = this.removeOverlappingTS(a);
        i.globals.timescaleLabels = s.slice(), new it(this.ctx).plotCoords();
      }
    }, {
      key: "determineInterval",
      value: function value(t) {
        switch (!0) {
          case t > 1825:
            this.tickInterval = "years";
            break;

          case t > 800 && t <= 1825:
            this.tickInterval = "half_year";
            break;

          case t > 180 && t <= 800:
            this.tickInterval = "months";
            break;

          case t > 90 && t <= 180:
            this.tickInterval = "months_fortnight";
            break;

          case t > 60 && t <= 90:
            this.tickInterval = "months_days";
            break;

          case t > 30 && t <= 60:
            this.tickInterval = "week_days";
            break;

          case t > 2 && t <= 30:
            this.tickInterval = "days";
            break;

          case t > .1 && t <= 2:
            this.tickInterval = "hours";
            break;

          case t < .1:
            this.tickInterval = "minutes";
            break;

          default:
            this.tickInterval = "days";
        }
      }
    }, {
      key: "generateYearScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMonth,
            a = t.currentYear,
            s = t.daysWidthOnXAxis,
            r = t.numberOfYears,
            n = e.minYear,
            o = 0,
            l = new C(this.ctx);

        if (e.minDate > 1 && e.minMonth > 0) {
          var h = l.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);
          o = (l.determineDaysOfYear(e.minYear) - h + 1) * s, n = e.minYear + 1, this.timeScaleArray.push({
            position: o,
            value: n,
            unit: "year",
            year: n,
            month: g.monthMod(i + 1)
          });
        } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({
          position: o,
          value: n,
          unit: "year",
          year: a,
          month: g.monthMod(i + 1)
        });

        for (var c = n, d = o, u = 0; u < r; u++) {
          c++, d = l.determineDaysOfYear(c - 1) * s + d, this.timeScaleArray.push({
            position: d,
            value: c,
            unit: "year",
            year: c,
            month: 1
          });
        }
      }
    }, {
      key: "generateMonthScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMonthDate,
            a = t.currentMonth,
            s = t.currentYear,
            r = t.daysWidthOnXAxis,
            n = t.numberOfMonths,
            o = a,
            l = 0,
            h = new C(this.ctx),
            c = "month",
            d = 0;

        if (e.minDate > 1) {
          l = (h.determineDaysOfMonths(a + 1, e.minYear) - i + 1) * r, o = g.monthMod(a + 1);
          var u = s + d,
              f = g.monthMod(o),
              p = o;
          0 === o && (c = "year", p = u, f = 1, u += d += 1), this.timeScaleArray.push({
            position: l,
            value: p,
            unit: c,
            year: u,
            month: f
          });
        } else this.timeScaleArray.push({
          position: l,
          value: o,
          unit: c,
          year: s,
          month: g.monthMod(a)
        });

        for (var x = o + 1, b = l, m = 0, v = 1; m < n; m++, v++) {
          0 === (x = g.monthMod(x)) ? (c = "year", d += 1) : c = "month";
          var y = s + Math.floor(x / 12) + d;
          b = h.determineDaysOfMonths(x, y) * r + b;
          var w = 0 === x ? y : x;
          this.timeScaleArray.push({
            position: b,
            value: w,
            unit: c,
            year: y,
            month: 0 === x ? 1 : x
          }), x++;
        }
      }
    }, {
      key: "generateDayScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMonth,
            a = t.currentYear,
            s = t.hoursWidthOnXAxis,
            r = t.numberOfDays,
            n = new C(this.ctx),
            o = "day",
            l = e.minDate + 1,
            h = l,
            c = function c(t, e, i) {
          return t > n.determineDaysOfMonths(e + 1, i) ? (h = 1, o = "month", u = e += 1, e) : e;
        },
            d = (24 - e.minHour) * s,
            u = l,
            f = c(h, i, a);

        0 === e.minHour && 1 === e.minDate && (d = 0, u = g.monthMod(e.minMonth), o = "month", h = e.minDate, r++), this.timeScaleArray.push({
          position: d,
          value: u,
          unit: o,
          year: a,
          month: g.monthMod(f),
          day: h
        });

        for (var p = d, x = 0; x < r; x++) {
          o = "day", f = c(h += 1, f, a + Math.floor(f / 12) + 0);
          var b = a + Math.floor(f / 12) + 0;
          p = 24 * s + p;
          var m = 1 === h ? g.monthMod(f) : h;
          this.timeScaleArray.push({
            position: p,
            value: m,
            unit: o,
            year: b,
            month: g.monthMod(f),
            day: m
          });
        }
      }
    }, {
      key: "generateHourScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentDate,
            a = t.currentMonth,
            s = t.currentYear,
            r = t.minutesWidthOnXAxis,
            n = t.numberOfHours,
            o = new C(this.ctx),
            l = "hour",
            h = function h(t, e) {
          return t > o.determineDaysOfMonths(e + 1, s) && (x = 1, e += 1), {
            month: e,
            date: x
          };
        },
            c = function c(t, e) {
          return t > o.determineDaysOfMonths(e + 1, s) ? e += 1 : e;
        },
            d = 60 - e.minMinute,
            u = d * r,
            f = e.minHour + 1,
            p = f + 1;

        60 === d && (u = 0, p = (f = e.minHour) + 1);
        var x = i,
            b = c(x, a);
        this.timeScaleArray.push({
          position: u,
          value: f,
          unit: l,
          day: x,
          hour: p,
          year: s,
          month: g.monthMod(b)
        });

        for (var m = u, v = 0; v < n; v++) {
          if (l = "hour", p >= 24) p = 0, l = "day", b = h(x += 1, b).month, b = c(x, b);
          var y = s + Math.floor(b / 12) + 0;
          m = 0 === p && 0 === v ? d * r : 60 * r + m;
          var w = 0 === p ? x : p;
          this.timeScaleArray.push({
            position: m,
            value: w,
            unit: l,
            hour: p,
            day: x,
            year: y,
            month: g.monthMod(b)
          }), p++;
        }
      }
    }, {
      key: "generateMinuteScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMinute,
            a = t.currentHour,
            s = t.currentDate,
            r = t.currentMonth,
            n = t.currentYear,
            o = t.minutesWidthOnXAxis,
            l = t.numberOfMinutes,
            h = o - (i - e.minMinute),
            c = e.minMinute + 1,
            d = c + 1,
            u = s,
            f = r,
            p = n,
            x = a;
        this.timeScaleArray.push({
          position: h,
          value: c,
          unit: "minute",
          day: u,
          hour: x,
          minute: d,
          year: p,
          month: g.monthMod(f)
        });

        for (var b = h, m = 0; m < l; m++) {
          d >= 60 && (d = 0, 24 === (x += 1) && (x = 0)), b = o + b, this.timeScaleArray.push({
            position: b,
            value: d,
            unit: "minute",
            hour: x,
            minute: d,
            day: u,
            year: n + Math.floor(f / 12) + 0,
            month: g.monthMod(f)
          }), d++;
        }
      }
    }, {
      key: "createRawDateString",
      value: function value(t, e) {
        var i = t.year;
        return i += "-" + ("0" + t.month.toString()).slice(-2), "day" === t.unit ? i += "day" === t.unit ? "-" + ("0" + e).slice(-2) : "-01" : i += "-" + ("0" + (t.day ? t.day : "1")).slice(-2), "hour" === t.unit ? i += "hour" === t.unit ? "T" + ("0" + e).slice(-2) : "T00" : i += "T" + ("0" + (t.hour ? t.hour : "0")).slice(-2), i += "minute" === t.unit ? ":" + ("0" + e).slice(-2) + ":00" : ":00:00", this.utc && (i += ".000Z"), i;
      }
    }, {
      key: "formatDates",
      value: function value(t) {
        var e = this,
            i = this.w;
        return t.map(function (t) {
          var a = t.value.toString(),
              s = new C(e.ctx),
              r = e.createRawDateString(t, a),
              n = s.getDate(r);

          if (void 0 === i.config.xaxis.labels.format) {
            var o = "dd MMM",
                l = i.config.xaxis.labels.datetimeFormatter;
            "year" === t.unit && (o = l.year), "month" === t.unit && (o = l.month), "day" === t.unit && (o = l.day), "hour" === t.unit && (o = l.hour), "minute" === t.unit && (o = l.minute), a = s.formatDate(n, o);
          } else a = s.formatDate(n, i.config.xaxis.labels.format);

          return {
            dateString: r,
            position: t.position,
            value: a,
            unit: t.unit,
            year: t.year,
            month: t.month
          };
        });
      }
    }, {
      key: "removeOverlappingTS",
      value: function value(t) {
        var e = this,
            i = new p(this.ctx),
            a = 0,
            s = t.map(function (s, r) {
          if (r > 0 && e.w.config.xaxis.labels.hideOverlappingLabels) {
            var n = i.getTextRects(t[a].value).width,
                o = t[a].position;
            return s.position > o + n + 10 ? (a = r, s) : null;
          }

          return s;
        });
        return s = s.filter(function (t) {
          return null !== t;
        });
      }
    }]), t;
  }(),
      Pt = function () {
    function t(i, a) {
      e(this, t), this.ctx = a, this.w = a.w, this.el = i;
    }

    return a(t, [{
      key: "setupElements",
      value: function value() {
        var t = this.w.globals,
            e = this.w.config,
            i = e.chart.type;
        t.axisCharts = ["line", "area", "bar", "rangeBar", "candlestick", "scatter", "bubble", "radar", "heatmap"].indexOf(i) > -1, t.xyCharts = ["line", "area", "bar", "rangeBar", "candlestick", "scatter", "bubble"].indexOf(i) > -1, t.isBarHorizontal = ("bar" === e.chart.type || "rangeBar" === e.chart.type) && e.plotOptions.bar.horizontal, t.chartClass = ".apexcharts" + t.cuid, t.dom.baseEl = this.el, t.dom.elWrap = document.createElement("div"), p.setAttrs(t.dom.elWrap, {
          id: t.chartClass.substring(1),
          "class": "apexcharts-canvas " + t.chartClass.substring(1)
        }), this.el.appendChild(t.dom.elWrap), t.dom.Paper = new window.SVG.Doc(t.dom.elWrap), t.dom.Paper.attr({
          "class": "apexcharts-svg",
          "xmlns:data": "ApexChartsNS",
          transform: "translate(".concat(e.chart.offsetX, ", ").concat(e.chart.offsetY, ")")
        }), t.dom.Paper.node.style.background = e.chart.background, this.setSVGDimensions(), t.dom.elGraphical = t.dom.Paper.group().attr({
          "class": "apexcharts-inner apexcharts-graphical"
        }), t.dom.elDefs = t.dom.Paper.defs(), t.dom.elLegendWrap = document.createElement("div"), t.dom.elLegendWrap.classList.add("apexcharts-legend"), t.dom.elWrap.appendChild(t.dom.elLegendWrap), t.dom.Paper.add(t.dom.elGraphical), t.dom.elGraphical.add(t.dom.elDefs);
      }
    }, {
      key: "plotChartType",
      value: function value(t, e) {
        var i = this.w,
            a = i.config,
            s = i.globals,
            r = {
          series: [],
          i: []
        },
            n = {
          series: [],
          i: []
        },
            o = {
          series: [],
          i: []
        },
            l = {
          series: [],
          i: []
        },
            h = {
          series: [],
          i: []
        },
            c = {
          series: [],
          i: []
        };
        s.series.map(function (e, d) {
          void 0 !== t[d].type ? ("column" === t[d].type || "bar" === t[d].type ? (s.series.length > 1 && a.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"), h.series.push(e), h.i.push(d), i.globals.columnSeries = h.series) : "area" === t[d].type ? (n.series.push(e), n.i.push(d)) : "line" === t[d].type ? (r.series.push(e), r.i.push(d)) : "scatter" === t[d].type ? (o.series.push(e), o.i.push(d)) : "bubble" === t[d].type ? (l.series.push(e), l.i.push(d)) : "candlestick" === t[d].type ? (c.series.push(e), c.i.push(d)) : console.warn("You have specified an unrecognized chart type. Available types for this propery are line/area/column/bar/scatter/bubble"), s.comboCharts = !0) : (r.series.push(e), r.i.push(d));
        });
        var d = new Ct(this.ctx, e),
            g = new vt(this.ctx, e),
            u = new at(this.ctx),
            f = new kt(this.ctx),
            p = new At(this.ctx, e),
            x = new wt(this.ctx),
            b = [];

        if (s.comboCharts) {
          if (n.series.length > 0 && b.push(d.draw(n.series, "area", n.i)), h.series.length > 0) if (i.config.chart.stacked) {
            var m = new mt(this.ctx, e);
            b.push(m.draw(h.series, h.i));
          } else {
            var v = new bt(this.ctx, e);
            b.push(v.draw(h.series, h.i));
          }

          if (r.series.length > 0 && b.push(d.draw(r.series, "line", r.i)), c.series.length > 0 && b.push(g.draw(c.series, c.i)), o.series.length > 0) {
            var y = new Ct(this.ctx, e, !0);
            b.push(y.draw(o.series, "scatter", o.i));
          }

          if (l.series.length > 0) {
            var w = new Ct(this.ctx, e, !0);
            b.push(w.draw(l.series, "bubble", l.i));
          }
        } else switch (a.chart.type) {
          case "line":
            b = d.draw(s.series, "line");
            break;

          case "area":
            b = d.draw(s.series, "area");
            break;

          case "bar":
            if (a.chart.stacked) b = new mt(this.ctx, e).draw(s.series);else b = new bt(this.ctx, e).draw(s.series);
            break;

          case "candlestick":
            b = new vt(this.ctx, e).draw(s.series);
            break;

          case "rangeBar":
            b = p.draw(s.series);
            break;

          case "heatmap":
            b = new yt(this.ctx, e).draw(s.series);
            break;

          case "pie":
          case "donut":
            b = u.draw(s.series);
            break;

          case "radialBar":
            b = f.draw(s.series);
            break;

          case "radar":
            b = x.draw(s.series);
            break;

          default:
            b = d.draw(s.series);
        }

        return b;
      }
    }, {
      key: "setSVGDimensions",
      value: function value() {
        var t = this.w.globals,
            e = this.w.config;
        t.svgWidth = e.chart.width, t.svgHeight = e.chart.height;
        var i = g.getDimensions(this.el),
            a = e.chart.width.toString().split(/[0-9]+/g).pop();
        if ("%" === a ? g.isNumber(i[0]) && (0 === i[0].width && (i = g.getDimensions(this.el.parentNode)), t.svgWidth = i[0] * parseInt(e.chart.width, 10) / 100) : "px" !== a && "" !== a || (t.svgWidth = parseInt(e.chart.width, 10)), "auto" !== t.svgHeight && "" !== t.svgHeight) {
          if ("%" === e.chart.height.toString().split(/[0-9]+/g).pop()) {
            var s = g.getDimensions(this.el.parentNode);
            t.svgHeight = s[1] * parseInt(e.chart.height, 10) / 100;
          } else t.svgHeight = parseInt(e.chart.height, 10);
        } else t.axisCharts ? t.svgHeight = t.svgWidth / 1.61 : t.svgHeight = t.svgWidth / 1.2;
        t.svgWidth < 0 && (t.svgWidth = 0), t.svgHeight < 0 && (t.svgHeight = 0), p.setAttrs(t.dom.Paper.node, {
          width: t.svgWidth,
          height: t.svgHeight
        });
        var r = e.chart.sparkline.enabled ? 0 : t.axisCharts ? e.chart.parentHeightOffset : 0;
        t.dom.Paper.node.parentNode.parentNode.style.minHeight = t.svgHeight + r + "px", t.dom.elWrap.style.width = t.svgWidth + "px", t.dom.elWrap.style.height = t.svgHeight + "px";
      }
    }, {
      key: "shiftGraphPosition",
      value: function value() {
        var t = this.w.globals,
            e = t.translateY,
            i = {
          transform: "translate(" + t.translateX + ", " + e + ")"
        };
        p.setAttrs(t.dom.elGraphical.node, i), t.x2SpaceAvailable = t.svgWidth - t.dom.elGraphical.x() - t.gridWidth;
      }
    }, {
      key: "resizeNonAxisCharts",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = 0;
        "top" !== t.config.legend.position && "bottom" !== t.config.legend.position || (i = new rt(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
        var a = t.globals.dom.baseEl.querySelector(".apexcharts-radialbar .apexcharts-tracks"),
            s = t.globals.dom.baseEl.querySelector(".apexcharts-radialbar .apexcharts-datalabels-group"),
            r = 2 * t.globals.radialSize;

        if (a) {
          var n = g.getBoundingClientRect(a);

          if (r = n.bottom, s) {
            var o = g.getBoundingClientRect(s),
                l = Math.max(n.bottom, o.bottom) - n.top + o.height;
            r = Math.max(2 * t.globals.radialSize, l);
          }
        }

        var h = r + e.translateY + i + 20;
        e.dom.elLegendForeign && e.dom.elLegendForeign.setAttribute("height", h), e.dom.elWrap.style.height = h + "px", p.setAttrs(e.dom.Paper.node, {
          height: h
        }), e.dom.Paper.node.parentNode.parentNode.style.minHeight = h + "px";
      }
    }, {
      key: "coreCalculations",
      value: function value() {
        new V(this.ctx).init();
      }
    }, {
      key: "resetGlobals",
      value: function value() {
        var t = this,
            e = function e() {
          return t.w.config.series.map(function (t) {
            return [];
          });
        },
            i = new z(),
            a = this.w.globals;

        i.initGlobalVars(a), a.seriesXvalues = e(), a.seriesYvalues = e();
      }
    }, {
      key: "isMultipleY",
      value: function value() {
        if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.globals.isMultipleYAxis = !0, !0;
      }
    }, {
      key: "xySettings",
      value: function value() {
        var t = null,
            e = this.w;

        if (e.globals.axisCharts) {
          if ("back" === e.config.xaxis.crosshairs.position) new q(this.ctx).drawXCrosshairs();
          if ("back" === e.config.yaxis[0].crosshairs.position) new q(this.ctx).drawYCrosshairs();

          if (t = new E(this.ctx).getCalculatedRatios(), "datetime" === e.config.xaxis.type && void 0 === e.config.xaxis.labels.formatter) {
            var i = new Lt(this.ctx),
                a = [];
            isFinite(e.globals.minX) && isFinite(e.globals.maxX) && !e.globals.isBarHorizontal ? a = i.calculateTimeScaleTicks(e.globals.minX, e.globals.maxX) : e.globals.isBarHorizontal && (a = i.calculateTimeScaleTicks(e.globals.minY, e.globals.maxY)), i.recalcDimensionsBasedOnFormat(a);
          }
        }

        return t;
      }
    }, {
      key: "setupBrushHandler",
      value: function value() {
        var t = this,
            e = this.w;

        if (e.config.chart.brush.enabled && "function" != typeof e.config.chart.events.selection) {
          var i = e.config.chart.brush.targets || [e.config.chart.brush.target];
          i.forEach(function (e) {
            var i = ApexCharts.getChartByID(e);
            i.w.globals.brushSource = t.ctx;

            var a = function a() {
              t.ctx.updateHelpers._updateOptions({
                chart: {
                  selection: {
                    xaxis: {
                      min: i.w.globals.minX,
                      max: i.w.globals.maxX
                    }
                  }
                }
              }, !1, !1);
            };

            "function" != typeof i.w.config.chart.events.zoomed && (i.w.config.chart.events.zoomed = function () {
              a();
            }), "function" != typeof i.w.config.chart.events.scrolled && (i.w.config.chart.events.scrolled = function () {
              a();
            });
          }), e.config.chart.events.selection = function (t, a) {
            i.forEach(function (t) {
              var i = ApexCharts.getChartByID(t),
                  s = g.clone(e.config.yaxis);
              e.config.chart.brush.autoScaleYaxis && (s = new B(i).autoScaleY(i, s, a));

              i.ctx.updateHelpers._updateOptions({
                xaxis: {
                  min: a.xaxis.min,
                  max: a.xaxis.max
                },
                yaxis: n({}, i.w.config.yaxis[0], {
                  min: s[0].min,
                  max: s[0].max
                })
              }, !1, !1, !1, !1);
            });
          };
        }
      }
    }]), t;
  }(),
      zt = function () {
    function i(t) {
      e(this, i), this.ctx = t, this.w = t.w;
    }

    return a(i, [{
      key: "_updateOptions",
      value: function value(e) {
        var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
            r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
            n = [this.ctx];
        s && (n = this.ctx.getSyncedCharts()), this.ctx.w.globals.isExecCalled && (n = [this.ctx], this.ctx.w.globals.isExecCalled = !1), n.forEach(function (s) {
          var n = s.w;
          return n.globals.shouldAnimate = a, i || (n.globals.resized = !0, n.globals.dataChanged = !0, a && s.series.getPreviousPaths()), e && "object" === t(e) && (s.config = new P(e), e = E.extendArrayProps(s.config, e), n.config = g.extend(n.config, e), r && (n.globals.lastXAxis = [], n.globals.lastYAxis = [], n.globals.initialConfig = g.extend({}, n.config), n.globals.initialSeries = JSON.parse(JSON.stringify(n.config.series)))), s.update(e);
        });
      }
    }, {
      key: "_updateSeries",
      value: function value(t, e) {
        var i,
            a = this,
            s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            r = this.w;
        return r.globals.shouldAnimate = e, r.globals.dataChanged = !0, r.globals.allSeriesCollapsed && (r.globals.allSeriesCollapsed = !1), e && this.ctx.series.getPreviousPaths(), r.globals.axisCharts ? (0 === (i = t.map(function (t, e) {
          return a._extendSeries(t, e);
        })).length && (i = [{
          data: []
        }]), r.config.series = i) : r.config.series = t.slice(), s && (r.globals.initialConfig.series = JSON.parse(JSON.stringify(r.config.series)), r.globals.initialSeries = JSON.parse(JSON.stringify(r.config.series))), this.ctx.update();
      }
    }, {
      key: "_extendSeries",
      value: function value(t, e) {
        var i = this.w;
        return n({}, i.config.series[e], {
          name: t.name ? t.name : i.config.series[e] && i.config.series[e].name,
          type: t.type ? t.type : i.config.series[e] && i.config.series[e].type,
          data: t.data ? t.data : i.config.series[e] && i.config.series[e].data
        });
      }
    }, {
      key: "toggleDataPointSelection",
      value: function value(t, e) {
        var i = this.w,
            a = null,
            s = ".apexcharts-series[data\\:realIndex='".concat(t, "']");
        i.globals.axisCharts ? a = i.globals.dom.Paper.select("".concat(s, " path[j='").concat(e, "'], ").concat(s, " circle[j='").concat(e, "'], ").concat(s, " rect[j='").concat(e, "']")).members[0] : void 0 === e && (a = i.globals.dom.Paper.select("".concat(s, " path[j='").concat(t, "']")).members[0], ("pie" === i.config.chart.type || "donut" === i.config.chart.type) && new at(this.ctx).pieClicked(t));
        a ? new p(this.ctx).pathMouseDown(a, null) : console.warn("toggleDataPointSelection: Element not found");
        return a.node ? a.node : null;
      }
    }, {
      key: "forceXAxisUpdate",
      value: function value(t) {
        var e = this.w;

        if (["min", "max"].forEach(function (i) {
          void 0 !== t.xaxis[i] && (e.config.xaxis[i] = t.xaxis[i], e.globals.lastXAxis[i] = t.xaxis[i]);
        }), t.xaxis.categories && t.xaxis.categories.length && (e.config.xaxis.categories = t.xaxis.categories), e.config.xaxis.convertedCatToNumeric) {
          var i = new L(t);
          t = i.convertCatToNumericXaxis(t, this.ctx);
        }

        return t;
      }
    }, {
      key: "forceYAxisUpdate",
      value: function value(t) {
        var e = this.w;
        return e.config.chart.stacked && "100%" === e.config.chart.stackType && (Array.isArray(t.yaxis) ? t.yaxis.forEach(function (e, i) {
          t.yaxis[i].min = 0, t.yaxis[i].max = 100;
        }) : (t.yaxis.min = 0, t.yaxis.max = 100)), t;
      }
    }, {
      key: "revertDefaultAxisMinMax",
      value: function value() {
        var t = this,
            e = this.w;
        e.config.xaxis.min = e.globals.lastXAxis.min, e.config.xaxis.max = e.globals.lastXAxis.max, e.config.yaxis.map(function (i, a) {
          e.globals.zoomed ? void 0 !== e.globals.lastYAxis[a] && (i.min = e.globals.lastYAxis[a].min, i.max = e.globals.lastYAxis[a].max) : void 0 !== t.ctx.opts.yaxis[a] && (i.min = t.ctx.opts.yaxis[a].min, i.max = t.ctx.opts.yaxis[a].max);
        });
      }
    }]), i;
  }();

  y = "undefined" != typeof window ? window : void 0, w = function w(e, i) {
    var a = (void 0 !== this ? this : e).SVG = function (t) {
      if (a.supported) return t = new a.Doc(t), a.parser.draw || a.prepare(), t;
    };

    if (a.ns = "http://www.w3.org/2000/svg", a.xmlns = "http://www.w3.org/2000/xmlns/", a.xlink = "http://www.w3.org/1999/xlink", a.svgjs = "http://svgjs.com/svgjs", a.supported = !0, !a.supported) return !1;
    a.did = 1e3, a.eid = function (t) {
      return "Svgjs" + d(t) + a.did++;
    }, a.create = function (t) {
      var e = i.createElementNS(this.ns, t);
      return e.setAttribute("id", this.eid(t)), e;
    }, a.extend = function () {
      var t, e, i, s;

      for (e = (t = [].slice.call(arguments)).pop(), s = t.length - 1; s >= 0; s--) {
        if (t[s]) for (i in e) {
          t[s].prototype[i] = e[i];
        }
      }

      a.Set && a.Set.inherit && a.Set.inherit();
    }, a.invent = function (t) {
      var e = "function" == typeof t.create ? t.create : function () {
        this.constructor.call(this, a.create(t.create));
      };
      return t.inherit && (e.prototype = new t.inherit()), t.extend && a.extend(e, t.extend), t.construct && a.extend(t.parent || a.Container, t.construct), e;
    }, a.adopt = function (t) {
      return t ? t.instance ? t.instance : ((i = "svg" == t.nodeName ? t.parentNode instanceof e.SVGElement ? new a.Nested() : new a.Doc() : "linearGradient" == t.nodeName ? new a.Gradient("linear") : "radialGradient" == t.nodeName ? new a.Gradient("radial") : a[d(t.nodeName)] ? new a[d(t.nodeName)]() : new a.Element(t)).type = t.nodeName, i.node = t, t.instance = i, i instanceof a.Doc && i.namespace().defs(), i.setData(JSON.parse(t.getAttribute("svgjs:data")) || {}), i) : null;
      var i;
    }, a.prepare = function () {
      var t = i.getElementsByTagName("body")[0],
          e = (t ? new a.Doc(t) : a.adopt(i.documentElement).nested()).size(2, 0);
      a.parser = {
        body: t || i.documentElement,
        draw: e.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,
        poly: e.polyline().node,
        path: e.path().node,
        "native": a.create("svg")
      };
    }, a.parser = {
      "native": a.create("svg")
    }, i.addEventListener("DOMContentLoaded", function () {
      a.parser.draw || a.prepare();
    }, !1), a.regex = {
      numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
      hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
      rgb: /rgb\((\d+),(\d+),(\d+)\)/,
      reference: /#([a-z0-9\-_]+)/i,
      transforms: /\)\s*,?\s*/,
      whitespace: /\s/g,
      isHex: /^#[a-f0-9]{3,6}$/i,
      isRgb: /^rgb\(/,
      isCss: /[^:]+:[^;]+;?/,
      isBlank: /^(\s+)?$/,
      isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
      isPercent: /^-?[\d\.]+%$/,
      isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
      delimiter: /[\s,]+/,
      hyphen: /([^e])\-/gi,
      pathLetters: /[MLHVCSQTAZ]/gi,
      isPathLetter: /[MLHVCSQTAZ]/i,
      numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
      dots: /\./g
    }, a.utils = {
      map: function map(t, e) {
        var i,
            a = t.length,
            s = [];

        for (i = 0; i < a; i++) {
          s.push(e(t[i]));
        }

        return s;
      },
      filter: function filter(t, e) {
        var i,
            a = t.length,
            s = [];

        for (i = 0; i < a; i++) {
          e(t[i]) && s.push(t[i]);
        }

        return s;
      },
      filterSVGElements: function filterSVGElements(t) {
        return this.filter(t, function (t) {
          return t instanceof e.SVGElement;
        });
      }
    }, a.defaults = {
      attrs: {
        "fill-opacity": 1,
        "stroke-opacity": 1,
        "stroke-width": 0,
        "stroke-linejoin": "miter",
        "stroke-linecap": "butt",
        fill: "#000000",
        stroke: "#000000",
        opacity: 1,
        x: 0,
        y: 0,
        cx: 0,
        cy: 0,
        width: 0,
        height: 0,
        r: 0,
        rx: 0,
        ry: 0,
        offset: 0,
        "stop-opacity": 1,
        "stop-color": "#000000",
        "font-size": 16,
        "font-family": "Helvetica, Arial, sans-serif",
        "text-anchor": "start"
      }
    }, a.Color = function (e) {
      var i, s;
      this.r = 0, this.g = 0, this.b = 0, e && ("string" == typeof e ? a.regex.isRgb.test(e) ? (i = a.regex.rgb.exec(e.replace(a.regex.whitespace, "")), this.r = parseInt(i[1]), this.g = parseInt(i[2]), this.b = parseInt(i[3])) : a.regex.isHex.test(e) && (i = a.regex.hex.exec(4 == (s = e).length ? ["#", s.substring(1, 2), s.substring(1, 2), s.substring(2, 3), s.substring(2, 3), s.substring(3, 4), s.substring(3, 4)].join("") : s), this.r = parseInt(i[1], 16), this.g = parseInt(i[2], 16), this.b = parseInt(i[3], 16)) : "object" === t(e) && (this.r = e.r, this.g = e.g, this.b = e.b));
    }, a.extend(a.Color, {
      toString: function toString() {
        return this.toHex();
      },
      toHex: function toHex() {
        return "#" + g(this.r) + g(this.g) + g(this.b);
      },
      toRgb: function toRgb() {
        return "rgb(" + [this.r, this.g, this.b].join() + ")";
      },
      brightness: function brightness() {
        return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11;
      },
      morph: function morph(t) {
        return this.destination = new a.Color(t), this;
      },
      at: function at(t) {
        return this.destination ? (t = t < 0 ? 0 : t > 1 ? 1 : t, new a.Color({
          r: ~~(this.r + (this.destination.r - this.r) * t),
          g: ~~(this.g + (this.destination.g - this.g) * t),
          b: ~~(this.b + (this.destination.b - this.b) * t)
        })) : this;
      }
    }), a.Color.test = function (t) {
      return t += "", a.regex.isHex.test(t) || a.regex.isRgb.test(t);
    }, a.Color.isRgb = function (t) {
      return t && "number" == typeof t.r && "number" == typeof t.g && "number" == typeof t.b;
    }, a.Color.isColor = function (t) {
      return a.Color.isRgb(t) || a.Color.test(t);
    }, a.Array = function (t, e) {
      0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()), this.value = this.parse(t);
    }, a.extend(a.Array, {
      toString: function toString() {
        return this.value.join(" ");
      },
      valueOf: function valueOf() {
        return this.value;
      },
      parse: function parse(t) {
        return t = t.valueOf(), Array.isArray(t) ? t : this.split(t);
      }
    }), a.PointArray = function (t, e) {
      a.Array.call(this, t, e || [[0, 0]]);
    }, a.PointArray.prototype = new a.Array(), a.PointArray.prototype.constructor = a.PointArray;

    for (var s = {
      M: function M(t, e, i) {
        return e.x = i.x = t[0], e.y = i.y = t[1], ["M", e.x, e.y];
      },
      L: function L(t, e) {
        return e.x = t[0], e.y = t[1], ["L", t[0], t[1]];
      },
      H: function H(t, e) {
        return e.x = t[0], ["H", t[0]];
      },
      V: function V(t, e) {
        return e.y = t[0], ["V", t[0]];
      },
      C: function C(t, e) {
        return e.x = t[4], e.y = t[5], ["C", t[0], t[1], t[2], t[3], t[4], t[5]];
      },
      Q: function Q(t, e) {
        return e.x = t[2], e.y = t[3], ["Q", t[0], t[1], t[2], t[3]];
      },
      Z: function Z(t, e, i) {
        return e.x = i.x, e.y = i.y, ["Z"];
      }
    }, r = "mlhvqtcsaz".split(""), n = 0, o = r.length; n < o; ++n) {
      s[r[n]] = function (t) {
        return function (e, i, a) {
          if ("H" == t) e[0] = e[0] + i.x;else if ("V" == t) e[0] = e[0] + i.y;else if ("A" == t) e[5] = e[5] + i.x, e[6] = e[6] + i.y;else for (var r = 0, n = e.length; r < n; ++r) {
            e[r] = e[r] + (r % 2 ? i.y : i.x);
          }
          return s[t](e, i, a);
        };
      }(r[n].toUpperCase());
    }

    a.PathArray = function (t, e) {
      a.Array.call(this, t, e || [["M", 0, 0]]);
    }, a.PathArray.prototype = new a.Array(), a.PathArray.prototype.constructor = a.PathArray, a.extend(a.PathArray, {
      toString: function toString() {
        return function (t) {
          for (var e = 0, i = t.length, a = ""; e < i; e++) {
            a += t[e][0], null != t[e][1] && (a += t[e][1], null != t[e][2] && (a += " ", a += t[e][2], null != t[e][3] && (a += " ", a += t[e][3], a += " ", a += t[e][4], null != t[e][5] && (a += " ", a += t[e][5], a += " ", a += t[e][6], null != t[e][7] && (a += " ", a += t[e][7])))));
          }

          return a + " ";
        }(this.value);
      },
      move: function move(t, e) {
        var i = this.bbox();
        return i.x, i.y, this;
      },
      at: function at(t) {
        if (!this.destination) return this;
        var e,
            i,
            s,
            r,
            n = this.value,
            o = this.destination.value,
            l = [],
            h = new a.PathArray();

        for (e = 0, i = n.length; e < i; e++) {
          for (l[e] = [n[e][0]], s = 1, r = n[e].length; s < r; s++) {
            l[e][s] = n[e][s] + (o[e][s] - n[e][s]) * t;
          }

          "A" === l[e][0] && (l[e][4] = +(0 != l[e][4]), l[e][5] = +(0 != l[e][5]));
        }

        return h.value = l, h;
      },
      parse: function parse(t) {
        if (t instanceof a.PathArray) return t.valueOf();
        var e,
            i = {
          M: 2,
          L: 2,
          H: 1,
          V: 1,
          C: 6,
          S: 4,
          Q: 4,
          T: 2,
          A: 7,
          Z: 0
        };
        t = "string" == typeof t ? t.replace(a.regex.numbersWithDots, h).replace(a.regex.pathLetters, " $& ").replace(a.regex.hyphen, "$1 -").trim().split(a.regex.delimiter) : t.reduce(function (t, e) {
          return [].concat.call(t, e);
        }, []);
        var r = [],
            n = new a.Point(),
            o = new a.Point(),
            l = 0,
            c = t.length;

        do {
          a.regex.isPathLetter.test(t[l]) ? (e = t[l], ++l) : "M" == e ? e = "L" : "m" == e && (e = "l"), r.push(s[e].call(null, t.slice(l, l += i[e.toUpperCase()]).map(parseFloat), n, o));
        } while (c > l);

        return r;
      },
      bbox: function bbox() {
        return a.parser.draw || a.prepare(), a.parser.path.setAttribute("d", this.toString()), a.parser.path.getBBox();
      }
    }), a.Number = a.invent({
      create: function create(t, e) {
        this.value = 0, this.unit = e || "", "number" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -34e37 : 34e37 : "string" == typeof t ? (e = t.match(a.regex.numberAndUnit)) && (this.value = parseFloat(e[1]), "%" == e[5] ? this.value /= 100 : "s" == e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof a.Number && (this.value = t.valueOf(), this.unit = t.unit);
      },
      extend: {
        toString: function toString() {
          return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
        },
        toJSON: function toJSON() {
          return this.toString();
        },
        valueOf: function valueOf() {
          return this.value;
        },
        plus: function plus(t) {
          return t = new a.Number(t), new a.Number(this + t, this.unit || t.unit);
        },
        minus: function minus(t) {
          return t = new a.Number(t), new a.Number(this - t, this.unit || t.unit);
        },
        times: function times(t) {
          return t = new a.Number(t), new a.Number(this * t, this.unit || t.unit);
        },
        divide: function divide(t) {
          return t = new a.Number(t), new a.Number(this / t, this.unit || t.unit);
        },
        to: function to(t) {
          var e = new a.Number(this);
          return "string" == typeof t && (e.unit = t), e;
        },
        morph: function morph(t) {
          return this.destination = new a.Number(t), t.relative && (this.destination.value += this.value), this;
        },
        at: function at(t) {
          return this.destination ? new a.Number(this.destination).minus(this).times(t).plus(this) : this;
        }
      }
    }), a.Element = a.invent({
      create: function create(t) {
        this._stroke = a.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t) && (this.type = t.nodeName, this.node.instance = this, this._stroke = t.getAttribute("stroke") || this._stroke);
      },
      extend: {
        x: function x(t) {
          return this.attr("x", t);
        },
        y: function y(t) {
          return this.attr("y", t);
        },
        cx: function cx(t) {
          return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2);
        },
        cy: function cy(t) {
          return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2);
        },
        move: function move(t, e) {
          return this.x(t).y(e);
        },
        center: function center(t, e) {
          return this.cx(t).cy(e);
        },
        width: function width(t) {
          return this.attr("width", t);
        },
        height: function height(t) {
          return this.attr("height", t);
        },
        size: function size(t, e) {
          var i = u(this, t, e);
          return this.width(new a.Number(i.width)).height(new a.Number(i.height));
        },
        clone: function clone(t) {
          this.writeDataToDom();
          var e = x(this.node.cloneNode(!0));
          return t ? t.add(e) : this.after(e), e;
        },
        remove: function remove() {
          return this.parent() && this.parent().removeElement(this), this;
        },
        replace: function replace(t) {
          return this.after(t).remove(), t;
        },
        addTo: function addTo(t) {
          return t.put(this);
        },
        putIn: function putIn(t) {
          return t.add(this);
        },
        id: function id(t) {
          return this.attr("id", t);
        },
        show: function show() {
          return this.style("display", "");
        },
        hide: function hide() {
          return this.style("display", "none");
        },
        visible: function visible() {
          return "none" != this.style("display");
        },
        toString: function toString() {
          return this.attr("id");
        },
        classes: function classes() {
          var t = this.attr("class");
          return null == t ? [] : t.trim().split(a.regex.delimiter);
        },
        hasClass: function hasClass(t) {
          return -1 != this.classes().indexOf(t);
        },
        addClass: function addClass(t) {
          if (!this.hasClass(t)) {
            var e = this.classes();
            e.push(t), this.attr("class", e.join(" "));
          }

          return this;
        },
        removeClass: function removeClass(t) {
          return this.hasClass(t) && this.attr("class", this.classes().filter(function (e) {
            return e != t;
          }).join(" ")), this;
        },
        toggleClass: function toggleClass(t) {
          return this.hasClass(t) ? this.removeClass(t) : this.addClass(t);
        },
        reference: function reference(t) {
          return a.get(this.attr(t));
        },
        parent: function parent(t) {
          var i = this;
          if (!i.node.parentNode) return null;
          if (i = a.adopt(i.node.parentNode), !t) return i;

          for (; i && i.node instanceof e.SVGElement;) {
            if ("string" == typeof t ? i.matches(t) : i instanceof t) return i;
            if (!i.node.parentNode || "#document" == i.node.parentNode.nodeName) return null;
            i = a.adopt(i.node.parentNode);
          }
        },
        doc: function doc() {
          return this instanceof a.Doc ? this : this.parent(a.Doc);
        },
        parents: function parents(t) {
          var e = [],
              i = this;

          do {
            if (!(i = i.parent(t)) || !i.node) break;
            e.push(i);
          } while (i.parent);

          return e;
        },
        matches: function matches(t) {
          return function (t, e) {
            return (t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector).call(t, e);
          }(this.node, t);
        },
        "native": function native() {
          return this.node;
        },
        svg: function svg(t) {
          var e = i.createElement("svg");
          if (!(t && this instanceof a.Parent)) return e.appendChild(t = i.createElement("svg")), this.writeDataToDom(), t.appendChild(this.node.cloneNode(!0)), e.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
          e.innerHTML = "<svg>" + t.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";

          for (var s = 0, r = e.firstChild.childNodes.length; s < r; s++) {
            this.node.appendChild(e.firstChild.firstChild);
          }

          return this;
        },
        writeDataToDom: function writeDataToDom() {
          return (this.each || this.lines) && (this.each ? this : this.lines()).each(function () {
            this.writeDataToDom();
          }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
        },
        setData: function setData(t) {
          return this.dom = t, this;
        },
        is: function is(t) {
          return function (t, e) {
            return t instanceof e;
          }(this, t);
        }
      }
    }), a.easing = {
      "-": function _(t) {
        return t;
      },
      "<>": function _(t) {
        return -Math.cos(t * Math.PI) / 2 + .5;
      },
      ">": function _(t) {
        return Math.sin(t * Math.PI / 2);
      },
      "<": function _(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, a.morph = function (t) {
      return function (e, i) {
        return new a.MorphObj(e, i).at(t);
      };
    }, a.Situation = a.invent({
      create: function create(t) {
        this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new a.Number(t.duration).valueOf(), this.delay = new a.Number(t.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
      }
    }), a.FX = a.invent({
      create: function create(t) {
        this._target = t, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
      },
      extend: {
        animate: function animate(e, i, s) {
          "object" === t(e) && (i = e.ease, s = e.delay, e = e.duration);
          var r = new a.Situation({
            duration: e || 1e3,
            delay: s || 0,
            ease: a.easing[i || "-"] || i
          });
          return this.queue(r), this;
        },
        target: function target(t) {
          return t && t instanceof a.Element ? (this._target = t, this) : this._target;
        },
        timeToAbsPos: function timeToAbsPos(t) {
          return (t - this.situation.start) / (this.situation.duration / this._speed);
        },
        absPosToTime: function absPosToTime(t) {
          return this.situation.duration / this._speed * t + this.situation.start;
        },
        startAnimFrame: function startAnimFrame() {
          this.stopAnimFrame(), this.animationFrame = e.requestAnimationFrame(function () {
            this.step();
          }.bind(this));
        },
        stopAnimFrame: function stopAnimFrame() {
          e.cancelAnimationFrame(this.animationFrame);
        },
        start: function start() {
          return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;
        },
        startCurrent: function startCurrent() {
          return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
        },
        queue: function queue(t) {
          return ("function" == typeof t || t instanceof a.Situation) && this.situations.push(t), this.situation || (this.situation = this.situations.shift()), this;
        },
        dequeue: function dequeue() {
          return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a.Situation ? this.start() : this.situation.call(this)), this;
        },
        initAnimations: function initAnimations() {
          var t,
              e,
              i,
              s = this.situation;
          if (s.init) return this;

          for (t in s.animations) {
            for (i = this.target()[t](), Array.isArray(i) || (i = [i]), Array.isArray(s.animations[t]) || (s.animations[t] = [s.animations[t]]), e = i.length; e--;) {
              s.animations[t][e] instanceof a.Number && (i[e] = new a.Number(i[e])), s.animations[t][e] = i[e].morph(s.animations[t][e]);
            }
          }

          for (t in s.attrs) {
            s.attrs[t] = new a.MorphObj(this.target().attr(t), s.attrs[t]);
          }

          for (t in s.styles) {
            s.styles[t] = new a.MorphObj(this.target().style(t), s.styles[t]);
          }

          return s.initialTransformation = this.target().matrixify(), s.init = !0, this;
        },
        clearQueue: function clearQueue() {
          return this.situations = [], this;
        },
        clearCurrent: function clearCurrent() {
          return this.situation = null, this;
        },
        stop: function stop(t, e) {
          var i = this.active;
          return this.active = !1, e && this.clearQueue(), t && this.situation && (!i && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
        },
        after: function after(t) {
          var e = this.last();
          return this.target().on("finished.fx", function i(a) {
            a.detail.situation == e && (t.call(this, e), this.off("finished.fx", i));
          }), this._callStart();
        },
        during: function during(t) {
          var e = this.last(),
              i = function i(_i3) {
            _i3.detail.situation == e && t.call(this, _i3.detail.pos, a.morph(_i3.detail.pos), _i3.detail.eased, e);
          };

          return this.target().off("during.fx", i).on("during.fx", i), this.after(function () {
            this.off("during.fx", i);
          }), this._callStart();
        },
        afterAll: function afterAll(t) {
          var e = function e(i) {
            t.call(this), this.off("allfinished.fx", e);
          };

          return this.target().off("allfinished.fx", e).on("allfinished.fx", e), this._callStart();
        },
        last: function last() {
          return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
        },
        add: function add(t, e, i) {
          return this.last()[i || "animations"][t] = e, this._callStart();
        },
        step: function step(t) {
          var e, i, a;
          t || (this.absPos = this.timeToAbsPos(+new Date())), !1 !== this.situation.loops ? (e = Math.max(this.absPos, 0), i = Math.floor(e), !0 === this.situation.loops || i < this.situation.loops ? (this.pos = e - i, a = this.situation.loop, this.situation.loop = i) : (this.absPos = this.situation.loops, this.pos = 1, a = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
          var s = this.situation.ease(this.pos);

          for (var r in this.situation.once) {
            r > this.lastPos && r <= s && (this.situation.once[r].call(this.target(), this.pos, s), delete this.situation.once[r]);
          }

          return this.active && this.target().fire("during", {
            pos: this.pos,
            eased: s,
            fx: this,
            situation: this.situation
          }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", {
            fx: this,
            situation: this.situation
          }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s, this) : this;
        },
        eachAt: function eachAt() {
          var t,
              e,
              i,
              s = this,
              r = this.target(),
              n = this.situation;

          for (t in n.animations) {
            i = [].concat(n.animations[t]).map(function (t) {
              return "string" != typeof t && t.at ? t.at(n.ease(s.pos), s.pos) : t;
            }), r[t].apply(r, i);
          }

          for (t in n.attrs) {
            i = [t].concat(n.attrs[t]).map(function (t) {
              return "string" != typeof t && t.at ? t.at(n.ease(s.pos), s.pos) : t;
            }), r.attr.apply(r, i);
          }

          for (t in n.styles) {
            i = [t].concat(n.styles[t]).map(function (t) {
              return "string" != typeof t && t.at ? t.at(n.ease(s.pos), s.pos) : t;
            }), r.style.apply(r, i);
          }

          if (n.transforms.length) {
            for (i = n.initialTransformation, t = 0, e = n.transforms.length; t < e; t++) {
              var o = n.transforms[t];
              o instanceof a.Matrix ? i = o.relative ? i.multiply(new a.Matrix().morph(o).at(n.ease(this.pos))) : i.morph(o).at(n.ease(this.pos)) : (o.relative || o.undo(i.extract()), i = i.multiply(o.at(n.ease(this.pos))));
            }

            r.matrix(i);
          }

          return this;
        },
        once: function once(t, e, i) {
          var a = this.last();
          return i || (t = a.ease(t)), a.once[t] = e, this;
        },
        _callStart: function _callStart() {
          return setTimeout(function () {
            this.start();
          }.bind(this), 0), this;
        }
      },
      parent: a.Element,
      construct: {
        animate: function animate(t, e, i) {
          return (this.fx || (this.fx = new a.FX(this))).animate(t, e, i);
        },
        delay: function delay(t) {
          return (this.fx || (this.fx = new a.FX(this))).delay(t);
        },
        stop: function stop(t, e) {
          return this.fx && this.fx.stop(t, e), this;
        },
        finish: function finish() {
          return this.fx && this.fx.finish(), this;
        }
      }
    }), a.MorphObj = a.invent({
      create: function create(t, e) {
        return a.Color.isColor(e) ? new a.Color(t).morph(e) : a.regex.delimiter.test(t) ? a.regex.pathLetters.test(t) ? new a.PathArray(t).morph(e) : new a.Array(t).morph(e) : a.regex.numberAndUnit.test(e) ? new a.Number(t).morph(e) : (this.value = t, void (this.destination = e));
      },
      extend: {
        at: function at(t, e) {
          return e < 1 ? this.value : this.destination;
        },
        valueOf: function valueOf() {
          return this.value;
        }
      }
    }), a.extend(a.FX, {
      attr: function attr(e, i, a) {
        if ("object" === t(e)) for (var s in e) {
          this.attr(s, e[s]);
        } else this.add(e, i, "attrs");
        return this;
      },
      plot: function plot(t, e, i, a) {
        return 4 == arguments.length ? this.plot([t, e, i, a]) : this.add("plot", new (this.target().morphArray)(t));
      }
    }), a.Box = a.invent({
      create: function create(e, i, s, r) {
        if (!("object" !== t(e) || e instanceof a.Element)) return a.Box.call(this, null != e.left ? e.left : e.x, null != e.top ? e.top : e.y, e.width, e.height);
        4 == arguments.length && (this.x = e, this.y = i, this.width = s, this.height = r), b(this);
      }
    }), a.BBox = a.invent({
      create: function create(t) {
        if (a.Box.apply(this, [].slice.call(arguments)), t instanceof a.Element) {
          var e;

          try {
            if (!i.documentElement.contains) {
              for (var s = t.node; s.parentNode;) {
                s = s.parentNode;
              }

              if (s != i) throw new Error("Element not in the dom");
            }

            e = t.node.getBBox();
          } catch (i) {
            if (t instanceof a.Shape) {
              a.parser.draw || a.prepare();
              var r = t.clone(a.parser.draw.instance).show();
              e = r.node.getBBox(), r.remove();
            } else e = {
              x: t.node.clientLeft,
              y: t.node.clientTop,
              width: t.node.clientWidth,
              height: t.node.clientHeight
            };
          }

          a.Box.call(this, e);
        }
      },
      inherit: a.Box,
      parent: a.Element,
      construct: {
        bbox: function bbox() {
          return new a.BBox(this);
        }
      }
    }), a.BBox.prototype.constructor = a.BBox, a.Matrix = a.invent({
      create: function create(e) {
        var i,
            s = p([1, 0, 0, 1, 0, 0]);

        for (e = e instanceof a.Element ? e.matrixify() : "string" == typeof e ? p(e.split(a.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p([].slice.call(arguments)) : Array.isArray(e) ? p(e) : "object" === t(e) ? e : s, i = v.length - 1; i >= 0; --i) {
          this[v[i]] = null != e[v[i]] ? e[v[i]] : s[v[i]];
        }
      },
      extend: {
        extract: function extract() {
          var t = f(this, 0, 1),
              e = (f(this, 1, 0), 180 / Math.PI * Math.atan2(t.y, t.x) - 90);
          return {
            x: this.e,
            y: this.f,
            transformedX: (this.e * Math.cos(e * Math.PI / 180) + this.f * Math.sin(e * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),
            transformedY: (this.f * Math.cos(e * Math.PI / 180) + this.e * Math.sin(-e * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),
            rotation: e,
            a: this.a,
            b: this.b,
            c: this.c,
            d: this.d,
            e: this.e,
            f: this.f,
            matrix: new a.Matrix(this)
          };
        },
        clone: function clone() {
          return new a.Matrix(this);
        },
        morph: function morph(t) {
          return this.destination = new a.Matrix(t), this;
        },
        multiply: function multiply(t) {
          return new a.Matrix(this["native"]().multiply(function (t) {
            return t instanceof a.Matrix || (t = new a.Matrix(t)), t;
          }(t)["native"]()));
        },
        inverse: function inverse() {
          return new a.Matrix(this["native"]().inverse());
        },
        translate: function translate(t, e) {
          return new a.Matrix(this["native"]().translate(t || 0, e || 0));
        },
        "native": function native() {
          for (var t = a.parser["native"].createSVGMatrix(), e = v.length - 1; e >= 0; e--) {
            t[v[e]] = this[v[e]];
          }

          return t;
        },
        toString: function toString() {
          return "matrix(" + m(this.a) + "," + m(this.b) + "," + m(this.c) + "," + m(this.d) + "," + m(this.e) + "," + m(this.f) + ")";
        }
      },
      parent: a.Element,
      construct: {
        ctm: function ctm() {
          return new a.Matrix(this.node.getCTM());
        },
        screenCTM: function screenCTM() {
          if (this instanceof a.Nested) {
            var t = this.rect(1, 1),
                e = t.node.getScreenCTM();
            return t.remove(), new a.Matrix(e);
          }

          return new a.Matrix(this.node.getScreenCTM());
        }
      }
    }), a.Point = a.invent({
      create: function create(e, i) {
        var a;
        a = Array.isArray(e) ? {
          x: e[0],
          y: e[1]
        } : "object" === t(e) ? {
          x: e.x,
          y: e.y
        } : null != e ? {
          x: e,
          y: null != i ? i : e
        } : {
          x: 0,
          y: 0
        }, this.x = a.x, this.y = a.y;
      },
      extend: {
        clone: function clone() {
          return new a.Point(this);
        },
        morph: function morph(t, e) {
          return this.destination = new a.Point(t, e), this;
        }
      }
    }), a.extend(a.Element, {
      point: function point(t, e) {
        return new a.Point(t, e).transform(this.screenCTM().inverse());
      }
    }), a.extend(a.Element, {
      attr: function attr(e, i, s) {
        if (null == e) {
          for (e = {}, s = (i = this.node.attributes).length - 1; s >= 0; s--) {
            e[i[s].nodeName] = a.regex.isNumber.test(i[s].nodeValue) ? parseFloat(i[s].nodeValue) : i[s].nodeValue;
          }

          return e;
        }

        if ("object" === t(e)) for (i in e) {
          this.attr(i, e[i]);
        } else if (null === i) this.node.removeAttribute(e);else {
          if (null == i) return null == (i = this.node.getAttribute(e)) ? a.defaults.attrs[e] : a.regex.isNumber.test(i) ? parseFloat(i) : i;
          "stroke-width" == e ? this.attr("stroke", parseFloat(i) > 0 ? this._stroke : null) : "stroke" == e && (this._stroke = i), "fill" != e && "stroke" != e || (a.regex.isImage.test(i) && (i = this.doc().defs().image(i, 0, 0)), i instanceof a.Image && (i = this.doc().defs().pattern(0, 0, function () {
            this.add(i);
          }))), "number" == typeof i ? i = new a.Number(i) : a.Color.isColor(i) ? i = new a.Color(i) : Array.isArray(i) && (i = new a.Array(i)), "leading" == e ? this.leading && this.leading(i) : "string" == typeof s ? this.node.setAttributeNS(s, e, i.toString()) : this.node.setAttribute(e, i.toString()), !this.rebuild || "font-size" != e && "x" != e || this.rebuild(e, i);
        }
        return this;
      }
    }), a.extend(a.Element, {
      transform: function transform(e, i) {
        var s;
        return "object" !== t(e) ? (s = new a.Matrix(this).extract(), "string" == typeof e ? s[e] : s) : (s = new a.Matrix(this), i = !!i || !!e.relative, null != e.a && (s = i ? s.multiply(new a.Matrix(e)) : new a.Matrix(e)), this.attr("transform", s));
      }
    }), a.extend(a.Element, {
      untransform: function untransform() {
        return this.attr("transform", null);
      },
      matrixify: function matrixify() {
        return (this.attr("transform") || "").split(a.regex.transforms).slice(0, -1).map(function (t) {
          var e = t.trim().split("(");
          return [e[0], e[1].split(a.regex.delimiter).map(function (t) {
            return parseFloat(t);
          })];
        }).reduce(function (t, e) {
          return "matrix" == e[0] ? t.multiply(p(e[1])) : t[e[0]].apply(t, e[1]);
        }, new a.Matrix());
      },
      toParent: function toParent(t) {
        if (this == t) return this;
        var e = this.screenCTM(),
            i = t.screenCTM().inverse();
        return this.addTo(t).untransform().transform(i.multiply(e)), this;
      },
      toDoc: function toDoc() {
        return this.toParent(this.doc());
      }
    }), a.Transformation = a.invent({
      create: function create(e, i) {
        if (arguments.length > 1 && "boolean" != typeof i) return this.constructor.call(this, [].slice.call(arguments));
        if (Array.isArray(e)) for (var a = 0, s = this.arguments.length; a < s; ++a) {
          this[this.arguments[a]] = e[a];
        } else if ("object" === t(e)) for (a = 0, s = this.arguments.length; a < s; ++a) {
          this[this.arguments[a]] = e[this.arguments[a]];
        }
        this.inversed = !1, !0 === i && (this.inversed = !0);
      }
    }), a.Translate = a.invent({
      parent: a.Matrix,
      inherit: a.Transformation,
      create: function create(t, e) {
        this.constructor.apply(this, [].slice.call(arguments));
      },
      extend: {
        arguments: ["transformedX", "transformedY"],
        method: "translate"
      }
    }), a.extend(a.Element, {
      style: function style(e, i) {
        if (0 == arguments.length) return this.node.style.cssText || "";
        if (arguments.length < 2) {
          if ("object" === t(e)) for (i in e) {
            this.style(i, e[i]);
          } else {
            if (!a.regex.isCss.test(e)) return this.node.style[c(e)];

            for (e = e.split(/\s*;\s*/).filter(function (t) {
              return !!t;
            }).map(function (t) {
              return t.split(/\s*:\s*/);
            }); i = e.pop();) {
              this.style(i[0], i[1]);
            }
          }
        } else this.node.style[c(e)] = null === i || a.regex.isBlank.test(i) ? "" : i;
        return this;
      }
    }), a.Parent = a.invent({
      create: function create(t) {
        this.constructor.call(this, t);
      },
      inherit: a.Element,
      extend: {
        children: function children() {
          return a.utils.map(a.utils.filterSVGElements(this.node.childNodes), function (t) {
            return a.adopt(t);
          });
        },
        add: function add(t, e) {
          return null == e ? this.node.appendChild(t.node) : t.node != this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this;
        },
        put: function put(t, e) {
          return this.add(t, e), t;
        },
        has: function has(t) {
          return this.index(t) >= 0;
        },
        index: function index(t) {
          return [].slice.call(this.node.childNodes).indexOf(t.node);
        },
        get: function get(t) {
          return a.adopt(this.node.childNodes[t]);
        },
        first: function first() {
          return this.get(0);
        },
        last: function last() {
          return this.get(this.node.childNodes.length - 1);
        },
        each: function each(t, e) {
          var i,
              s,
              r = this.children();

          for (i = 0, s = r.length; i < s; i++) {
            r[i] instanceof a.Element && t.apply(r[i], [i, r]), e && r[i] instanceof a.Container && r[i].each(t, e);
          }

          return this;
        },
        removeElement: function removeElement(t) {
          return this.node.removeChild(t.node), this;
        },
        clear: function clear() {
          for (; this.node.hasChildNodes();) {
            this.node.removeChild(this.node.lastChild);
          }

          return delete this._defs, this;
        },
        defs: function defs() {
          return this.doc().defs();
        }
      }
    }), a.extend(a.Parent, {
      ungroup: function ungroup(t, e) {
        return 0 === e || this instanceof a.Defs || this.node == a.parser.draw ? this : (t = t || (this instanceof a.Doc ? this : this.parent(a.Parent)), e = e || 1 / 0, this.each(function () {
          return this instanceof a.Defs ? this : this instanceof a.Parent ? this.ungroup(t, e - 1) : this.toParent(t);
        }), this.node.firstChild || this.remove(), this);
      },
      flatten: function flatten(t, e) {
        return this.ungroup(t, e);
      }
    }), a.Container = a.invent({
      create: function create(t) {
        this.constructor.call(this, t);
      },
      inherit: a.Parent
    }), a.ViewBox = a.invent({
      parent: a.Container,
      construct: {}
    }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function (t) {
      a.Element.prototype[t] = function (e) {
        return a.on(this.node, t, e), this;
      };
    }), a.listeners = [], a.handlerMap = [], a.listenerId = 0, a.on = function (t, e, i, s, r) {
      var n = i.bind(s || t.instance || t),
          o = (a.handlerMap.indexOf(t) + 1 || a.handlerMap.push(t)) - 1,
          l = e.split(".")[0],
          h = e.split(".")[1] || "*";
      a.listeners[o] = a.listeners[o] || {}, a.listeners[o][l] = a.listeners[o][l] || {}, a.listeners[o][l][h] = a.listeners[o][l][h] || {}, i._svgjsListenerId || (i._svgjsListenerId = ++a.listenerId), a.listeners[o][l][h][i._svgjsListenerId] = n, t.addEventListener(l, n, r || !1);
    }, a.off = function (t, e, i) {
      var s = a.handlerMap.indexOf(t),
          r = e && e.split(".")[0],
          n = e && e.split(".")[1],
          o = "";
      if (-1 != s) if (i) {
        if ("function" == typeof i && (i = i._svgjsListenerId), !i) return;
        a.listeners[s][r] && a.listeners[s][r][n || "*"] && (t.removeEventListener(r, a.listeners[s][r][n || "*"][i], !1), delete a.listeners[s][r][n || "*"][i]);
      } else if (n && r) {
        if (a.listeners[s][r] && a.listeners[s][r][n]) {
          for (i in a.listeners[s][r][n]) {
            a.off(t, [r, n].join("."), i);
          }

          delete a.listeners[s][r][n];
        }
      } else if (n) for (e in a.listeners[s]) {
        for (o in a.listeners[s][e]) {
          n === o && a.off(t, [e, n].join("."));
        }
      } else if (r) {
        if (a.listeners[s][r]) {
          for (o in a.listeners[s][r]) {
            a.off(t, [r, o].join("."));
          }

          delete a.listeners[s][r];
        }
      } else {
        for (e in a.listeners[s]) {
          a.off(t, e);
        }

        delete a.listeners[s], delete a.handlerMap[s];
      }
    }, a.extend(a.Element, {
      on: function on(t, e, i, s) {
        return a.on(this.node, t, e, i, s), this;
      },
      off: function off(t, e) {
        return a.off(this.node, t, e), this;
      },
      fire: function fire(t, i) {
        return t instanceof e.Event ? this.node.dispatchEvent(t) : this.node.dispatchEvent(t = new a.CustomEvent(t, {
          detail: i,
          cancelable: !0
        })), this._event = t, this;
      },
      event: function event() {
        return this._event;
      }
    }), a.Defs = a.invent({
      create: "defs",
      inherit: a.Container
    }), a.G = a.invent({
      create: "g",
      inherit: a.Container,
      extend: {
        x: function x(t) {
          return null == t ? this.transform("x") : this.transform({
            x: t - this.x()
          }, !0);
        }
      },
      construct: {
        group: function group() {
          return this.put(new a.G());
        }
      }
    }), a.Doc = a.invent({
      create: function create(t) {
        t && ("svg" == (t = "string" == typeof t ? i.getElementById(t) : t).nodeName ? this.constructor.call(this, t) : (this.constructor.call(this, a.create("svg")), t.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
      },
      inherit: a.Container,
      extend: {
        namespace: function namespace() {
          return this.attr({
            xmlns: a.ns,
            version: "1.1"
          }).attr("xmlns:xlink", a.xlink, a.xmlns).attr("xmlns:svgjs", a.svgjs, a.xmlns);
        },
        defs: function defs() {
          var t;
          return this._defs || ((t = this.node.getElementsByTagName("defs")[0]) ? this._defs = a.adopt(t) : this._defs = new a.Defs(), this.node.appendChild(this._defs.node)), this._defs;
        },
        parent: function parent() {
          return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
        },
        remove: function remove() {
          return this.parent() && this.parent().removeChild(this.node), this;
        },
        clear: function clear() {
          for (; this.node.hasChildNodes();) {
            this.node.removeChild(this.node.lastChild);
          }

          return delete this._defs, a.parser.draw && !a.parser.draw.parentNode && this.node.appendChild(a.parser.draw), this;
        },
        clone: function clone(t) {
          this.writeDataToDom();
          var e = this.node,
              i = x(e.cloneNode(!0));
          return t ? (t.node || t).appendChild(i.node) : e.parentNode.insertBefore(i.node, e.nextSibling), i;
        }
      }
    }), a.extend(a.Element, {}), a.Gradient = a.invent({
      create: function create(t) {
        this.constructor.call(this, a.create(t + "Gradient")), this.type = t;
      },
      inherit: a.Container,
      extend: {
        at: function at(t, e, i) {
          return this.put(new a.Stop()).update(t, e, i);
        },
        update: function update(t) {
          return this.clear(), "function" == typeof t && t.call(this, this), this;
        },
        fill: function fill() {
          return "url(#" + this.id() + ")";
        },
        toString: function toString() {
          return this.fill();
        },
        attr: function attr(t, e, i) {
          return "transform" == t && (t = "gradientTransform"), a.Container.prototype.attr.call(this, t, e, i);
        }
      },
      construct: {
        gradient: function gradient(t, e) {
          return this.defs().gradient(t, e);
        }
      }
    }), a.extend(a.Gradient, a.FX, {
      from: function from(t, e) {
        return "radial" == (this._target || this).type ? this.attr({
          fx: new a.Number(t),
          fy: new a.Number(e)
        }) : this.attr({
          x1: new a.Number(t),
          y1: new a.Number(e)
        });
      },
      to: function to(t, e) {
        return "radial" == (this._target || this).type ? this.attr({
          cx: new a.Number(t),
          cy: new a.Number(e)
        }) : this.attr({
          x2: new a.Number(t),
          y2: new a.Number(e)
        });
      }
    }), a.extend(a.Defs, {
      gradient: function gradient(t, e) {
        return this.put(new a.Gradient(t)).update(e);
      }
    }), a.Stop = a.invent({
      create: "stop",
      inherit: a.Element,
      extend: {
        update: function update(t) {
          return ("number" == typeof t || t instanceof a.Number) && (t = {
            offset: arguments[0],
            color: arguments[1],
            opacity: arguments[2]
          }), null != t.opacity && this.attr("stop-opacity", t.opacity), null != t.color && this.attr("stop-color", t.color), null != t.offset && this.attr("offset", new a.Number(t.offset)), this;
        }
      }
    }), a.Pattern = a.invent({
      create: "pattern",
      inherit: a.Container,
      extend: {
        fill: function fill() {
          return "url(#" + this.id() + ")";
        },
        update: function update(t) {
          return this.clear(), "function" == typeof t && t.call(this, this), this;
        },
        toString: function toString() {
          return this.fill();
        },
        attr: function attr(t, e, i) {
          return "transform" == t && (t = "patternTransform"), a.Container.prototype.attr.call(this, t, e, i);
        }
      },
      construct: {
        pattern: function pattern(t, e, i) {
          return this.defs().pattern(t, e, i);
        }
      }
    }), a.extend(a.Defs, {
      pattern: function pattern(t, e, i) {
        return this.put(new a.Pattern()).update(i).attr({
          x: 0,
          y: 0,
          width: t,
          height: e,
          patternUnits: "userSpaceOnUse"
        });
      }
    }), a.Shape = a.invent({
      create: function create(t) {
        this.constructor.call(this, t);
      },
      inherit: a.Element
    }), a.Symbol = a.invent({
      create: "symbol",
      inherit: a.Container,
      construct: {
        symbol: function symbol() {
          return this.put(new a.Symbol());
        }
      }
    }), a.Use = a.invent({
      create: "use",
      inherit: a.Shape,
      extend: {
        element: function element(t, e) {
          return this.attr("href", (e || "") + "#" + t, a.xlink);
        }
      },
      construct: {
        use: function use(t, e) {
          return this.put(new a.Use()).element(t, e);
        }
      }
    }), a.Rect = a.invent({
      create: "rect",
      inherit: a.Shape,
      construct: {
        rect: function rect(t, e) {
          return this.put(new a.Rect()).size(t, e);
        }
      }
    }), a.Circle = a.invent({
      create: "circle",
      inherit: a.Shape,
      construct: {
        circle: function circle(t) {
          return this.put(new a.Circle()).rx(new a.Number(t).divide(2)).move(0, 0);
        }
      }
    }), a.extend(a.Circle, a.FX, {
      rx: function rx(t) {
        return this.attr("r", t);
      },
      ry: function ry(t) {
        return this.rx(t);
      }
    }), a.Ellipse = a.invent({
      create: "ellipse",
      inherit: a.Shape,
      construct: {
        ellipse: function ellipse(t, e) {
          return this.put(new a.Ellipse()).size(t, e).move(0, 0);
        }
      }
    }), a.extend(a.Ellipse, a.Rect, a.FX, {
      rx: function rx(t) {
        return this.attr("rx", t);
      },
      ry: function ry(t) {
        return this.attr("ry", t);
      }
    }), a.extend(a.Circle, a.Ellipse, {
      x: function x(t) {
        return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());
      },
      y: function y(t) {
        return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());
      },
      cx: function cx(t) {
        return null == t ? this.attr("cx") : this.attr("cx", t);
      },
      cy: function cy(t) {
        return null == t ? this.attr("cy") : this.attr("cy", t);
      },
      width: function width(t) {
        return null == t ? 2 * this.rx() : this.rx(new a.Number(t).divide(2));
      },
      height: function height(t) {
        return null == t ? 2 * this.ry() : this.ry(new a.Number(t).divide(2));
      },
      size: function size(t, e) {
        var i = u(this, t, e);
        return this.rx(new a.Number(i.width).divide(2)).ry(new a.Number(i.height).divide(2));
      }
    }), a.Line = a.invent({
      create: "line",
      inherit: a.Shape,
      extend: {
        array: function array() {
          return new a.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
        },
        plot: function plot(t, e, i, s) {
          return null == t ? this.array() : (t = void 0 !== e ? {
            x1: t,
            y1: e,
            x2: i,
            y2: s
          } : new a.PointArray(t).toLine(), this.attr(t));
        },
        move: function move(t, e) {
          return this.attr(this.array().move(t, e).toLine());
        },
        size: function size(t, e) {
          var i = u(this, t, e);
          return this.attr(this.array().size(i.width, i.height).toLine());
        }
      },
      construct: {
        line: function line(t, e, i, s) {
          return a.Line.prototype.plot.apply(this.put(new a.Line()), null != t ? [t, e, i, s] : [0, 0, 0, 0]);
        }
      }
    }), a.Polyline = a.invent({
      create: "polyline",
      inherit: a.Shape,
      construct: {
        polyline: function polyline(t) {
          return this.put(new a.Polyline()).plot(t || new a.PointArray());
        }
      }
    }), a.Polygon = a.invent({
      create: "polygon",
      inherit: a.Shape,
      construct: {
        polygon: function polygon(t) {
          return this.put(new a.Polygon()).plot(t || new a.PointArray());
        }
      }
    }), a.extend(a.Polyline, a.Polygon, {
      array: function array() {
        return this._array || (this._array = new a.PointArray(this.attr("points")));
      },
      plot: function plot(t) {
        return null == t ? this.array() : this.clear().attr("points", "string" == typeof t ? t : this._array = new a.PointArray(t));
      },
      clear: function clear() {
        return delete this._array, this;
      },
      move: function move(t, e) {
        return this.attr("points", this.array().move(t, e));
      },
      size: function size(t, e) {
        var i = u(this, t, e);
        return this.attr("points", this.array().size(i.width, i.height));
      }
    }), a.extend(a.Line, a.Polyline, a.Polygon, {
      morphArray: a.PointArray,
      x: function x(t) {
        return null == t ? this.bbox().x : this.move(t, this.bbox().y);
      },
      y: function y(t) {
        return null == t ? this.bbox().y : this.move(this.bbox().x, t);
      },
      width: function width(t) {
        var e = this.bbox();
        return null == t ? e.width : this.size(t, e.height);
      },
      height: function height(t) {
        var e = this.bbox();
        return null == t ? e.height : this.size(e.width, t);
      }
    }), a.Path = a.invent({
      create: "path",
      inherit: a.Shape,
      extend: {
        morphArray: a.PathArray,
        array: function array() {
          return this._array || (this._array = new a.PathArray(this.attr("d")));
        },
        plot: function plot(t) {
          return null == t ? this.array() : this.clear().attr("d", "string" == typeof t ? t : this._array = new a.PathArray(t));
        },
        clear: function clear() {
          return delete this._array, this;
        }
      },
      construct: {
        path: function path(t) {
          return this.put(new a.Path()).plot(t || new a.PathArray());
        }
      }
    }), a.Image = a.invent({
      create: "image",
      inherit: a.Shape,
      extend: {
        load: function load(t) {
          if (!t) return this;
          var i = this,
              s = new e.Image();
          return a.on(s, "load", function () {
            a.off(s);
            var e = i.parent(a.Pattern);
            null !== e && (0 == i.width() && 0 == i.height() && i.size(s.width, s.height), e && 0 == e.width() && 0 == e.height() && e.size(i.width(), i.height()), "function" == typeof i._loaded && i._loaded.call(i, {
              width: s.width,
              height: s.height,
              ratio: s.width / s.height,
              url: t
            }));
          }), a.on(s, "error", function (t) {
            a.off(s), "function" == typeof i._error && i._error.call(i, t);
          }), this.attr("href", s.src = this.src = t, a.xlink);
        },
        loaded: function loaded(t) {
          return this._loaded = t, this;
        },
        error: function error(t) {
          return this._error = t, this;
        }
      },
      construct: {
        image: function image(t, e, i) {
          return this.put(new a.Image()).load(t).size(e || 0, i || e || 0);
        }
      }
    }), a.Text = a.invent({
      create: function create() {
        this.constructor.call(this, a.create("text")), this.dom.leading = new a.Number(1.3), this._rebuild = !0, this._build = !1, this.attr("font-family", a.defaults.attrs["font-family"]);
      },
      inherit: a.Shape,
      extend: {
        x: function x(t) {
          return null == t ? this.attr("x") : this.attr("x", t);
        },
        text: function text(t) {
          if (void 0 === t) {
            t = "";

            for (var e = this.node.childNodes, i = 0, s = e.length; i < s; ++i) {
              0 != i && 3 != e[i].nodeType && 1 == a.adopt(e[i]).dom.newLined && (t += "\n"), t += e[i].textContent;
            }

            return t;
          }

          if (this.clear().build(!0), "function" == typeof t) t.call(this, this);else {
            i = 0;

            for (var r = (t = t.split("\n")).length; i < r; i++) {
              this.tspan(t[i]).newLine();
            }
          }
          return this.build(!1).rebuild();
        },
        size: function size(t) {
          return this.attr("font-size", t).rebuild();
        },
        leading: function leading(t) {
          return null == t ? this.dom.leading : (this.dom.leading = new a.Number(t), this.rebuild());
        },
        lines: function lines() {
          var t = (this.textPath && this.textPath() || this).node,
              e = a.utils.map(a.utils.filterSVGElements(t.childNodes), function (t) {
            return a.adopt(t);
          });
          return new a.Set(e);
        },
        rebuild: function rebuild(t) {
          if ("boolean" == typeof t && (this._rebuild = t), this._rebuild) {
            var e = this,
                i = 0,
                s = this.dom.leading * new a.Number(this.attr("font-size"));
            this.lines().each(function () {
              this.dom.newLined && (e.textPath() || this.attr("x", e.attr("x")), "\n" == this.text() ? i += s : (this.attr("dy", s + i), i = 0));
            }), this.fire("rebuild");
          }

          return this;
        },
        build: function build(t) {
          return this._build = !!t, this;
        },
        setData: function setData(t) {
          return this.dom = t, this.dom.leading = new a.Number(t.leading || 1.3), this;
        }
      },
      construct: {
        text: function text(t) {
          return this.put(new a.Text()).text(t);
        },
        plain: function plain(t) {
          return this.put(new a.Text()).plain(t);
        }
      }
    }), a.Tspan = a.invent({
      create: "tspan",
      inherit: a.Shape,
      extend: {
        text: function text(t) {
          return null == t ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t ? t.call(this, this) : this.plain(t), this);
        },
        dx: function dx(t) {
          return this.attr("dx", t);
        },
        dy: function dy(t) {
          return this.attr("dy", t);
        },
        newLine: function newLine() {
          var t = this.parent(a.Text);
          return this.dom.newLined = !0, this.dy(t.dom.leading * t.attr("font-size")).attr("x", t.x());
        }
      }
    }), a.extend(a.Text, a.Tspan, {
      plain: function plain(t) {
        return !1 === this._build && this.clear(), this.node.appendChild(i.createTextNode(t)), this;
      },
      tspan: function tspan(t) {
        var e = (this.textPath && this.textPath() || this).node,
            i = new a.Tspan();
        return !1 === this._build && this.clear(), e.appendChild(i.node), i.text(t);
      },
      clear: function clear() {
        for (var t = (this.textPath && this.textPath() || this).node; t.hasChildNodes();) {
          t.removeChild(t.lastChild);
        }

        return this;
      },
      length: function length() {
        return this.node.getComputedTextLength();
      }
    }), a.TextPath = a.invent({
      create: "textPath",
      inherit: a.Parent,
      parent: a.Text,
      construct: {
        morphArray: a.PathArray,
        array: function array() {
          var t = this.track();
          return t ? t.array() : null;
        },
        plot: function plot(t) {
          var e = this.track(),
              i = null;
          return e && (i = e.plot(t)), null == t ? i : this;
        },
        track: function track() {
          var t = this.textPath();
          if (t) return t.reference("href");
        },
        textPath: function textPath() {
          if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return a.adopt(this.node.firstChild);
        }
      }
    }), a.Nested = a.invent({
      create: function create() {
        this.constructor.call(this, a.create("svg")), this.style("overflow", "visible");
      },
      inherit: a.Container,
      construct: {
        nested: function nested() {
          return this.put(new a.Nested());
        }
      }
    });
    var l = {
      stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"],
      fill: ["color", "opacity", "rule"],
      prefix: function prefix(t, e) {
        return "color" == e ? t : t + "-" + e;
      }
    };

    function h(t, e, i, s) {
      return i + s.replace(a.regex.dots, " .");
    }

    function c(t) {
      return t.toLowerCase().replace(/-(.)/g, function (t, e) {
        return e.toUpperCase();
      });
    }

    function d(t) {
      return t.charAt(0).toUpperCase() + t.slice(1);
    }

    function g(t) {
      var e = t.toString(16);
      return 1 == e.length ? "0" + e : e;
    }

    function u(t, e, i) {
      if (null == e || null == i) {
        var a = t.bbox();
        null == e ? e = a.width / a.height * i : null == i && (i = a.height / a.width * e);
      }

      return {
        width: e,
        height: i
      };
    }

    function f(t, e, i) {
      return {
        x: e * t.a + i * t.c + 0,
        y: e * t.b + i * t.d + 0
      };
    }

    function p(t) {
      return {
        a: t[0],
        b: t[1],
        c: t[2],
        d: t[3],
        e: t[4],
        f: t[5]
      };
    }

    function x(t) {
      for (var i = t.childNodes.length - 1; i >= 0; i--) {
        t.childNodes[i] instanceof e.SVGElement && x(t.childNodes[i]);
      }

      return a.adopt(t).id(a.eid(t.nodeName));
    }

    function b(t) {
      return null == t.x && (t.x = 0, t.y = 0, t.width = 0, t.height = 0), t.w = t.width, t.h = t.height, t.x2 = t.x + t.width, t.y2 = t.y + t.height, t.cx = t.x + t.width / 2, t.cy = t.y + t.height / 2, t;
    }

    function m(t) {
      return Math.abs(t) > 1e-37 ? t : 0;
    }

    ["fill", "stroke"].forEach(function (t) {
      var e,
          i = {};
      i[t] = function (i) {
        if (void 0 === i) return this;
        if ("string" == typeof i || a.Color.isRgb(i) || i && "function" == typeof i.fill) this.attr(t, i);else for (e = l[t].length - 1; e >= 0; e--) {
          null != i[l[t][e]] && this.attr(l.prefix(t, l[t][e]), i[l[t][e]]);
        }
        return this;
      }, a.extend(a.Element, a.FX, i);
    }), a.extend(a.Element, a.FX, {
      translate: function translate(t, e) {
        return this.transform({
          x: t,
          y: e
        });
      },
      matrix: function matrix(t) {
        return this.attr("transform", new a.Matrix(6 == arguments.length ? [].slice.call(arguments) : t));
      },
      opacity: function opacity(t) {
        return this.attr("opacity", t);
      },
      dx: function dx(t) {
        return this.x(new a.Number(t).plus(this instanceof a.FX ? 0 : this.x()), !0);
      },
      dy: function dy(t) {
        return this.y(new a.Number(t).plus(this instanceof a.FX ? 0 : this.y()), !0);
      }
    }), a.extend(a.Path, {
      length: function length() {
        return this.node.getTotalLength();
      },
      pointAt: function pointAt(t) {
        return this.node.getPointAtLength(t);
      }
    }), a.Set = a.invent({
      create: function create(t) {
        Array.isArray(t) ? this.members = t : this.clear();
      },
      extend: {
        add: function add() {
          var t,
              e,
              i = [].slice.call(arguments);

          for (t = 0, e = i.length; t < e; t++) {
            this.members.push(i[t]);
          }

          return this;
        },
        remove: function remove(t) {
          var e = this.index(t);
          return e > -1 && this.members.splice(e, 1), this;
        },
        each: function each(t) {
          for (var e = 0, i = this.members.length; e < i; e++) {
            t.apply(this.members[e], [e, this.members]);
          }

          return this;
        },
        clear: function clear() {
          return this.members = [], this;
        },
        length: function length() {
          return this.members.length;
        },
        has: function has(t) {
          return this.index(t) >= 0;
        },
        index: function index(t) {
          return this.members.indexOf(t);
        },
        get: function get(t) {
          return this.members[t];
        },
        first: function first() {
          return this.get(0);
        },
        last: function last() {
          return this.get(this.members.length - 1);
        },
        valueOf: function valueOf() {
          return this.members;
        }
      },
      construct: {
        set: function set(t) {
          return new a.Set(t);
        }
      }
    }), a.FX.Set = a.invent({
      create: function create(t) {
        this.set = t;
      }
    }), a.Set.inherit = function () {
      var t = [];

      for (var e in a.Shape.prototype) {
        "function" == typeof a.Shape.prototype[e] && "function" != typeof a.Set.prototype[e] && t.push(e);
      }

      for (var e in t.forEach(function (t) {
        a.Set.prototype[t] = function () {
          for (var e = 0, i = this.members.length; e < i; e++) {
            this.members[e] && "function" == typeof this.members[e][t] && this.members[e][t].apply(this.members[e], arguments);
          }

          return "animate" == t ? this.fx || (this.fx = new a.FX.Set(this)) : this;
        };
      }), t = [], a.FX.prototype) {
        "function" == typeof a.FX.prototype[e] && "function" != typeof a.FX.Set.prototype[e] && t.push(e);
      }

      t.forEach(function (t) {
        a.FX.Set.prototype[t] = function () {
          for (var e = 0, i = this.set.members.length; e < i; e++) {
            this.set.members[e].fx[t].apply(this.set.members[e].fx, arguments);
          }

          return this;
        };
      });
    }, a.extend(a.Element, {}), a.extend(a.Element, {
      remember: function remember(e, i) {
        if ("object" === t(arguments[0])) for (var i in e) {
          this.remember(i, e[i]);
        } else {
          if (1 == arguments.length) return this.memory()[e];
          this.memory()[e] = i;
        }
        return this;
      },
      forget: function forget() {
        if (0 == arguments.length) this._memory = {};else for (var t = arguments.length - 1; t >= 0; t--) {
          delete this.memory()[arguments[t]];
        }
        return this;
      },
      memory: function memory() {
        return this._memory || (this._memory = {});
      }
    }), a.get = function (t) {
      var e = i.getElementById(function (t) {
        var e = (t || "").toString().match(a.regex.reference);
        if (e) return e[1];
      }(t) || t);
      return a.adopt(e);
    }, a.select = function (t, e) {
      return new a.Set(a.utils.map((e || i).querySelectorAll(t), function (t) {
        return a.adopt(t);
      }));
    }, a.extend(a.Parent, {
      select: function select(t) {
        return a.select(t, this.node);
      }
    });
    var v = "abcdef".split("");

    if ("function" != typeof e.CustomEvent) {
      var y = function y(t, e) {
        e = e || {
          bubbles: !1,
          cancelable: !1,
          detail: void 0
        };
        var a = i.createEvent("CustomEvent");
        return a.initCustomEvent(t, e.bubbles, e.cancelable, e.detail), a;
      };

      y.prototype = e.Event.prototype, a.CustomEvent = y;
    } else a.CustomEvent = e.CustomEvent;

    return a;
  },  true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return w(y, y.document);
  }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined,
  /*! svg.filter.js - v2.0.2 - 2016-02-24
    * https://github.com/wout/svg.filter.js
    * Copyright (c) 2016 Wout Fierens; Licensed MIT */
  function () {
    SVG.Filter = SVG.invent({
      create: "filter",
      inherit: SVG.Parent,
      extend: {
        source: "SourceGraphic",
        sourceAlpha: "SourceAlpha",
        background: "BackgroundImage",
        backgroundAlpha: "BackgroundAlpha",
        fill: "FillPaint",
        stroke: "StrokePaint",
        autoSetIn: !0,
        put: function put(t, e) {
          return this.add(t, e), !t.attr("in") && this.autoSetIn && t.attr("in", this.source), t.attr("result") || t.attr("result", t), t;
        },
        blend: function blend(t, e, i) {
          return this.put(new SVG.BlendEffect(t, e, i));
        },
        colorMatrix: function colorMatrix(t, e) {
          return this.put(new SVG.ColorMatrixEffect(t, e));
        },
        convolveMatrix: function convolveMatrix(t) {
          return this.put(new SVG.ConvolveMatrixEffect(t));
        },
        componentTransfer: function componentTransfer(t) {
          return this.put(new SVG.ComponentTransferEffect(t));
        },
        composite: function composite(t, e, i) {
          return this.put(new SVG.CompositeEffect(t, e, i));
        },
        flood: function flood(t, e) {
          return this.put(new SVG.FloodEffect(t, e));
        },
        offset: function offset(t, e) {
          return this.put(new SVG.OffsetEffect(t, e));
        },
        image: function image(t) {
          return this.put(new SVG.ImageEffect(t));
        },
        merge: function merge() {
          var t = [void 0];

          for (var e in arguments) {
            t.push(arguments[e]);
          }

          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t))());
        },
        gaussianBlur: function gaussianBlur(t, e) {
          return this.put(new SVG.GaussianBlurEffect(t, e));
        },
        morphology: function morphology(t, e) {
          return this.put(new SVG.MorphologyEffect(t, e));
        },
        diffuseLighting: function diffuseLighting(t, e, i) {
          return this.put(new SVG.DiffuseLightingEffect(t, e, i));
        },
        displacementMap: function displacementMap(t, e, i, a, s) {
          return this.put(new SVG.DisplacementMapEffect(t, e, i, a, s));
        },
        specularLighting: function specularLighting(t, e, i, a) {
          return this.put(new SVG.SpecularLightingEffect(t, e, i, a));
        },
        tile: function tile() {
          return this.put(new SVG.TileEffect());
        },
        turbulence: function turbulence(t, e, i, a, s) {
          return this.put(new SVG.TurbulenceEffect(t, e, i, a, s));
        },
        toString: function toString() {
          return "url(#" + this.attr("id") + ")";
        }
      }
    }), SVG.extend(SVG.Defs, {
      filter: function filter(t) {
        var e = this.put(new SVG.Filter());
        return "function" == typeof t && t.call(e, e), e;
      }
    }), SVG.extend(SVG.Container, {
      filter: function filter(t) {
        return this.defs().filter(t);
      }
    }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
      filter: function filter(t) {
        return this.filterer = t instanceof SVG.Element ? t : this.doc().filter(t), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
      },
      unfilter: function unfilter(t) {
        return this.filterer && !0 === t && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
      }
    }), SVG.Effect = SVG.invent({
      create: function create() {
        this.constructor.call(this);
      },
      inherit: SVG.Element,
      extend: {
        "in": function _in(t) {
          return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t);
        },
        result: function result(t) {
          return null == t ? this.attr("result") : this.attr("result", t);
        },
        toString: function toString() {
          return this.result();
        }
      }
    }), SVG.ParentEffect = SVG.invent({
      create: function create() {
        this.constructor.call(this);
      },
      inherit: SVG.Parent,
      extend: {
        "in": function _in(t) {
          return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t);
        },
        result: function result(t) {
          return null == t ? this.attr("result") : this.attr("result", t);
        },
        toString: function toString() {
          return this.result();
        }
      }
    });
    var t = {
      blend: function blend(t, e) {
        return this.parent() && this.parent().blend(this, t, e);
      },
      colorMatrix: function colorMatrix(t, e) {
        return this.parent() && this.parent().colorMatrix(t, e)["in"](this);
      },
      convolveMatrix: function convolveMatrix(t) {
        return this.parent() && this.parent().convolveMatrix(t)["in"](this);
      },
      componentTransfer: function componentTransfer(t) {
        return this.parent() && this.parent().componentTransfer(t)["in"](this);
      },
      composite: function composite(t, e) {
        return this.parent() && this.parent().composite(this, t, e);
      },
      flood: function flood(t, e) {
        return this.parent() && this.parent().flood(t, e);
      },
      offset: function offset(t, e) {
        return this.parent() && this.parent().offset(t, e)["in"](this);
      },
      image: function image(t) {
        return this.parent() && this.parent().image(t);
      },
      merge: function merge() {
        return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
      },
      gaussianBlur: function gaussianBlur(t, e) {
        return this.parent() && this.parent().gaussianBlur(t, e)["in"](this);
      },
      morphology: function morphology(t, e) {
        return this.parent() && this.parent().morphology(t, e)["in"](this);
      },
      diffuseLighting: function diffuseLighting(t, e, i) {
        return this.parent() && this.parent().diffuseLighting(t, e, i)["in"](this);
      },
      displacementMap: function displacementMap(t, e, i, a) {
        return this.parent() && this.parent().displacementMap(this, t, e, i, a);
      },
      specularLighting: function specularLighting(t, e, i, a) {
        return this.parent() && this.parent().specularLighting(t, e, i, a)["in"](this);
      },
      tile: function tile() {
        return this.parent() && this.parent().tile()["in"](this);
      },
      turbulence: function turbulence(t, e, i, a, s) {
        return this.parent() && this.parent().turbulence(t, e, i, a, s)["in"](this);
      }
    };
    SVG.extend(SVG.Effect, t), SVG.extend(SVG.ParentEffect, t), SVG.ChildEffect = SVG.invent({
      create: function create() {
        this.constructor.call(this);
      },
      inherit: SVG.Element,
      extend: {
        "in": function _in(t) {
          this.attr("in", t);
        }
      }
    });
    var e = {
      blend: function blend(t, e, i) {
        this.attr({
          "in": t,
          in2: e,
          mode: i || "normal"
        });
      },
      colorMatrix: function colorMatrix(t, e) {
        "matrix" == t && (e = s(e)), this.attr({
          type: t,
          values: void 0 === e ? null : e
        });
      },
      convolveMatrix: function convolveMatrix(t) {
        t = s(t), this.attr({
          order: Math.sqrt(t.split(" ").length),
          kernelMatrix: t
        });
      },
      composite: function composite(t, e, i) {
        this.attr({
          "in": t,
          in2: e,
          operator: i
        });
      },
      flood: function flood(t, e) {
        this.attr("flood-color", t), null != e && this.attr("flood-opacity", e);
      },
      offset: function offset(t, e) {
        this.attr({
          dx: t,
          dy: e
        });
      },
      image: function image(t) {
        this.attr("href", t, SVG.xlink);
      },
      displacementMap: function displacementMap(t, e, i, a, s) {
        this.attr({
          "in": t,
          in2: e,
          scale: i,
          xChannelSelector: a,
          yChannelSelector: s
        });
      },
      gaussianBlur: function gaussianBlur(t, e) {
        null != t || null != e ? this.attr("stdDeviation", r(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
      },
      morphology: function morphology(t, e) {
        this.attr({
          operator: t,
          radius: e
        });
      },
      tile: function tile() {},
      turbulence: function turbulence(t, e, i, a, s) {
        this.attr({
          numOctaves: e,
          seed: i,
          stitchTiles: a,
          baseFrequency: t,
          type: s
        });
      }
    },
        i = {
      merge: function merge() {
        var t;

        if (arguments[0] instanceof SVG.Set) {
          var e = this;
          arguments[0].each(function (t) {
            this instanceof SVG.MergeNode ? e.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e.put(new SVG.MergeNode(this));
          });
        } else {
          t = Array.isArray(arguments[0]) ? arguments[0] : arguments;

          for (var i = 0; i < t.length; i++) {
            t[i] instanceof SVG.MergeNode ? this.put(t[i]) : this.put(new SVG.MergeNode(t[i]));
          }
        }
      },
      componentTransfer: function componentTransfer(t) {
        if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function (t) {
          this[t] = new SVG["Func" + t.toUpperCase()]("identity"), this.rgb.add(this[t]), this.node.appendChild(this[t].node);
        }.bind(this)), t) for (var e in t.rgb && (["r", "g", "b"].forEach(function (e) {
          this[e].attr(t.rgb);
        }.bind(this)), delete t.rgb), t) {
          this[e].attr(t[e]);
        }
      },
      diffuseLighting: function diffuseLighting(t, e, i) {
        this.attr({
          surfaceScale: t,
          diffuseConstant: e,
          kernelUnitLength: i
        });
      },
      specularLighting: function specularLighting(t, e, i, a) {
        this.attr({
          surfaceScale: t,
          diffuseConstant: e,
          specularExponent: i,
          kernelUnitLength: a
        });
      }
    },
        a = {
      distantLight: function distantLight(t, e) {
        this.attr({
          azimuth: t,
          elevation: e
        });
      },
      pointLight: function pointLight(t, e, i) {
        this.attr({
          x: t,
          y: e,
          z: i
        });
      },
      spotLight: function spotLight(t, e, i, a, s, r) {
        this.attr({
          x: t,
          y: e,
          z: i,
          pointsAtX: a,
          pointsAtY: s,
          pointsAtZ: r
        });
      },
      mergeNode: function mergeNode(t) {
        this.attr("in", t);
      }
    };

    function s(t) {
      return Array.isArray(t) && (t = new SVG.Array(t)), t.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
    }

    function r(t) {
      if (!Array.isArray(t)) return t;

      for (var e = 0, i = t.length, a = []; e < i; e++) {
        a.push(t[e]);
      }

      return a.join(" ");
    }

    function n() {
      var t = function t() {};

      for (var e in "function" == typeof arguments[arguments.length - 1] && (t = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments) {
        for (var i in arguments[e]) {
          t(arguments[e][i], i, arguments[e]);
        }
      }
    }

    ["r", "g", "b", "a"].forEach(function (t) {
      a["Func" + t.toUpperCase()] = function (t) {
        switch (this.attr("type", t), t) {
          case "table":
            this.attr("tableValues", arguments[1]);
            break;

          case "linear":
            this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
            break;

          case "gamma":
            this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
        }
      };
    }), n(e, function (t, e) {
      var i = e.charAt(0).toUpperCase() + e.slice(1);
      SVG[i + "Effect"] = SVG.invent({
        create: function create() {
          this.constructor.call(this, SVG.create("fe" + i)), t.apply(this, arguments), this.result(this.attr("id") + "Out");
        },
        inherit: SVG.Effect,
        extend: {}
      });
    }), n(i, function (t, e) {
      var i = e.charAt(0).toUpperCase() + e.slice(1);
      SVG[i + "Effect"] = SVG.invent({
        create: function create() {
          this.constructor.call(this, SVG.create("fe" + i)), t.apply(this, arguments), this.result(this.attr("id") + "Out");
        },
        inherit: SVG.ParentEffect,
        extend: {}
      });
    }), n(a, function (t, e) {
      var i = e.charAt(0).toUpperCase() + e.slice(1);
      SVG[i] = SVG.invent({
        create: function create() {
          this.constructor.call(this, SVG.create("fe" + i)), t.apply(this, arguments);
        },
        inherit: SVG.ChildEffect,
        extend: {}
      });
    }), SVG.extend(SVG.MergeEffect, {
      "in": function _in(t) {
        return t instanceof SVG.MergeNode ? this.add(t, 0) : this.add(new SVG.MergeNode(t), 0), this;
      }
    }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
      in2: function in2(t) {
        return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t);
      }
    }), SVG.filter = {
      sepiatone: [.343, .669, .119, 0, 0, .249, .626, .13, 0, 0, .172, .334, .111, 0, 0, 0, 0, 0, 1, 0]
    };
  }.call(void 0), function () {
    function t(t, s, r, n, o, l, h) {
      for (var c = t.slice(s, r || h), d = n.slice(o, l || h), g = 0, u = {
        pos: [0, 0],
        start: [0, 0]
      }, f = {
        pos: [0, 0],
        start: [0, 0]
      };;) {
        if (c[g] = e.call(u, c[g]), d[g] = e.call(f, d[g]), c[g][0] != d[g][0] || "M" == c[g][0] || "A" == c[g][0] && (c[g][4] != d[g][4] || c[g][5] != d[g][5]) ? (Array.prototype.splice.apply(c, [g, 1].concat(a.call(u, c[g]))), Array.prototype.splice.apply(d, [g, 1].concat(a.call(f, d[g])))) : (c[g] = i.call(u, c[g]), d[g] = i.call(f, d[g])), ++g == c.length && g == d.length) break;
        g == c.length && c.push(["C", u.pos[0], u.pos[1], u.pos[0], u.pos[1], u.pos[0], u.pos[1]]), g == d.length && d.push(["C", f.pos[0], f.pos[1], f.pos[0], f.pos[1], f.pos[0], f.pos[1]]);
      }

      return {
        start: c,
        dest: d
      };
    }

    function e(t) {
      switch (t[0]) {
        case "z":
        case "Z":
          t[0] = "L", t[1] = this.start[0], t[2] = this.start[1];
          break;

        case "H":
          t[0] = "L", t[2] = this.pos[1];
          break;

        case "V":
          t[0] = "L", t[2] = t[1], t[1] = this.pos[0];
          break;

        case "T":
          t[0] = "Q", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];
          break;

        case "S":
          t[0] = "C", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0];
      }

      return t;
    }

    function i(t) {
      var e = t.length;
      return this.pos = [t[e - 2], t[e - 1]], -1 != "SCQT".indexOf(t[0]) && (this.reflection = [2 * this.pos[0] - t[e - 4], 2 * this.pos[1] - t[e - 3]]), t;
    }

    function a(t) {
      var e = [t];

      switch (t[0]) {
        case "M":
          return this.pos = this.start = [t[1], t[2]], e;

        case "L":
          t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];
          break;

        case "Q":
          t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;
          break;

        case "A":
          t = (e = function (t, e) {
            var i,
                a,
                s,
                r,
                n,
                o,
                l,
                h,
                c,
                d,
                g,
                u,
                f,
                p,
                x,
                b,
                m,
                v,
                y,
                w,
                k,
                A,
                S,
                C,
                L,
                P,
                z = Math.abs(e[1]),
                T = Math.abs(e[2]),
                E = e[3] % 360,
                M = e[4],
                I = e[5],
                X = e[6],
                Y = e[7],
                R = new SVG.Point(t),
                F = new SVG.Point(X, Y),
                D = [];
            if (0 === z || 0 === T || R.x === F.x && R.y === F.y) return [["C", R.x, R.y, F.x, F.y, F.x, F.y]];
            i = new SVG.Point((R.x - F.x) / 2, (R.y - F.y) / 2).transform(new SVG.Matrix().rotate(E)), (a = i.x * i.x / (z * z) + i.y * i.y / (T * T)) > 1 && (a = Math.sqrt(a), z *= a, T *= a);
            s = new SVG.Matrix().rotate(E).scale(1 / z, 1 / T).rotate(-E), R = R.transform(s), F = F.transform(s), r = [F.x - R.x, F.y - R.y], o = r[0] * r[0] + r[1] * r[1], n = Math.sqrt(o), r[0] /= n, r[1] /= n, l = o < 4 ? Math.sqrt(1 - o / 4) : 0, M === I && (l *= -1);
            h = new SVG.Point((F.x + R.x) / 2 + l * -r[1], (F.y + R.y) / 2 + l * r[0]), c = new SVG.Point(R.x - h.x, R.y - h.y), d = new SVG.Point(F.x - h.x, F.y - h.y), g = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (g *= -1);
            u = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (u *= -1);
            I && g > u && (u += 2 * Math.PI);
            !I && g < u && (u -= 2 * Math.PI);

            for (p = Math.ceil(2 * Math.abs(g - u) / Math.PI), b = [], m = g, f = (u - g) / p, x = 4 * Math.tan(f / 4) / 3, k = 0; k <= p; k++) {
              y = Math.cos(m), v = Math.sin(m), w = new SVG.Point(h.x + y, h.y + v), b[k] = [new SVG.Point(w.x + x * v, w.y - x * y), w, new SVG.Point(w.x - x * v, w.y + x * y)], m += f;
            }

            for (b[0][0] = b[0][1].clone(), b[b.length - 1][2] = b[b.length - 1][1].clone(), s = new SVG.Matrix().rotate(E).scale(z, T).rotate(-E), k = 0, A = b.length; k < A; k++) {
              b[k][0] = b[k][0].transform(s), b[k][1] = b[k][1].transform(s), b[k][2] = b[k][2].transform(s);
            }

            for (k = 1, A = b.length; k < A; k++) {
              w = b[k - 1][2], S = w.x, C = w.y, w = b[k][0], L = w.x, P = w.y, w = b[k][1], X = w.x, Y = w.y, D.push(["C", S, C, L, P, X, Y]);
            }

            return D;
          }(this.pos, t))[0];

      }

      return t[0] = "C", this.pos = [t[5], t[6]], this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]], e;
    }

    function s(t, e) {
      if (!1 === e) return !1;

      for (var i = e, a = t.length; i < a; ++i) {
        if ("M" == t[i][0]) return i;
      }

      return !1;
    }

    SVG.extend(SVG.PathArray, {
      morph: function morph(e) {
        for (var i = this.value, a = this.parse(e), r = 0, n = 0, o = !1, l = !1; !1 !== r || !1 !== n;) {
          var h;
          o = s(i, !1 !== r && r + 1), l = s(a, !1 !== n && n + 1), !1 === r && (r = 0 == (h = new SVG.PathArray(c.start).bbox()).height || 0 == h.width ? i.push(i[0]) - 1 : i.push(["M", h.x + h.width / 2, h.y + h.height / 2]) - 1), !1 === n && (n = 0 == (h = new SVG.PathArray(c.dest).bbox()).height || 0 == h.width ? a.push(a[0]) - 1 : a.push(["M", h.x + h.width / 2, h.y + h.height / 2]) - 1);
          var c = t(i, r, o, a, n, l);
          i = i.slice(0, r).concat(c.start, !1 === o ? [] : i.slice(o)), a = a.slice(0, n).concat(c.dest, !1 === l ? [] : a.slice(l)), r = !1 !== o && r + c.start.length, n = !1 !== l && n + c.dest.length;
        }

        return this.value = i, this.destination = new SVG.PathArray(), this.destination.value = a, this;
      }
    });
  }(),
  /*! svg.draggable.js - v2.2.2 - 2019-01-08
    * https://github.com/svgdotjs/svg.draggable.js
    * Copyright (c) 2019 Wout Fierens; Licensed MIT */
  function () {
    function t(t) {
      t.remember("_draggable", this), this.el = t;
    }

    t.prototype.init = function (t, e) {
      var i = this;
      this.constraint = t, this.value = e, this.el.on("mousedown.drag", function (t) {
        i.start(t);
      }), this.el.on("touchstart.drag", function (t) {
        i.start(t);
      });
    }, t.prototype.transformPoint = function (t, e) {
      var i = (t = t || window.event).changedTouches && t.changedTouches[0] || t;
      return this.p.x = i.clientX - (e || 0), this.p.y = i.clientY, this.p.matrixTransform(this.m);
    }, t.prototype.getBBox = function () {
      var t = this.el.bbox();
      return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t.x = this.el.x(), t.y = this.el.y()), t;
    }, t.prototype.start = function (t) {
      if ("click" != t.type && "mousedown" != t.type && "mousemove" != t.type || 1 == (t.which || t.buttons)) {
        var e = this;

        if (this.el.fire("beforedrag", {
          event: t,
          handler: this
        }), !this.el.event().defaultPrevented) {
          t.preventDefault(), t.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
          var i,
              a = this.getBBox();
          if (this.el instanceof SVG.Text) switch (i = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
            case "middle":
              i /= 2;
              break;

            case "start":
              i = 0;
          }
          this.startPoints = {
            point: this.transformPoint(t, i),
            box: a,
            transform: this.el.transform()
          }, SVG.on(window, "mousemove.drag", function (t) {
            e.drag(t);
          }), SVG.on(window, "touchmove.drag", function (t) {
            e.drag(t);
          }), SVG.on(window, "mouseup.drag", function (t) {
            e.end(t);
          }), SVG.on(window, "touchend.drag", function (t) {
            e.end(t);
          }), this.el.fire("dragstart", {
            event: t,
            p: this.startPoints.point,
            m: this.m,
            handler: this
          });
        }
      }
    }, t.prototype.drag = function (t) {
      var e = this.getBBox(),
          i = this.transformPoint(t),
          a = this.startPoints.box.x + i.x - this.startPoints.point.x,
          s = this.startPoints.box.y + i.y - this.startPoints.point.y,
          r = this.constraint,
          n = i.x - this.startPoints.point.x,
          o = i.y - this.startPoints.point.y;
      if (this.el.fire("dragmove", {
        event: t,
        p: i,
        m: this.m,
        handler: this
      }), this.el.event().defaultPrevented) return i;

      if ("function" == typeof r) {
        var l = r.call(this.el, a, s, this.m);
        "boolean" == typeof l && (l = {
          x: l,
          y: l
        }), !0 === l.x ? this.el.x(a) : !1 !== l.x && this.el.x(l.x), !0 === l.y ? this.el.y(s) : !1 !== l.y && this.el.y(l.y);
      } else "object" == _typeof(r) && (null != r.minX && a < r.minX ? n = (a = r.minX) - this.startPoints.box.x : null != r.maxX && a > r.maxX - e.width && (n = (a = r.maxX - e.width) - this.startPoints.box.x), null != r.minY && s < r.minY ? o = (s = r.minY) - this.startPoints.box.y : null != r.maxY && s > r.maxY - e.height && (o = (s = r.maxY - e.height) - this.startPoints.box.y), null != r.snapToGrid && (a -= a % r.snapToGrid, s -= s % r.snapToGrid, n -= n % r.snapToGrid, o -= o % r.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({
        x: n,
        y: o
      }, !0) : this.el.move(a, s));

      return i;
    }, t.prototype.end = function (t) {
      var e = this.drag(t);
      this.el.fire("dragend", {
        event: t,
        p: e,
        m: this.m,
        handler: this
      }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
    }, SVG.extend(SVG.Element, {
      draggable: function draggable(e, i) {
        "function" != typeof e && "object" != _typeof(e) || (i = e, e = !0);
        var a = this.remember("_draggable") || new t(this);
        return (e = void 0 === e || e) ? a.init(i || {}, e) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
      }
    });
  }.call(void 0), function () {
    function t(t) {
      this.el = t, t.remember("_selectHandler", this), this.pointSelection = {
        isSelected: !1
      }, this.rectSelection = {
        isSelected: !1
      };
    }

    t.prototype.init = function (t, e) {
      var i = this.el.bbox();

      for (var a in this.options = {}, this.el.selectize.defaults) {
        this.options[a] = this.el.selectize.defaults[a], void 0 !== e[a] && (this.options[a] = e[a]);
      }

      this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup();
    }, t.prototype.selectPoints = function (t) {
      return this.pointSelection.isSelected = t, this.pointSelection.set ? this : (this.pointSelection.set = this.parent.set(), this.drawCircles(), this);
    }, t.prototype.getPointArray = function () {
      var t = this.el.bbox();
      return this.el.array().valueOf().map(function (e) {
        return [e[0] - t.x, e[1] - t.y];
      });
    }, t.prototype.drawCircles = function () {
      for (var t = this, e = this.getPointArray(), i = 0, a = e.length; i < a; ++i) {
        var s = function (e) {
          return function (i) {
            (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();
            var a = i.pageX || i.touches[0].pageX,
                s = i.pageY || i.touches[0].pageY;
            t.el.fire("point", {
              x: a,
              y: s,
              i: e,
              event: i
            });
          };
        }(i);

        this.pointSelection.set.add(this.nested.circle(this.options.radius).center(e[i][0], e[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s).on("mousedown", s));
      }
    }, t.prototype.updatePointSelection = function () {
      var t = this.getPointArray();
      this.pointSelection.set.each(function (e) {
        this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1]);
      });
    }, t.prototype.updateRectSelection = function () {
      var t = this.el.bbox();
      this.rectSelection.set.get(0).attr({
        width: t.width,
        height: t.height
      }), this.options.points && (this.rectSelection.set.get(2).center(t.width, 0), this.rectSelection.set.get(3).center(t.width, t.height), this.rectSelection.set.get(4).center(0, t.height), this.rectSelection.set.get(5).center(t.width / 2, 0), this.rectSelection.set.get(6).center(t.width, t.height / 2), this.rectSelection.set.get(7).center(t.width / 2, t.height), this.rectSelection.set.get(8).center(0, t.height / 2)), this.options.rotationPoint && (this.options.points ? this.rectSelection.set.get(9).center(t.width / 2, 20) : this.rectSelection.set.get(1).center(t.width / 2, 20));
    }, t.prototype.selectRect = function (t) {
      var e = this,
          i = this.el.bbox();

      function a(t) {
        return function (i) {
          (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();
          var a = i.pageX || i.touches[0].pageX,
              s = i.pageY || i.touches[0].pageY;
          e.el.fire(t, {
            x: a,
            y: s,
            event: i
          });
        };
      }

      if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i.width, i.height).addClass(this.options.classRect)), this.options.points && !this.rectSelection.set.get(1)) {
        var s = "touchstart",
            r = "mousedown";
        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, 0).attr("class", this.options.classPoints + "_lt").on(r, a("lt")).on(s, a("lt"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, 0).attr("class", this.options.classPoints + "_rt").on(r, a("rt")).on(s, a("rt"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, i.height).attr("class", this.options.classPoints + "_rb").on(r, a("rb")).on(s, a("rb"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, i.height).attr("class", this.options.classPoints + "_lb").on(r, a("lb")).on(s, a("lb"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, 0).attr("class", this.options.classPoints + "_t").on(r, a("t")).on(s, a("t"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, i.height / 2).attr("class", this.options.classPoints + "_r").on(r, a("r")).on(s, a("r"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, i.height).attr("class", this.options.classPoints + "_b").on(r, a("b")).on(s, a("b"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, i.height / 2).attr("class", this.options.classPoints + "_l").on(r, a("l")).on(s, a("l"))), this.rectSelection.set.each(function () {
          this.addClass(e.options.classPoints);
        });
      }

      if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
        var n = function n(t) {
          (t = t || window.event).preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation();
          var i = t.pageX || t.touches[0].pageX,
              a = t.pageY || t.touches[0].pageY;
          e.el.fire("rot", {
            x: i,
            y: a,
            event: t
          });
        };

        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", n).on("mousedown", n));
      }
    }, t.prototype.handler = function () {
      var t = this.el.bbox();
      this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
    }, t.prototype.observe = function () {
      var t = this;
      if (MutationObserver) {
        if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function () {
          t.handler();
        }), this.observerInst.observe(this.el.node, {
          attributes: !0
        });else try {
          this.observerInst.disconnect(), delete this.observerInst;
        } catch (t) {}
      } else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function () {
        t.handler();
      });
    }, t.prototype.cleanup = function () {
      !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function () {
        this.remove();
      }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function () {
        this.remove();
      }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
    }, SVG.extend(SVG.Element, {
      selectize: function selectize(e, i) {
        return "object" == _typeof(e) && (i = e, e = !0), (this.remember("_selectHandler") || new t(this)).init(void 0 === e || e, i || {}), this;
      }
    }), SVG.Element.prototype.selectize.defaults = {
      points: !0,
      classRect: "svg_select_boundingRect",
      classPoints: "svg_select_points",
      radius: 7,
      rotationPoint: !0,
      deepSelect: !1
    };
  }(), function () {
    (function () {
      function t(t) {
        t.remember("_resizeHandler", this), this.el = t, this.parameters = {}, this.lastUpdateCall = null, this.p = t.doc().node.createSVGPoint();
      }

      t.prototype.transformPoint = function (t, e, i) {
        return this.p.x = t - (this.offset.x - window.pageXOffset), this.p.y = e - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i || this.m);
      }, t.prototype._extractPosition = function (t) {
        return {
          x: null != t.clientX ? t.clientX : t.touches[0].clientX,
          y: null != t.clientY ? t.clientY : t.touches[0].clientY
        };
      }, t.prototype.init = function (t) {
        var e = this;

        if (this.stop(), "stop" !== t) {
          for (var i in this.options = {}, this.el.resize.defaults) {
            this.options[i] = this.el.resize.defaults[i], void 0 !== t[i] && (this.options[i] = t[i]);
          }

          this.el.on("lt.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("rt.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("rb.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("lb.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("t.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("r.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("b.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("l.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("rot.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("point.resize", function (t) {
            e.resize(t || window.event);
          }), this.update();
        }
      }, t.prototype.stop = function () {
        return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
      }, t.prototype.resize = function (t) {
        var e = this;
        this.m = this.el.node.getScreenCTM().inverse(), this.offset = {
          x: window.pageXOffset,
          y: window.pageYOffset
        };

        var i = this._extractPosition(t.detail.event);

        if (this.parameters = {
          type: this.el.type,
          p: this.transformPoint(i.x, i.y),
          x: t.detail.x,
          y: t.detail.y,
          box: this.el.bbox(),
          rotation: this.el.transform().rotation
        }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t.detail.i) {
          var a = this.el.array().valueOf();
          this.parameters.i = t.detail.i, this.parameters.pointCoords = [a[t.detail.i][0], a[t.detail.i][1]];
        }

        switch (t.type) {
          case "lt":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e);

              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height - i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i[0]);
                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y + i[1]).size(this.parameters.box.width - i[0], this.parameters.box.height - i[1]);
              }
            };

            break;

          case "rt":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 2);

              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height - i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i[0]);
                i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).size(this.parameters.box.width + i[0], this.parameters.box.height - i[1]);
              }
            };

            break;

          case "rb":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 0);

              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height + i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i[0]);
                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i[0], this.parameters.box.height + i[1]);
              }
            };

            break;

          case "lb":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 1);

              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height + i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i[0]);
                i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).size(this.parameters.box.width - i[0], this.parameters.box.height + i[1]);
              }
            };

            break;

          case "t":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 2);

              if (this.parameters.box.height - i[1] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).height(this.parameters.box.height - i[1]);
              }
            };

            break;

          case "r":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 0);

              if (this.parameters.box.width + i[0] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i[0]);
              }
            };

            break;

          case "b":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 0);

              if (this.parameters.box.height + i[1] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i[1]);
              }
            };

            break;

          case "l":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 1);

              if (this.parameters.box.width - i[0] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).width(this.parameters.box.width - i[0]);
              }
            };

            break;

          case "rot":
            this.calc = function (t, e) {
              var i = t + this.parameters.p.x,
                  a = e + this.parameters.p.y,
                  s = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),
                  r = Math.atan2(a - this.parameters.box.y - this.parameters.box.height / 2, i - this.parameters.box.x - this.parameters.box.width / 2),
                  n = this.parameters.rotation + 180 * (r - s) / Math.PI + this.options.snapToAngle / 2;
              this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(n - n % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
            };

            break;

          case "point":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),
                  a = this.el.array().valueOf();
              a[this.parameters.i][0] = this.parameters.pointCoords[0] + i[0], a[this.parameters.i][1] = this.parameters.pointCoords[1] + i[1], this.el.plot(a);
            };

        }

        this.el.fire("resizestart", {
          dx: this.parameters.x,
          dy: this.parameters.y,
          event: t
        }), SVG.on(window, "touchmove.resize", function (t) {
          e.update(t || window.event);
        }), SVG.on(window, "touchend.resize", function () {
          e.done();
        }), SVG.on(window, "mousemove.resize", function (t) {
          e.update(t || window.event);
        }), SVG.on(window, "mouseup.resize", function () {
          e.done();
        });
      }, t.prototype.update = function (t) {
        if (t) {
          var e = this._extractPosition(t),
              i = this.transformPoint(e.x, e.y),
              a = i.x - this.parameters.p.x,
              s = i.y - this.parameters.p.y;

          this.lastUpdateCall = [a, s], this.calc(a, s), this.el.fire("resizing", {
            dx: a,
            dy: s,
            event: t
          });
        } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
      }, t.prototype.done = function () {
        this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
      }, t.prototype.snapToGrid = function (t, e, i, a) {
        var s;
        return void 0 !== a ? s = [(i + t) % this.options.snapToGrid, (a + e) % this.options.snapToGrid] : (i = null == i ? 3 : i, s = [(this.parameters.box.x + t + (1 & i ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e + (2 & i ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t < 0 && (s[0] -= this.options.snapToGrid), e < 0 && (s[1] -= this.options.snapToGrid), t -= Math.abs(s[0]) < this.options.snapToGrid / 2 ? s[0] : s[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e -= Math.abs(s[1]) < this.options.snapToGrid / 2 ? s[1] : s[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t, e, i, a);
      }, t.prototype.constraintToBox = function (t, e, i, a) {
        var s,
            r,
            n = this.options.constraint || {};
        return void 0 !== a ? (s = i, r = a) : (s = this.parameters.box.x + (1 & i ? 0 : this.parameters.box.width), r = this.parameters.box.y + (2 & i ? 0 : this.parameters.box.height)), void 0 !== n.minX && s + t < n.minX && (t = n.minX - s), void 0 !== n.maxX && s + t > n.maxX && (t = n.maxX - s), void 0 !== n.minY && r + e < n.minY && (e = n.minY - r), void 0 !== n.maxY && r + e > n.maxY && (e = n.maxY - r), [t, e];
      }, t.prototype.checkAspectRatio = function (t, e) {
        if (!this.options.saveAspectRatio) return t;
        var i = t.slice(),
            a = this.parameters.box.width / this.parameters.box.height,
            s = this.parameters.box.width + t[0],
            r = this.parameters.box.height - t[1],
            n = s / r;
        return n < a ? (i[1] = s / a - this.parameters.box.height, e && (i[1] = -i[1])) : n > a && (i[0] = this.parameters.box.width - r * a, e && (i[0] = -i[0])), i;
      }, SVG.extend(SVG.Element, {
        resize: function resize(e) {
          return (this.remember("_resizeHandler") || new t(this)).init(e || {}), this;
        }
      }), SVG.Element.prototype.resize.defaults = {
        snapToAngle: .1,
        snapToGrid: 1,
        constraint: {},
        saveAspectRatio: !1
      };
    }).call(this);
  }();
  !function (t, e) {
    void 0 === e && (e = {});
    var i = e.insertAt;

    if (t && "undefined" != typeof document) {
      var a = document.head || document.getElementsByTagName("head")[0],
          s = document.createElement("style");
      s.type = "text/css", "top" === i && a.firstChild ? a.insertBefore(s, a.firstChild) : a.appendChild(s), s.styleSheet ? s.styleSheet.cssText = t : s.appendChild(document.createTextNode(t));
    }
  }('.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5);\n}\n.apexcharts-canvas.apexcharts-theme-dark {\n  background: #343F57;\n}\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-gridline, .apexcharts-text {\n  pointer-events: none;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30, 0.8);\n}\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line {\n  pointer-events: none;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-text-z-label:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n.apexcharts-tooltip-series-group.apexcharts-active, .apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n.apexcharts-tooltip-candlestick {\n  padding: 4px 8px;\n}\n.apexcharts-tooltip-candlestick > div {\n  margin: 4px 0;\n}\n.apexcharts-tooltip-candlestick span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after, .apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after, .apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after, .apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color:#ECEFF1\n}\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color:rgba(0, 0, 0, 0.5);\n}\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after, .apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after, .apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after, .apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs, .apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active, .apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-zoom-rect {\n  pointer-events: none;\n}\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_points, .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n.svg_select_points_l, .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n  fill: #888;\n}\n.apexcharts-canvas.apexcharts-zoomable .hovering-zoom {\n  cursor: crosshair\n}\n.apexcharts-canvas.apexcharts-zoomable .hovering-pan {\n  cursor: move\n}\n\n.apexcharts-xaxis,\n.apexcharts-yaxis {\n  pointer-events: none;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoom-in-icon,\n.apexcharts-zoom-out-icon,\n.apexcharts-reset-zoom-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoom-in-icon svg,\n.apexcharts-zoom-out-icon svg,\n.apexcharts-reset-zoom-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoom-in-icon svg,\n.apexcharts-theme-dark .apexcharts-zoom-out-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg{\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-in-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoom-out-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-zoom-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon, .apexcharts-menu-icon {\n  position: relative;\n}\n.apexcharts-reset-zoom-icon {\n  margin-left: 5px;\n}\n.apexcharts-zoom-icon, .apexcharts-reset-zoom-icon, .apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoom-in-icon, .apexcharts-zoom-out-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoom-out-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  top: 0px;\n  right: 3px;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-toolbar svg {\n  pointer-events: none;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-toolbar {\n    /*opacity: 0;*/\n  }\n\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels, .apexcharts-datalabel, .apexcharts-datalabel-label, .apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events, .apexcharts-radar-series path, .apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n/* Resize generated styles */\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers, .resize-triggers > div, .contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers > div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}\n'), function () {
    function t(t) {
      var e = t.__resizeTriggers__,
          i = e.firstElementChild,
          a = e.lastElementChild,
          s = i.firstElementChild;
      a.scrollLeft = a.scrollWidth, a.scrollTop = a.scrollHeight, s.style.width = i.offsetWidth + 1 + "px", s.style.height = i.offsetHeight + 1 + "px", i.scrollLeft = i.scrollWidth, i.scrollTop = i.scrollHeight;
    }

    function e(e) {
      var i = this;
      t(this), this.__resizeRAF__ && r(this.__resizeRAF__), this.__resizeRAF__ = s(function () {
        (function (t) {
          return t.offsetWidth != t.__resizeLast__.width || t.offsetHeight != t.__resizeLast__.height;
        })(i) && (i.__resizeLast__.width = i.offsetWidth, i.__resizeLast__.height = i.offsetHeight, i.__resizeListeners__.forEach(function (t) {
          t.call(e);
        }));
      });
    }

    var i,
        a,
        s = (i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (t) {
      return window.setTimeout(t, 20);
    }, function (t) {
      return i(t);
    }),
        r = (a = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout, function (t) {
      return a(t);
    }),
        n = !1,
        o = "animationstart",
        l = "Webkit Moz O ms".split(" "),
        h = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),
        c = document.createElement("fakeelement");
    if (void 0 !== c.style.animationName && (n = !0), !1 === n) for (var d = 0; d < l.length; d++) {
      if (void 0 !== c.style[l[d] + "AnimationName"]) {
        o = h[d];
        break;
      }
    }
    window.addResizeListener = function (i, a) {
      i.__resizeTriggers__ || ("static" == getComputedStyle(i).position && (i.style.position = "relative"), i.__resizeLast__ = {}, i.__resizeListeners__ = [], (i.__resizeTriggers__ = document.createElement("div")).className = "resize-triggers", i.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>', i.appendChild(i.__resizeTriggers__), t(i), i.addEventListener("scroll", e, !0), o && i.__resizeTriggers__.addEventListener(o, function (e) {
        "resizeanim" == e.animationName && t(i);
      })), i.__resizeListeners__.push(a);
    }, window.removeResizeListener = function (t, i) {
      t && (t.__resizeListeners__.splice(t.__resizeListeners__.indexOf(i), 1), t.__resizeListeners__.length || (t.removeEventListener("scroll", e), t.__resizeTriggers__ = !t.removeChild(t.__resizeTriggers__)));
    };
  }(), window.Apex = {};

  var Tt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "initModules",
      value: function value() {
        this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "toggleDataPointSelection", "dataURI", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "addText", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], this.ctx.animations = new f(this.ctx), this.ctx.axes = new U(this.ctx), this.ctx.core = new Pt(this.ctx.el, this.ctx), this.ctx.data = new F(this.ctx), this.ctx.grid = new W(this.ctx), this.ctx.coreUtils = new E(this.ctx), this.ctx.crosshairs = new q(this.ctx), this.ctx.events = new _(this.ctx), this.ctx.localization = new j(this.ctx), this.ctx.options = new A(), this.ctx.responsive = new Z(this.ctx), this.ctx.series = new R(this.ctx), this.ctx.theme = new $(this.ctx), this.ctx.formatters = new D(this.ctx), this.ctx.titleSubtitle = new J(this.ctx), this.ctx.legend = new rt(this.ctx), this.ctx.toolbar = new nt(this.ctx), this.ctx.dimensions = new it(this.ctx), this.ctx.updateHelpers = new zt(this.ctx), this.ctx.zoomPanSelection = new ot(this.ctx), this.ctx.w.globals.tooltip = new ft(this.ctx);
      }
    }]), t;
  }(),
      Et = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return a(t, [{
      key: "clear",
      value: function value() {
        this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements();
      }
    }, {
      key: "killSVG",
      value: function value(t) {
        return new Promise(function (e, i) {
          t.each(function (t, e) {
            this.removeClass("*"), this.off(), this.stop();
          }, !0), t.ungroup(), t.clear(), e("done");
        });
      }
    }, {
      key: "clearDomElements",
      value: function value() {
        var t = this;
        this.ctx.eventList.forEach(function (e) {
          document.removeEventListener(e, t.ctx.events.documentEvent);
        });
        var e = this.w.globals.dom;
        if (null !== this.ctx.el) for (; this.ctx.el.firstChild;) {
          this.ctx.el.removeChild(this.ctx.el.firstChild);
        }
        this.killSVG(e.Paper), e.Paper.remove(), e.elWrap = null, e.elGraphical = null, e.elLegendWrap = null, e.baseEl = null, e.elGridRect = null, e.elGridRectMask = null, e.elGridRectMarkerMask = null, e.elDefs = null;
      }
    }]), t;
  }();

  return function () {
    function t(i, a) {
      e(this, t), this.opts = a, this.ctx = this, this.w = new T(a).init(), this.el = i, this.w.globals.cuid = g.randomId(), this.w.globals.chartID = this.w.config.chart.id ? this.w.config.chart.id : this.w.globals.cuid, new Tt(this).initModules(), this.create = g.bind(this.create, this), this.windowResizeHandler = this._windowResize.bind(this);
    }

    return a(t, [{
      key: "render",
      value: function value() {
        var t = this;
        return new Promise(function (e, i) {
          if (null !== t.el) {
            void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({
              id: t.w.globals.chartID,
              group: t.w.config.chart.group,
              chart: t
            }), t.setLocale(t.w.config.chart.defaultLocale);
            var a = t.w.config.chart.events.beforeMount;
            "function" == typeof a && a(t, t.w), t.events.fireEvent("beforeMount", [t, t.w]), window.addEventListener("resize", t.windowResizeHandler), window.addResizeListener(t.el.parentNode, t._parentResizeCallback.bind(t));
            var s = t.create(t.w.config.series, {});
            if (!s) return e(t);
            t.mount(s).then(function () {
              "function" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.events.fireEvent("mounted", [t, t.w]), e(s);
            })["catch"](function (t) {
              i(t);
            });
          } else i(new Error("Element not found"));
        });
      }
    }, {
      key: "create",
      value: function value(t, e) {
        var i = this.w;
        new Tt(this).initModules();
        var a = this.w.globals;
        (a.noData = !1, a.animationEnded = !1, this.responsive.checkResponsiveConfig(e), i.config.xaxis.convertedCatToNumeric) && new L(i.config).convertCatToNumericXaxis(i.config, this.ctx);
        if (null === this.el) return a.animationEnded = !0, null;
        if (this.core.setupElements(), 0 === a.svgWidth) return a.animationEnded = !0, null;
        var s = E.checkComboSeries(t);
        a.comboCharts = s.comboCharts, a.comboBarCount = s.comboBarCount, (0 === t.length || 1 === t.length && t[0].data && 0 === t[0].data.length) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t), this.theme.init(), new I(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a.noData && a.collapsedSeries.length !== a.series.length || this.legend.init(), this.series.hasAllSeriesEqualX(), a.axisCharts && (this.core.coreCalculations(), "category" !== i.config.xaxis.type && this.formatters.setLabelFormatters()), this.formatters.heatmapLabelFormatters(), this.dimensions.plotCoords();
        var r = this.core.xySettings();
        this.grid.createGridMask();
        var n = this.core.plotChartType(t, r),
            o = new Y(this);
        o.bringForward(), i.config.dataLabels.background.enabled && o.dataLabelsBackground(), this.core.shiftGraphPosition();
        var l = {
          plot: {
            left: i.globals.translateX,
            top: i.globals.translateY,
            width: i.globals.gridWidth,
            height: i.globals.gridHeight
          }
        };
        return {
          elGraph: n,
          xyRatios: r,
          elInner: i.globals.dom.elGraphical,
          dimensions: l
        };
      }
    }, {
      key: "mount",
      value: function value() {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            i = this,
            a = i.w;
        return new Promise(function (s, r) {
          if (null === i.el) return r(new Error("Not enough data to display or target element not found"));
          (null === e || a.globals.allSeriesCollapsed) && i.series.handleNoData(), i.axes.drawAxis(a.config.chart.type, e.xyRatios), i.grid = new W(i);
          var n = null;
          "back" === a.config.grid.position && (n = i.grid.drawGrid());
          var o = new N(t.ctx),
              l = new G(t.ctx);
          if (null !== n && (o.xAxisLabelCorrections(n.xAxisTickWidth), l.setYAxisTextAlignments()), i.annotations = new S(i), "back" === a.config.annotations.position && i.annotations.drawAnnotations(), e.elGraph instanceof Array) for (var h = 0; h < e.elGraph.length; h++) {
            a.globals.dom.elGraphical.add(e.elGraph[h]);
          } else a.globals.dom.elGraphical.add(e.elGraph);

          if ("front" === a.config.grid.position && i.grid.drawGrid(), "front" === a.config.xaxis.crosshairs.position && i.crosshairs.drawXCrosshairs(), "front" === a.config.yaxis[0].crosshairs.position && i.crosshairs.drawYCrosshairs(), "front" === a.config.annotations.position && i.annotations.drawAnnotations(), !a.globals.noData) {
            if (a.config.tooltip.enabled && !a.globals.noData && i.w.globals.tooltip.drawTooltip(e.xyRatios), a.globals.axisCharts && (a.globals.isXNumeric || a.config.xaxis.convertedCatToNumeric)) (a.config.chart.zoom.enabled || a.config.chart.selection && a.config.chart.selection.enabled || a.config.chart.pan && a.config.chart.pan.enabled) && i.zoomPanSelection.init({
              xyRatios: e.xyRatios
            });else {
              var c = a.config.chart.toolbar.tools;
              ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function (t) {
                c[t] = !1;
              });
            }
            a.config.chart.toolbar.show && !a.globals.allSeriesCollapsed && i.toolbar.createToolbar();
          }

          a.globals.memory.methodsToExec.length > 0 && a.globals.memory.methodsToExec.forEach(function (t) {
            t.method(t.params, !1, t.context);
          }), a.globals.axisCharts || a.globals.noData || i.core.resizeNonAxisCharts(), s(i);
        });
      }
    }, {
      key: "destroy",
      value: function value() {
        window.removeEventListener("resize", this.windowResizeHandler), window.removeResizeListener(this.el.parentNode, this._parentResizeCallback.bind(this));
        var t = this.w.config.chart.id;
        t && Apex._chartInstances.forEach(function (e, i) {
          e.id === t && Apex._chartInstances.splice(i, 1);
        }), new Et(this.ctx).clear();
      }
    }, {
      key: "updateOptions",
      value: function value(t) {
        var e = this,
            i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
            r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
            n = this.w;
        return t.series && (this.series.resetSeries(!1), t.series.length && t.series[0].data && (t.series = t.series.map(function (t, i) {
          return e.updateHelpers._extendSeries(t, i);
        })), this.updateHelpers.revertDefaultAxisMinMax()), t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)), t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)), n.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this.updateHelpers._updateOptions(t, i, a, s, r);
      }
    }, {
      key: "updateSeries",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t, e, i);
      }
    }, {
      key: "appendSeries",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            a = this.w.config.series.slice();
        return a.push(t), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a, e, i);
      }
    }, {
      key: "appendData",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = this;
        i.w.globals.dataChanged = !0, i.series.getPreviousPaths();

        for (var a = i.w.config.series.slice(), s = 0; s < a.length; s++) {
          if (void 0 !== t[s]) for (var r = 0; r < t[s].data.length; r++) {
            a[s].data.push(t[s].data[r]);
          }
        }

        return i.w.config.series = a, e && (i.w.globals.initialSeries = JSON.parse(JSON.stringify(i.w.config.series))), this.update();
      }
    }, {
      key: "update",
      value: function value(t) {
        var e = this;
        return new Promise(function (i, a) {
          new Et(e.ctx).clear();
          var s = e.create(e.w.config.series, t);
          if (!s) return i(e);
          e.mount(s).then(function () {
            "function" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.events.fireEvent("updated", [e, e.w]), e.w.globals.isDirty = !0, i(e);
          })["catch"](function (t) {
            a(t);
          });
        });
      }
    }, {
      key: "getSyncedCharts",
      value: function value() {
        var t = this.getGroupedCharts(),
            e = [this];
        return t.length && (e = [], t.forEach(function (t) {
          e.push(t);
        })), e;
      }
    }, {
      key: "getGroupedCharts",
      value: function value() {
        var t = this;
        return Apex._chartInstances.filter(function (t) {
          if (t.group) return !0;
        }).map(function (e) {
          return t.w.config.chart.group === e.group ? e.chart : t;
        });
      }
    }, {
      key: "toggleSeries",
      value: function value(t) {
        return this.series.toggleSeries(t);
      }
    }, {
      key: "showSeries",
      value: function value(t) {
        this.series.showSeries(t);
      }
    }, {
      key: "hideSeries",
      value: function value(t) {
        this.series.hideSeries(t);
      }
    }, {
      key: "resetSeries",
      value: function value() {
        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        this.series.resetSeries(t);
      }
    }, {
      key: "addXaxisAnnotation",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            a = this;
        i && (a = i), a.annotations.addXaxisAnnotationExternal(t, e, a);
      }
    }, {
      key: "addYaxisAnnotation",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            a = this;
        i && (a = i), a.annotations.addYaxisAnnotationExternal(t, e, a);
      }
    }, {
      key: "addPointAnnotation",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            a = this;
        i && (a = i), a.annotations.addPointAnnotationExternal(t, e, a);
      }
    }, {
      key: "clearAnnotations",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,
            e = this;
        t && (e = t), e.annotations.clearAnnotations(e);
      }
    }, {
      key: "removeAnnotation",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0,
            i = this;
        e && (i = e), i.annotations.removeAnnotation(i, t);
      }
    }, {
      key: "addText",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            a = this;
        i && (a = i), a.annotations.addText(t, e, a);
      }
    }, {
      key: "getChartArea",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
      }
    }, {
      key: "getSeriesTotalXRange",
      value: function value(t, e) {
        return this.coreUtils.getSeriesTotalsXRange(t, e);
      }
    }, {
      key: "getHighestValueInSeries",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
            e = new V(this.ctx);
        return e.getMinYMaxY(t).highestY;
      }
    }, {
      key: "getLowestValueInSeries",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
            e = new V(this.ctx);
        return e.getMinYMaxY(t).lowestY;
      }
    }, {
      key: "getSeriesTotal",
      value: function value() {
        return this.w.globals.seriesTotals;
      }
    }, {
      key: "toggleDataPointSelection",
      value: function value(t, e) {
        return this.updateHelpers.toggleDataPointSelection(t, e);
      }
    }, {
      key: "setLocale",
      value: function value(t) {
        this.localization.setCurrentLocaleValues(t);
      }
    }, {
      key: "dataURI",
      value: function value() {
        return new O(this.ctx).dataURI();
      }
    }, {
      key: "paper",
      value: function value() {
        return this.w.globals.dom.Paper;
      }
    }, {
      key: "_parentResizeCallback",
      value: function value() {
        this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
      }
    }, {
      key: "_windowResize",
      value: function value() {
        var t = this;
        clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function () {
          t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.ctx.update();
        }, 150);
      }
    }], [{
      key: "getChartByID",
      value: function value(t) {
        return Apex._chartInstances.filter(function (e) {
          return e.id === t;
        })[0].chart;
      }
    }, {
      key: "initOnLoad",
      value: function value() {
        for (var e = document.querySelectorAll("[data-apexcharts]"), i = 0; i < e.length; i++) {
          new t(e[i], JSON.parse(e[i].getAttribute("data-options"))).render();
        }
      }
    }, {
      key: "exec",
      value: function value(t, e) {
        var i = this.getChartByID(t);

        if (i) {
          i.w.globals.isExecCalled = !0;
          var a = null;

          if (-1 !== i.publicMethods.indexOf(e)) {
            for (var s = arguments.length, r = new Array(s > 2 ? s - 2 : 0), n = 2; n < s; n++) {
              r[n - 2] = arguments[n];
            }

            a = i[e].apply(i, r);
          }

          return a;
        }
      }
    }, {
      key: "merge",
      value: function value(t, e) {
        return g.extend(t, e);
      }
    }]), t;
  }();
});

/***/ }),

/***/ "./resources/sass/admin/libs/bootstrap/js/bootstrap.bundle.min.js":
/*!************************************************************************!*\
  !*** ./resources/sass/admin/libs/bootstrap/js/bootstrap.bundle.min.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
  * Bootstrap v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function (e, t) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? t(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function (e, p) {
  "use strict";

  function i(e, t) {
    for (var n = 0; n < t.length; n++) {
      var i = t[n];
      i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
    }
  }

  function s(e, t, n) {
    return t && i(e.prototype, t), n && i(e, n), e;
  }

  function t(t, e) {
    var n = Object.keys(t);

    if (Object.getOwnPropertySymbols) {
      var i = Object.getOwnPropertySymbols(t);
      e && (i = i.filter(function (e) {
        return Object.getOwnPropertyDescriptor(t, e).enumerable;
      })), n.push.apply(n, i);
    }

    return n;
  }

  function l(o) {
    for (var e = 1; e < arguments.length; e++) {
      var r = null != arguments[e] ? arguments[e] : {};
      e % 2 ? t(Object(r), !0).forEach(function (e) {
        var t, n, i;
        t = o, i = r[n = e], n in t ? Object.defineProperty(t, n, {
          value: i,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : t[n] = i;
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(o, Object.getOwnPropertyDescriptors(r)) : t(Object(r)).forEach(function (e) {
        Object.defineProperty(o, e, Object.getOwnPropertyDescriptor(r, e));
      });
    }

    return o;
  }

  p = p && p.hasOwnProperty("default") ? p["default"] : p;
  var n = "transitionend";

  function o(e) {
    var t = this,
        n = !1;
    return p(this).one(m.TRANSITION_END, function () {
      n = !0;
    }), setTimeout(function () {
      n || m.triggerTransitionEnd(t);
    }, e), this;
  }

  var m = {
    TRANSITION_END: "bsTransitionEnd",
    getUID: function getUID(e) {
      for (; e += ~~(1e6 * Math.random()), document.getElementById(e);) {
        ;
      }

      return e;
    },
    getSelectorFromElement: function getSelectorFromElement(e) {
      var t = e.getAttribute("data-target");

      if (!t || "#" === t) {
        var n = e.getAttribute("href");
        t = n && "#" !== n ? n.trim() : "";
      }

      try {
        return document.querySelector(t) ? t : null;
      } catch (e) {
        return null;
      }
    },
    getTransitionDurationFromElement: function getTransitionDurationFromElement(e) {
      if (!e) return 0;
      var t = p(e).css("transition-duration"),
          n = p(e).css("transition-delay"),
          i = parseFloat(t),
          o = parseFloat(n);
      return i || o ? (t = t.split(",")[0], n = n.split(",")[0], 1e3 * (parseFloat(t) + parseFloat(n))) : 0;
    },
    reflow: function reflow(e) {
      return e.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(e) {
      p(e).trigger(n);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(n);
    },
    isElement: function isElement(e) {
      return (e[0] || e).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(e, t, n) {
      for (var i in n) {
        if (Object.prototype.hasOwnProperty.call(n, i)) {
          var o = n[i],
              r = t[i],
              s = r && m.isElement(r) ? "element" : (a = r, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());
          if (!new RegExp(o).test(s)) throw new Error(e.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + o + '".');
        }
      }

      var a;
    },
    findShadowRoot: function findShadowRoot(e) {
      if (!document.documentElement.attachShadow) return null;
      if ("function" != typeof e.getRootNode) return e instanceof ShadowRoot ? e : e.parentNode ? m.findShadowRoot(e.parentNode) : null;
      var t = e.getRootNode();
      return t instanceof ShadowRoot ? t : null;
    },
    jQueryDetection: function jQueryDetection() {
      if ("undefined" == typeof p) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
      var e = p.fn.jquery.split(" ")[0].split(".");
      if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
    }
  };
  m.jQueryDetection(), p.fn.emulateTransitionEnd = o, p.event.special[m.TRANSITION_END] = {
    bindType: n,
    delegateType: n,
    handle: function handle(e) {
      if (p(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
    }
  };

  var r = "alert",
      a = "bs.alert",
      c = "." + a,
      h = p.fn[r],
      u = {
    CLOSE: "close" + c,
    CLOSED: "closed" + c,
    CLICK_DATA_API: "click" + c + ".data-api"
  },
      f = "alert",
      d = "fade",
      g = "show",
      _ = function () {
    function i(e) {
      this._element = e;
    }

    var e = i.prototype;
    return e.close = function (e) {
      var t = this._element;
      e && (t = this._getRootElement(e)), this._triggerCloseEvent(t).isDefaultPrevented() || this._removeElement(t);
    }, e.dispose = function () {
      p.removeData(this._element, a), this._element = null;
    }, e._getRootElement = function (e) {
      var t = m.getSelectorFromElement(e),
          n = !1;
      return t && (n = document.querySelector(t)), n = n || p(e).closest("." + f)[0];
    }, e._triggerCloseEvent = function (e) {
      var t = p.Event(u.CLOSE);
      return p(e).trigger(t), t;
    }, e._removeElement = function (t) {
      var n = this;

      if (p(t).removeClass(g), p(t).hasClass(d)) {
        var e = m.getTransitionDurationFromElement(t);
        p(t).one(m.TRANSITION_END, function (e) {
          return n._destroyElement(t, e);
        }).emulateTransitionEnd(e);
      } else this._destroyElement(t);
    }, e._destroyElement = function (e) {
      p(e).detach().trigger(u.CLOSED).remove();
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var e = p(this),
            t = e.data(a);
        t || (t = new i(this), e.data(a, t)), "close" === n && t[n](this);
      });
    }, i._handleDismiss = function (t) {
      return function (e) {
        e && e.preventDefault(), t.close(this);
      };
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }]), i;
  }();

  p(document).on(u.CLICK_DATA_API, '[data-dismiss="alert"]', _._handleDismiss(new _())), p.fn[r] = _._jQueryInterface, p.fn[r].Constructor = _, p.fn[r].noConflict = function () {
    return p.fn[r] = h, _._jQueryInterface;
  };

  var v = "button",
      y = "bs.button",
      E = "." + y,
      b = ".data-api",
      w = p.fn[v],
      T = "active",
      C = "btn",
      S = "focus",
      D = '[data-toggle^="button"]',
      I = '[data-toggle="buttons"]',
      A = '[data-toggle="button"]',
      O = '[data-toggle="buttons"] .btn',
      N = 'input:not([type="hidden"])',
      k = ".active",
      L = ".btn",
      P = {
    CLICK_DATA_API: "click" + E + b,
    FOCUS_BLUR_DATA_API: "focus" + E + b + " blur" + E + b,
    LOAD_DATA_API: "load" + E + b
  },
      x = function () {
    function n(e) {
      this._element = e;
    }

    var e = n.prototype;
    return e.toggle = function () {
      var e = !0,
          t = !0,
          n = p(this._element).closest(I)[0];

      if (n) {
        var i = this._element.querySelector(N);

        if (i) {
          if ("radio" === i.type) {
            if (i.checked && this._element.classList.contains(T)) e = !1;else {
              var o = n.querySelector(k);
              o && p(o).removeClass(T);
            }
          } else "checkbox" === i.type ? "LABEL" === this._element.tagName && i.checked === this._element.classList.contains(T) && (e = !1) : e = !1;
          e && (i.checked = !this._element.classList.contains(T), p(i).trigger("change")), i.focus(), t = !1;
        }
      }

      this._element.hasAttribute("disabled") || this._element.classList.contains("disabled") || (t && this._element.setAttribute("aria-pressed", !this._element.classList.contains(T)), e && p(this._element).toggleClass(T));
    }, e.dispose = function () {
      p.removeData(this._element, y), this._element = null;
    }, n._jQueryInterface = function (t) {
      return this.each(function () {
        var e = p(this).data(y);
        e || (e = new n(this), p(this).data(y, e)), "toggle" === t && e[t]();
      });
    }, s(n, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }]), n;
  }();

  p(document).on(P.CLICK_DATA_API, D, function (e) {
    var t = e.target;
    if (p(t).hasClass(C) || (t = p(t).closest(L)[0]), !t || t.hasAttribute("disabled") || t.classList.contains("disabled")) e.preventDefault();else {
      var n = t.querySelector(N);
      if (n && (n.hasAttribute("disabled") || n.classList.contains("disabled"))) return void e.preventDefault();

      x._jQueryInterface.call(p(t), "toggle");
    }
  }).on(P.FOCUS_BLUR_DATA_API, D, function (e) {
    var t = p(e.target).closest(L)[0];
    p(t).toggleClass(S, /^focus(in)?$/.test(e.type));
  }), p(window).on(P.LOAD_DATA_API, function () {
    for (var e = [].slice.call(document.querySelectorAll(O)), t = 0, n = e.length; t < n; t++) {
      var i = e[t],
          o = i.querySelector(N);
      o.checked || o.hasAttribute("checked") ? i.classList.add(T) : i.classList.remove(T);
    }

    for (var r = 0, s = (e = [].slice.call(document.querySelectorAll(A))).length; r < s; r++) {
      var a = e[r];
      "true" === a.getAttribute("aria-pressed") ? a.classList.add(T) : a.classList.remove(T);
    }
  }), p.fn[v] = x._jQueryInterface, p.fn[v].Constructor = x, p.fn[v].noConflict = function () {
    return p.fn[v] = w, x._jQueryInterface;
  };

  var j = "carousel",
      H = "bs.carousel",
      R = "." + H,
      F = ".data-api",
      M = p.fn[j],
      W = {
    interval: 5e3,
    keyboard: !0,
    slide: !1,
    pause: "hover",
    wrap: !0,
    touch: !0
  },
      U = {
    interval: "(number|boolean)",
    keyboard: "boolean",
    slide: "(boolean|string)",
    pause: "(string|boolean)",
    wrap: "boolean",
    touch: "boolean"
  },
      B = "next",
      q = "prev",
      K = "left",
      Q = "right",
      V = {
    SLIDE: "slide" + R,
    SLID: "slid" + R,
    KEYDOWN: "keydown" + R,
    MOUSEENTER: "mouseenter" + R,
    MOUSELEAVE: "mouseleave" + R,
    TOUCHSTART: "touchstart" + R,
    TOUCHMOVE: "touchmove" + R,
    TOUCHEND: "touchend" + R,
    POINTERDOWN: "pointerdown" + R,
    POINTERUP: "pointerup" + R,
    DRAG_START: "dragstart" + R,
    LOAD_DATA_API: "load" + R + F,
    CLICK_DATA_API: "click" + R + F
  },
      Y = "carousel",
      z = "active",
      X = "slide",
      G = "carousel-item-right",
      $ = "carousel-item-left",
      J = "carousel-item-next",
      Z = "carousel-item-prev",
      ee = "pointer-event",
      te = ".active",
      ne = ".active.carousel-item",
      ie = ".carousel-item",
      oe = ".carousel-item img",
      re = ".carousel-item-next, .carousel-item-prev",
      se = ".carousel-indicators",
      ae = "[data-slide], [data-slide-to]",
      le = '[data-ride="carousel"]',
      ce = {
    TOUCH: "touch",
    PEN: "pen"
  },
      he = function () {
    function r(e, t) {
      this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(t), this._element = e, this._indicatorsElement = this._element.querySelector(se), this._touchSupported = "ontouchstart" in document.documentElement || 0 < navigator.maxTouchPoints, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners();
    }

    var e = r.prototype;
    return e.next = function () {
      this._isSliding || this._slide(B);
    }, e.nextWhenVisible = function () {
      !document.hidden && p(this._element).is(":visible") && "hidden" !== p(this._element).css("visibility") && this.next();
    }, e.prev = function () {
      this._isSliding || this._slide(q);
    }, e.pause = function (e) {
      e || (this._isPaused = !0), this._element.querySelector(re) && (m.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
    }, e.cycle = function (e) {
      e || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
    }, e.to = function (e) {
      var t = this;
      this._activeElement = this._element.querySelector(ne);

      var n = this._getItemIndex(this._activeElement);

      if (!(e > this._items.length - 1 || e < 0)) if (this._isSliding) p(this._element).one(V.SLID, function () {
        return t.to(e);
      });else {
        if (n === e) return this.pause(), void this.cycle();
        var i = n < e ? B : q;

        this._slide(i, this._items[e]);
      }
    }, e.dispose = function () {
      p(this._element).off(R), p.removeData(this._element, H), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
    }, e._getConfig = function (e) {
      return e = l({}, W, {}, e), m.typeCheckConfig(j, e, U), e;
    }, e._handleSwipe = function () {
      var e = Math.abs(this.touchDeltaX);

      if (!(e <= 40)) {
        var t = e / this.touchDeltaX;
        (this.touchDeltaX = 0) < t && this.prev(), t < 0 && this.next();
      }
    }, e._addEventListeners = function () {
      var t = this;
      this._config.keyboard && p(this._element).on(V.KEYDOWN, function (e) {
        return t._keydown(e);
      }), "hover" === this._config.pause && p(this._element).on(V.MOUSEENTER, function (e) {
        return t.pause(e);
      }).on(V.MOUSELEAVE, function (e) {
        return t.cycle(e);
      }), this._config.touch && this._addTouchEventListeners();
    }, e._addTouchEventListeners = function () {
      var t = this;

      if (this._touchSupported) {
        var n = function n(e) {
          t._pointerEvent && ce[e.originalEvent.pointerType.toUpperCase()] ? t.touchStartX = e.originalEvent.clientX : t._pointerEvent || (t.touchStartX = e.originalEvent.touches[0].clientX);
        },
            i = function i(e) {
          t._pointerEvent && ce[e.originalEvent.pointerType.toUpperCase()] && (t.touchDeltaX = e.originalEvent.clientX - t.touchStartX), t._handleSwipe(), "hover" === t._config.pause && (t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {
            return t.cycle(e);
          }, 500 + t._config.interval));
        };

        p(this._element.querySelectorAll(oe)).on(V.DRAG_START, function (e) {
          return e.preventDefault();
        }), this._pointerEvent ? (p(this._element).on(V.POINTERDOWN, function (e) {
          return n(e);
        }), p(this._element).on(V.POINTERUP, function (e) {
          return i(e);
        }), this._element.classList.add(ee)) : (p(this._element).on(V.TOUCHSTART, function (e) {
          return n(e);
        }), p(this._element).on(V.TOUCHMOVE, function (e) {
          return function (e) {
            e.originalEvent.touches && 1 < e.originalEvent.touches.length ? t.touchDeltaX = 0 : t.touchDeltaX = e.originalEvent.touches[0].clientX - t.touchStartX;
          }(e);
        }), p(this._element).on(V.TOUCHEND, function (e) {
          return i(e);
        }));
      }
    }, e._keydown = function (e) {
      if (!/input|textarea/i.test(e.target.tagName)) switch (e.which) {
        case 37:
          e.preventDefault(), this.prev();
          break;

        case 39:
          e.preventDefault(), this.next();
      }
    }, e._getItemIndex = function (e) {
      return this._items = e && e.parentNode ? [].slice.call(e.parentNode.querySelectorAll(ie)) : [], this._items.indexOf(e);
    }, e._getItemByDirection = function (e, t) {
      var n = e === B,
          i = e === q,
          o = this._getItemIndex(t),
          r = this._items.length - 1;

      if ((i && 0 === o || n && o === r) && !this._config.wrap) return t;
      var s = (o + (e === q ? -1 : 1)) % this._items.length;
      return -1 == s ? this._items[this._items.length - 1] : this._items[s];
    }, e._triggerSlideEvent = function (e, t) {
      var n = this._getItemIndex(e),
          i = this._getItemIndex(this._element.querySelector(ne)),
          o = p.Event(V.SLIDE, {
        relatedTarget: e,
        direction: t,
        from: i,
        to: n
      });

      return p(this._element).trigger(o), o;
    }, e._setActiveIndicatorElement = function (e) {
      if (this._indicatorsElement) {
        var t = [].slice.call(this._indicatorsElement.querySelectorAll(te));
        p(t).removeClass(z);

        var n = this._indicatorsElement.children[this._getItemIndex(e)];

        n && p(n).addClass(z);
      }
    }, e._slide = function (e, t) {
      var n,
          i,
          o,
          r = this,
          s = this._element.querySelector(ne),
          a = this._getItemIndex(s),
          l = t || s && this._getItemByDirection(e, s),
          c = this._getItemIndex(l),
          h = Boolean(this._interval);

      if (o = e === B ? (n = $, i = J, K) : (n = G, i = Z, Q), l && p(l).hasClass(z)) this._isSliding = !1;else if (!this._triggerSlideEvent(l, o).isDefaultPrevented() && s && l) {
        this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(l);
        var u = p.Event(V.SLID, {
          relatedTarget: l,
          direction: o,
          from: a,
          to: c
        });

        if (p(this._element).hasClass(X)) {
          p(l).addClass(i), m.reflow(l), p(s).addClass(n), p(l).addClass(n);
          var f = parseInt(l.getAttribute("data-interval"), 10);
          f ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = f) : this._config.interval = this._config.defaultInterval || this._config.interval;
          var d = m.getTransitionDurationFromElement(s);
          p(s).one(m.TRANSITION_END, function () {
            p(l).removeClass(n + " " + i).addClass(z), p(s).removeClass(z + " " + i + " " + n), r._isSliding = !1, setTimeout(function () {
              return p(r._element).trigger(u);
            }, 0);
          }).emulateTransitionEnd(d);
        } else p(s).removeClass(z), p(l).addClass(z), this._isSliding = !1, p(this._element).trigger(u);

        h && this.cycle();
      }
    }, r._jQueryInterface = function (i) {
      return this.each(function () {
        var e = p(this).data(H),
            t = l({}, W, {}, p(this).data());
        "object" == _typeof(i) && (t = l({}, t, {}, i));
        var n = "string" == typeof i ? i : t.slide;
        if (e || (e = new r(this, t), p(this).data(H, e)), "number" == typeof i) e.to(i);else if ("string" == typeof n) {
          if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
          e[n]();
        } else t.interval && t.ride && (e.pause(), e.cycle());
      });
    }, r._dataApiClickHandler = function (e) {
      var t = m.getSelectorFromElement(this);

      if (t) {
        var n = p(t)[0];

        if (n && p(n).hasClass(Y)) {
          var i = l({}, p(n).data(), {}, p(this).data()),
              o = this.getAttribute("data-slide-to");
          o && (i.interval = !1), r._jQueryInterface.call(p(n), i), o && p(n).data(H).to(o), e.preventDefault();
        }
      }
    }, s(r, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function get() {
        return W;
      }
    }]), r;
  }();

  p(document).on(V.CLICK_DATA_API, ae, he._dataApiClickHandler), p(window).on(V.LOAD_DATA_API, function () {
    for (var e = [].slice.call(document.querySelectorAll(le)), t = 0, n = e.length; t < n; t++) {
      var i = p(e[t]);

      he._jQueryInterface.call(i, i.data());
    }
  }), p.fn[j] = he._jQueryInterface, p.fn[j].Constructor = he, p.fn[j].noConflict = function () {
    return p.fn[j] = M, he._jQueryInterface;
  };

  var ue = "collapse",
      fe = "bs.collapse",
      de = "." + fe,
      pe = p.fn[ue],
      me = {
    toggle: !0,
    parent: ""
  },
      ge = {
    toggle: "boolean",
    parent: "(string|element)"
  },
      _e = {
    SHOW: "show" + de,
    SHOWN: "shown" + de,
    HIDE: "hide" + de,
    HIDDEN: "hidden" + de,
    CLICK_DATA_API: "click" + de + ".data-api"
  },
      ve = "show",
      ye = "collapse",
      Ee = "collapsing",
      be = "collapsed",
      we = "width",
      Te = "height",
      Ce = ".show, .collapsing",
      Se = '[data-toggle="collapse"]',
      De = function () {
    function a(t, e) {
      this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));

      for (var n = [].slice.call(document.querySelectorAll(Se)), i = 0, o = n.length; i < o; i++) {
        var r = n[i],
            s = m.getSelectorFromElement(r),
            a = [].slice.call(document.querySelectorAll(s)).filter(function (e) {
          return e === t;
        });
        null !== s && 0 < a.length && (this._selector = s, this._triggerArray.push(r));
      }

      this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
    }

    var e = a.prototype;
    return e.toggle = function () {
      p(this._element).hasClass(ve) ? this.hide() : this.show();
    }, e.show = function () {
      var e,
          t,
          n = this;

      if (!this._isTransitioning && !p(this._element).hasClass(ve) && (this._parent && 0 === (e = [].slice.call(this._parent.querySelectorAll(Ce)).filter(function (e) {
        return "string" == typeof n._config.parent ? e.getAttribute("data-parent") === n._config.parent : e.classList.contains(ye);
      })).length && (e = null), !(e && (t = p(e).not(this._selector).data(fe)) && t._isTransitioning))) {
        var i = p.Event(_e.SHOW);

        if (p(this._element).trigger(i), !i.isDefaultPrevented()) {
          e && (a._jQueryInterface.call(p(e).not(this._selector), "hide"), t || p(e).data(fe, null));

          var o = this._getDimension();

          p(this._element).removeClass(ye).addClass(Ee), this._element.style[o] = 0, this._triggerArray.length && p(this._triggerArray).removeClass(be).attr("aria-expanded", !0), this.setTransitioning(!0);
          var r = "scroll" + (o[0].toUpperCase() + o.slice(1)),
              s = m.getTransitionDurationFromElement(this._element);
          p(this._element).one(m.TRANSITION_END, function () {
            p(n._element).removeClass(Ee).addClass(ye).addClass(ve), n._element.style[o] = "", n.setTransitioning(!1), p(n._element).trigger(_e.SHOWN);
          }).emulateTransitionEnd(s), this._element.style[o] = this._element[r] + "px";
        }
      }
    }, e.hide = function () {
      var e = this;

      if (!this._isTransitioning && p(this._element).hasClass(ve)) {
        var t = p.Event(_e.HIDE);

        if (p(this._element).trigger(t), !t.isDefaultPrevented()) {
          var n = this._getDimension();

          this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", m.reflow(this._element), p(this._element).addClass(Ee).removeClass(ye).removeClass(ve);
          var i = this._triggerArray.length;
          if (0 < i) for (var o = 0; o < i; o++) {
            var r = this._triggerArray[o],
                s = m.getSelectorFromElement(r);
            if (null !== s) p([].slice.call(document.querySelectorAll(s))).hasClass(ve) || p(r).addClass(be).attr("aria-expanded", !1);
          }
          this.setTransitioning(!0);
          this._element.style[n] = "";
          var a = m.getTransitionDurationFromElement(this._element);
          p(this._element).one(m.TRANSITION_END, function () {
            e.setTransitioning(!1), p(e._element).removeClass(Ee).addClass(ye).trigger(_e.HIDDEN);
          }).emulateTransitionEnd(a);
        }
      }
    }, e.setTransitioning = function (e) {
      this._isTransitioning = e;
    }, e.dispose = function () {
      p.removeData(this._element, fe), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
    }, e._getConfig = function (e) {
      return (e = l({}, me, {}, e)).toggle = Boolean(e.toggle), m.typeCheckConfig(ue, e, ge), e;
    }, e._getDimension = function () {
      return p(this._element).hasClass(we) ? we : Te;
    }, e._getParent = function () {
      var e,
          n = this;
      m.isElement(this._config.parent) ? (e = this._config.parent, "undefined" != typeof this._config.parent.jquery && (e = this._config.parent[0])) : e = document.querySelector(this._config.parent);
      var t = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]',
          i = [].slice.call(e.querySelectorAll(t));
      return p(i).each(function (e, t) {
        n._addAriaAndCollapsedClass(a._getTargetFromElement(t), [t]);
      }), e;
    }, e._addAriaAndCollapsedClass = function (e, t) {
      var n = p(e).hasClass(ve);
      t.length && p(t).toggleClass(be, !n).attr("aria-expanded", n);
    }, a._getTargetFromElement = function (e) {
      var t = m.getSelectorFromElement(e);
      return t ? document.querySelector(t) : null;
    }, a._jQueryInterface = function (i) {
      return this.each(function () {
        var e = p(this),
            t = e.data(fe),
            n = l({}, me, {}, e.data(), {}, "object" == _typeof(i) && i ? i : {});

        if (!t && n.toggle && /show|hide/.test(i) && (n.toggle = !1), t || (t = new a(this, n), e.data(fe, t)), "string" == typeof i) {
          if ("undefined" == typeof t[i]) throw new TypeError('No method named "' + i + '"');
          t[i]();
        }
      });
    }, s(a, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function get() {
        return me;
      }
    }]), a;
  }();

  p(document).on(_e.CLICK_DATA_API, Se, function (e) {
    "A" === e.currentTarget.tagName && e.preventDefault();
    var n = p(this),
        t = m.getSelectorFromElement(this),
        i = [].slice.call(document.querySelectorAll(t));
    p(i).each(function () {
      var e = p(this),
          t = e.data(fe) ? "toggle" : n.data();

      De._jQueryInterface.call(e, t);
    });
  }), p.fn[ue] = De._jQueryInterface, p.fn[ue].Constructor = De, p.fn[ue].noConflict = function () {
    return p.fn[ue] = pe, De._jQueryInterface;
  };

  var Ie = "undefined" != typeof window && "undefined" != typeof document && "undefined" != typeof navigator,
      Ae = function () {
    for (var e = ["Edge", "Trident", "Firefox"], t = 0; t < e.length; t += 1) {
      if (Ie && 0 <= navigator.userAgent.indexOf(e[t])) return 1;
    }

    return 0;
  }();

  var Oe = Ie && window.Promise ? function (e) {
    var t = !1;
    return function () {
      t || (t = !0, window.Promise.resolve().then(function () {
        t = !1, e();
      }));
    };
  } : function (e) {
    var t = !1;
    return function () {
      t || (t = !0, setTimeout(function () {
        t = !1, e();
      }, Ae));
    };
  };

  function Ne(e) {
    return e && "[object Function]" === {}.toString.call(e);
  }

  function ke(e, t) {
    if (1 !== e.nodeType) return [];
    var n = e.ownerDocument.defaultView.getComputedStyle(e, null);
    return t ? n[t] : n;
  }

  function Le(e) {
    return "HTML" === e.nodeName ? e : e.parentNode || e.host;
  }

  function Pe(e) {
    if (!e) return document.body;

    switch (e.nodeName) {
      case "HTML":
      case "BODY":
        return e.ownerDocument.body;

      case "#document":
        return e.body;
    }

    var t = ke(e),
        n = t.overflow,
        i = t.overflowX,
        o = t.overflowY;
    return /(auto|scroll|overlay)/.test(n + o + i) ? e : Pe(Le(e));
  }

  function xe(e) {
    return e && e.referenceNode ? e.referenceNode : e;
  }

  var je = Ie && !(!window.MSInputMethodContext || !document.documentMode),
      He = Ie && /MSIE 10/.test(navigator.userAgent);

  function Re(e) {
    return 11 === e ? je : 10 === e ? He : je || He;
  }

  function Fe(e) {
    if (!e) return document.documentElement;

    for (var t = Re(10) ? document.body : null, n = e.offsetParent || null; n === t && e.nextElementSibling;) {
      n = (e = e.nextElementSibling).offsetParent;
    }

    var i = n && n.nodeName;
    return i && "BODY" !== i && "HTML" !== i ? -1 !== ["TH", "TD", "TABLE"].indexOf(n.nodeName) && "static" === ke(n, "position") ? Fe(n) : n : e ? e.ownerDocument.documentElement : document.documentElement;
  }

  function Me(e) {
    return null !== e.parentNode ? Me(e.parentNode) : e;
  }

  function We(e, t) {
    if (!(e && e.nodeType && t && t.nodeType)) return document.documentElement;
    var n = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
        i = n ? e : t,
        o = n ? t : e,
        r = document.createRange();
    r.setStart(i, 0), r.setEnd(o, 0);
    var s = r.commonAncestorContainer;
    if (e !== s && t !== s || i.contains(o)) return function (e) {
      var t = e.nodeName;
      return "BODY" !== t && ("HTML" === t || Fe(e.firstElementChild) === e);
    }(s) ? s : Fe(s);
    var a = Me(e);
    return a.host ? We(a.host, t) : We(e, Me(t).host);
  }

  function Ue(e, t) {
    var n = "top" === (1 < arguments.length && void 0 !== t ? t : "top") ? "scrollTop" : "scrollLeft",
        i = e.nodeName;
    if ("BODY" !== i && "HTML" !== i) return e[n];
    var o = e.ownerDocument.documentElement;
    return (e.ownerDocument.scrollingElement || o)[n];
  }

  function Be(e, t) {
    var n = "x" === t ? "Left" : "Top",
        i = "Left" == n ? "Right" : "Bottom";
    return parseFloat(e["border" + n + "Width"], 10) + parseFloat(e["border" + i + "Width"], 10);
  }

  function qe(e, t, n, i) {
    return Math.max(t["offset" + e], t["scroll" + e], n["client" + e], n["offset" + e], n["scroll" + e], Re(10) ? parseInt(n["offset" + e]) + parseInt(i["margin" + ("Height" === e ? "Top" : "Left")]) + parseInt(i["margin" + ("Height" === e ? "Bottom" : "Right")]) : 0);
  }

  function Ke(e) {
    var t = e.body,
        n = e.documentElement,
        i = Re(10) && getComputedStyle(n);
    return {
      height: qe("Height", t, n, i),
      width: qe("Width", t, n, i)
    };
  }

  var Qe = function Qe(e, t, n) {
    return t && Ve(e.prototype, t), n && Ve(e, n), e;
  };

  function Ve(e, t) {
    for (var n = 0; n < t.length; n++) {
      var i = t[n];
      i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
    }
  }

  function Ye(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }

  var ze = Object.assign || function (e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];

      for (var i in n) {
        Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i]);
      }
    }

    return e;
  };

  function Xe(e) {
    return ze({}, e, {
      right: e.left + e.width,
      bottom: e.top + e.height
    });
  }

  function Ge(e) {
    var t = {};

    try {
      if (Re(10)) {
        t = e.getBoundingClientRect();
        var n = Ue(e, "top"),
            i = Ue(e, "left");
        t.top += n, t.left += i, t.bottom += n, t.right += i;
      } else t = e.getBoundingClientRect();
    } catch (e) {}

    var o = {
      left: t.left,
      top: t.top,
      width: t.right - t.left,
      height: t.bottom - t.top
    },
        r = "HTML" === e.nodeName ? Ke(e.ownerDocument) : {},
        s = r.width || e.clientWidth || o.width,
        a = r.height || e.clientHeight || o.height,
        l = e.offsetWidth - s,
        c = e.offsetHeight - a;

    if (l || c) {
      var h = ke(e);
      l -= Be(h, "x"), c -= Be(h, "y"), o.width -= l, o.height -= c;
    }

    return Xe(o);
  }

  function $e(e, t, n) {
    var i = 2 < arguments.length && void 0 !== n && n,
        o = Re(10),
        r = "HTML" === t.nodeName,
        s = Ge(e),
        a = Ge(t),
        l = Pe(e),
        c = ke(t),
        h = parseFloat(c.borderTopWidth, 10),
        u = parseFloat(c.borderLeftWidth, 10);
    i && r && (a.top = Math.max(a.top, 0), a.left = Math.max(a.left, 0));
    var f = Xe({
      top: s.top - a.top - h,
      left: s.left - a.left - u,
      width: s.width,
      height: s.height
    });

    if (f.marginTop = 0, f.marginLeft = 0, !o && r) {
      var d = parseFloat(c.marginTop, 10),
          p = parseFloat(c.marginLeft, 10);
      f.top -= h - d, f.bottom -= h - d, f.left -= u - p, f.right -= u - p, f.marginTop = d, f.marginLeft = p;
    }

    return (o && !i ? t.contains(l) : t === l && "BODY" !== l.nodeName) && (f = function (e, t, n) {
      var i = 2 < arguments.length && void 0 !== n && n,
          o = Ue(t, "top"),
          r = Ue(t, "left"),
          s = i ? -1 : 1;
      return e.top += o * s, e.bottom += o * s, e.left += r * s, e.right += r * s, e;
    }(f, t)), f;
  }

  function Je(e) {
    if (!e || !e.parentElement || Re()) return document.documentElement;

    for (var t = e.parentElement; t && "none" === ke(t, "transform");) {
      t = t.parentElement;
    }

    return t || document.documentElement;
  }

  function Ze(e, t, n, i, o) {
    var r = 4 < arguments.length && void 0 !== o && o,
        s = {
      top: 0,
      left: 0
    },
        a = r ? Je(e) : We(e, xe(t));
    if ("viewport" === i) s = function (e, t) {
      var n = 1 < arguments.length && void 0 !== t && t,
          i = e.ownerDocument.documentElement,
          o = $e(e, i),
          r = Math.max(i.clientWidth, window.innerWidth || 0),
          s = Math.max(i.clientHeight, window.innerHeight || 0),
          a = n ? 0 : Ue(i),
          l = n ? 0 : Ue(i, "left");
      return Xe({
        top: a - o.top + o.marginTop,
        left: l - o.left + o.marginLeft,
        width: r,
        height: s
      });
    }(a, r);else {
      var l = void 0;
      "scrollParent" === i ? "BODY" === (l = Pe(Le(t))).nodeName && (l = e.ownerDocument.documentElement) : l = "window" === i ? e.ownerDocument.documentElement : i;
      var c = $e(l, a, r);
      if ("HTML" !== l.nodeName || function e(t) {
        var n = t.nodeName;
        if ("BODY" === n || "HTML" === n) return !1;
        if ("fixed" === ke(t, "position")) return !0;
        var i = Le(t);
        return !!i && e(i);
      }(a)) s = c;else {
        var h = Ke(e.ownerDocument),
            u = h.height,
            f = h.width;
        s.top += c.top - c.marginTop, s.bottom = u + c.top, s.left += c.left - c.marginLeft, s.right = f + c.left;
      }
    }
    var d = "number" == typeof (n = n || 0);
    return s.left += d ? n : n.left || 0, s.top += d ? n : n.top || 0, s.right -= d ? n : n.right || 0, s.bottom -= d ? n : n.bottom || 0, s;
  }

  function et(e, t, i, n, o, r) {
    var s = 5 < arguments.length && void 0 !== r ? r : 0;
    if (-1 === e.indexOf("auto")) return e;
    var a = Ze(i, n, s, o),
        l = {
      top: {
        width: a.width,
        height: t.top - a.top
      },
      right: {
        width: a.right - t.right,
        height: a.height
      },
      bottom: {
        width: a.width,
        height: a.bottom - t.bottom
      },
      left: {
        width: t.left - a.left,
        height: a.height
      }
    },
        c = Object.keys(l).map(function (e) {
      return ze({
        key: e
      }, l[e], {
        area: function (e) {
          return e.width * e.height;
        }(l[e])
      });
    }).sort(function (e, t) {
      return t.area - e.area;
    }),
        h = c.filter(function (e) {
      var t = e.width,
          n = e.height;
      return t >= i.clientWidth && n >= i.clientHeight;
    }),
        u = 0 < h.length ? h[0].key : c[0].key,
        f = e.split("-")[1];
    return u + (f ? "-" + f : "");
  }

  function tt(e, t, n, i) {
    var o = 3 < arguments.length && void 0 !== i ? i : null;
    return $e(n, o ? Je(t) : We(t, xe(n)), o);
  }

  function nt(e) {
    var t = e.ownerDocument.defaultView.getComputedStyle(e),
        n = parseFloat(t.marginTop || 0) + parseFloat(t.marginBottom || 0),
        i = parseFloat(t.marginLeft || 0) + parseFloat(t.marginRight || 0);
    return {
      width: e.offsetWidth + i,
      height: e.offsetHeight + n
    };
  }

  function it(e) {
    var t = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    return e.replace(/left|right|bottom|top/g, function (e) {
      return t[e];
    });
  }

  function ot(e, t, n) {
    n = n.split("-")[0];
    var i = nt(e),
        o = {
      width: i.width,
      height: i.height
    },
        r = -1 !== ["right", "left"].indexOf(n),
        s = r ? "top" : "left",
        a = r ? "left" : "top",
        l = r ? "height" : "width",
        c = r ? "width" : "height";
    return o[s] = t[s] + t[l] / 2 - i[l] / 2, o[a] = n === a ? t[a] - i[c] : t[it(a)], o;
  }

  function rt(e, t) {
    return Array.prototype.find ? e.find(t) : e.filter(t)[0];
  }

  function st(e, n, t) {
    return (void 0 === t ? e : e.slice(0, function (e, t, n) {
      if (Array.prototype.findIndex) return e.findIndex(function (e) {
        return e[t] === n;
      });
      var i = rt(e, function (e) {
        return e[t] === n;
      });
      return e.indexOf(i);
    }(e, "name", t))).forEach(function (e) {
      e["function"] && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
      var t = e["function"] || e.fn;
      e.enabled && Ne(t) && (n.offsets.popper = Xe(n.offsets.popper), n.offsets.reference = Xe(n.offsets.reference), n = t(n, e));
    }), n;
  }

  function at(e, n) {
    return e.some(function (e) {
      var t = e.name;
      return e.enabled && t === n;
    });
  }

  function lt(e) {
    for (var t = [!1, "ms", "Webkit", "Moz", "O"], n = e.charAt(0).toUpperCase() + e.slice(1), i = 0; i < t.length; i++) {
      var o = t[i],
          r = o ? "" + o + n : e;
      if ("undefined" != typeof document.body.style[r]) return r;
    }

    return null;
  }

  function ct(e) {
    var t = e.ownerDocument;
    return t ? t.defaultView : window;
  }

  function ht(e, t, n, i) {
    n.updateBound = i, ct(e).addEventListener("resize", n.updateBound, {
      passive: !0
    });
    var o = Pe(e);
    return function e(t, n, i, o) {
      var r = "BODY" === t.nodeName,
          s = r ? t.ownerDocument.defaultView : t;
      s.addEventListener(n, i, {
        passive: !0
      }), r || e(Pe(s.parentNode), n, i, o), o.push(s);
    }(o, "scroll", n.updateBound, n.scrollParents), n.scrollElement = o, n.eventsEnabled = !0, n;
  }

  function ut() {
    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = function (e, t) {
      return ct(e).removeEventListener("resize", t.updateBound), t.scrollParents.forEach(function (e) {
        e.removeEventListener("scroll", t.updateBound);
      }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;
    }(this.reference, this.state));
  }

  function ft(e) {
    return "" !== e && !isNaN(parseFloat(e)) && isFinite(e);
  }

  function dt(n, i) {
    Object.keys(i).forEach(function (e) {
      var t = "";
      -1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(e) && ft(i[e]) && (t = "px"), n.style[e] = i[e] + t;
    });
  }

  function pt(e, t) {
    function n(e) {
      return e;
    }

    var i = e.offsets,
        o = i.popper,
        r = i.reference,
        s = Math.round,
        a = Math.floor,
        l = s(r.width),
        c = s(o.width),
        h = -1 !== ["left", "right"].indexOf(e.placement),
        u = -1 !== e.placement.indexOf("-"),
        f = t ? h || u || l % 2 == c % 2 ? s : a : n,
        d = t ? s : n;
    return {
      left: f(l % 2 == 1 && c % 2 == 1 && !u && t ? o.left - 1 : o.left),
      top: d(o.top),
      bottom: d(o.bottom),
      right: f(o.right)
    };
  }

  var mt = Ie && /Firefox/i.test(navigator.userAgent);

  function gt(e, t, n) {
    var i = rt(e, function (e) {
      return e.name === t;
    }),
        o = !!i && e.some(function (e) {
      return e.name === n && e.enabled && e.order < i.order;
    });

    if (!o) {
      var r = "`" + t + "`",
          s = "`" + n + "`";
      console.warn(s + " modifier is required by " + r + " modifier in order to work, be sure to include it before " + r + "!");
    }

    return o;
  }

  var _t = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
      vt = _t.slice(3);

  function yt(e, t) {
    var n = 1 < arguments.length && void 0 !== t && t,
        i = vt.indexOf(e),
        o = vt.slice(i + 1).concat(vt.slice(0, i));
    return n ? o.reverse() : o;
  }

  var Et = "flip",
      bt = "clockwise",
      wt = "counterclockwise";

  function Tt(e, o, r, t) {
    var s = [0, 0],
        a = -1 !== ["right", "left"].indexOf(t),
        n = e.split(/(\+|\-)/).map(function (e) {
      return e.trim();
    }),
        i = n.indexOf(rt(n, function (e) {
      return -1 !== e.search(/,|\s/);
    }));
    n[i] && -1 === n[i].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
    var l = /\s*,\s*|\s+/,
        c = -1 !== i ? [n.slice(0, i).concat([n[i].split(l)[0]]), [n[i].split(l)[1]].concat(n.slice(i + 1))] : [n];
    return (c = c.map(function (e, t) {
      var n = (1 === t ? !a : a) ? "height" : "width",
          i = !1;
      return e.reduce(function (e, t) {
        return "" === e[e.length - 1] && -1 !== ["+", "-"].indexOf(t) ? (e[e.length - 1] = t, i = !0, e) : i ? (e[e.length - 1] += t, i = !1, e) : e.concat(t);
      }, []).map(function (e) {
        return function (e, t, n, i) {
          var o = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
              r = +o[1],
              s = o[2];
          if (!r) return e;
          if (0 !== s.indexOf("%")) return "vh" !== s && "vw" !== s ? r : ("vh" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * r;
          var a = void 0;

          switch (s) {
            case "%p":
              a = n;
              break;

            case "%":
            case "%r":
            default:
              a = i;
          }

          return Xe(a)[t] / 100 * r;
        }(e, n, o, r);
      });
    })).forEach(function (n, i) {
      n.forEach(function (e, t) {
        ft(e) && (s[i] += e * ("-" === n[t - 1] ? -1 : 1));
      });
    }), s;
  }

  var Ct = {
    placement: "bottom",
    positionFixed: !1,
    eventsEnabled: !0,
    removeOnDestroy: !1,
    onCreate: function onCreate() {},
    onUpdate: function onUpdate() {},
    modifiers: {
      shift: {
        order: 100,
        enabled: !0,
        fn: function fn(e) {
          var t = e.placement,
              n = t.split("-")[0],
              i = t.split("-")[1];

          if (i) {
            var o = e.offsets,
                r = o.reference,
                s = o.popper,
                a = -1 !== ["bottom", "top"].indexOf(n),
                l = a ? "left" : "top",
                c = a ? "width" : "height",
                h = {
              start: Ye({}, l, r[l]),
              end: Ye({}, l, r[l] + r[c] - s[c])
            };
            e.offsets.popper = ze({}, s, h[i]);
          }

          return e;
        }
      },
      offset: {
        order: 200,
        enabled: !0,
        fn: function fn(e, t) {
          var n = t.offset,
              i = e.placement,
              o = e.offsets,
              r = o.popper,
              s = o.reference,
              a = i.split("-")[0],
              l = void 0;
          return l = ft(+n) ? [+n, 0] : Tt(n, r, s, a), "left" === a ? (r.top += l[0], r.left -= l[1]) : "right" === a ? (r.top += l[0], r.left += l[1]) : "top" === a ? (r.left += l[0], r.top -= l[1]) : "bottom" === a && (r.left += l[0], r.top += l[1]), e.popper = r, e;
        },
        offset: 0
      },
      preventOverflow: {
        order: 300,
        enabled: !0,
        fn: function fn(e, i) {
          var t = i.boundariesElement || Fe(e.instance.popper);
          e.instance.reference === t && (t = Fe(t));
          var n = lt("transform"),
              o = e.instance.popper.style,
              r = o.top,
              s = o.left,
              a = o[n];
          o.top = "", o.left = "", o[n] = "";
          var l = Ze(e.instance.popper, e.instance.reference, i.padding, t, e.positionFixed);
          o.top = r, o.left = s, o[n] = a, i.boundaries = l;
          var c = i.priority,
              h = e.offsets.popper,
              u = {
            primary: function primary(e) {
              var t = h[e];
              return h[e] < l[e] && !i.escapeWithReference && (t = Math.max(h[e], l[e])), Ye({}, e, t);
            },
            secondary: function secondary(e) {
              var t = "right" === e ? "left" : "top",
                  n = h[t];
              return h[e] > l[e] && !i.escapeWithReference && (n = Math.min(h[t], l[e] - ("right" === e ? h.width : h.height))), Ye({}, t, n);
            }
          };
          return c.forEach(function (e) {
            var t = -1 !== ["left", "top"].indexOf(e) ? "primary" : "secondary";
            h = ze({}, h, u[t](e));
          }), e.offsets.popper = h, e;
        },
        priority: ["left", "right", "top", "bottom"],
        padding: 5,
        boundariesElement: "scrollParent"
      },
      keepTogether: {
        order: 400,
        enabled: !0,
        fn: function fn(e) {
          var t = e.offsets,
              n = t.popper,
              i = t.reference,
              o = e.placement.split("-")[0],
              r = Math.floor,
              s = -1 !== ["top", "bottom"].indexOf(o),
              a = s ? "right" : "bottom",
              l = s ? "left" : "top",
              c = s ? "width" : "height";
          return n[a] < r(i[l]) && (e.offsets.popper[l] = r(i[l]) - n[c]), n[l] > r(i[a]) && (e.offsets.popper[l] = r(i[a])), e;
        }
      },
      arrow: {
        order: 500,
        enabled: !0,
        fn: function fn(e, t) {
          var n;
          if (!gt(e.instance.modifiers, "arrow", "keepTogether")) return e;
          var i = t.element;

          if ("string" == typeof i) {
            if (!(i = e.instance.popper.querySelector(i))) return e;
          } else if (!e.instance.popper.contains(i)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), e;

          var o = e.placement.split("-")[0],
              r = e.offsets,
              s = r.popper,
              a = r.reference,
              l = -1 !== ["left", "right"].indexOf(o),
              c = l ? "height" : "width",
              h = l ? "Top" : "Left",
              u = h.toLowerCase(),
              f = l ? "left" : "top",
              d = l ? "bottom" : "right",
              p = nt(i)[c];
          a[d] - p < s[u] && (e.offsets.popper[u] -= s[u] - (a[d] - p)), a[u] + p > s[d] && (e.offsets.popper[u] += a[u] + p - s[d]), e.offsets.popper = Xe(e.offsets.popper);

          var m = a[u] + a[c] / 2 - p / 2,
              g = ke(e.instance.popper),
              _ = parseFloat(g["margin" + h], 10),
              v = parseFloat(g["border" + h + "Width"], 10),
              y = m - e.offsets.popper[u] - _ - v;

          return y = Math.max(Math.min(s[c] - p, y), 0), e.arrowElement = i, e.offsets.arrow = (Ye(n = {}, u, Math.round(y)), Ye(n, f, ""), n), e;
        },
        element: "[x-arrow]"
      },
      flip: {
        order: 600,
        enabled: !0,
        fn: function fn(m, g) {
          if (at(m.instance.modifiers, "inner")) return m;
          if (m.flipped && m.placement === m.originalPlacement) return m;

          var _ = Ze(m.instance.popper, m.instance.reference, g.padding, g.boundariesElement, m.positionFixed),
              v = m.placement.split("-")[0],
              y = it(v),
              E = m.placement.split("-")[1] || "",
              b = [];

          switch (g.behavior) {
            case Et:
              b = [v, y];
              break;

            case bt:
              b = yt(v);
              break;

            case wt:
              b = yt(v, !0);
              break;

            default:
              b = g.behavior;
          }

          return b.forEach(function (e, t) {
            if (v !== e || b.length === t + 1) return m;
            v = m.placement.split("-")[0], y = it(v);
            var n = m.offsets.popper,
                i = m.offsets.reference,
                o = Math.floor,
                r = "left" === v && o(n.right) > o(i.left) || "right" === v && o(n.left) < o(i.right) || "top" === v && o(n.bottom) > o(i.top) || "bottom" === v && o(n.top) < o(i.bottom),
                s = o(n.left) < o(_.left),
                a = o(n.right) > o(_.right),
                l = o(n.top) < o(_.top),
                c = o(n.bottom) > o(_.bottom),
                h = "left" === v && s || "right" === v && a || "top" === v && l || "bottom" === v && c,
                u = -1 !== ["top", "bottom"].indexOf(v),
                f = !!g.flipVariations && (u && "start" === E && s || u && "end" === E && a || !u && "start" === E && l || !u && "end" === E && c),
                d = !!g.flipVariationsByContent && (u && "start" === E && a || u && "end" === E && s || !u && "start" === E && c || !u && "end" === E && l),
                p = f || d;
            (r || h || p) && (m.flipped = !0, (r || h) && (v = b[t + 1]), p && (E = function (e) {
              return "end" === e ? "start" : "start" === e ? "end" : e;
            }(E)), m.placement = v + (E ? "-" + E : ""), m.offsets.popper = ze({}, m.offsets.popper, ot(m.instance.popper, m.offsets.reference, m.placement)), m = st(m.instance.modifiers, m, "flip"));
          }), m;
        },
        behavior: "flip",
        padding: 5,
        boundariesElement: "viewport",
        flipVariations: !1,
        flipVariationsByContent: !1
      },
      inner: {
        order: 700,
        enabled: !1,
        fn: function fn(e) {
          var t = e.placement,
              n = t.split("-")[0],
              i = e.offsets,
              o = i.popper,
              r = i.reference,
              s = -1 !== ["left", "right"].indexOf(n),
              a = -1 === ["top", "left"].indexOf(n);
          return o[s ? "left" : "top"] = r[n] - (a ? o[s ? "width" : "height"] : 0), e.placement = it(t), e.offsets.popper = Xe(o), e;
        }
      },
      hide: {
        order: 800,
        enabled: !0,
        fn: function fn(e) {
          if (!gt(e.instance.modifiers, "hide", "preventOverflow")) return e;
          var t = e.offsets.reference,
              n = rt(e.instance.modifiers, function (e) {
            return "preventOverflow" === e.name;
          }).boundaries;

          if (t.bottom < n.top || t.left > n.right || t.top > n.bottom || t.right < n.left) {
            if (!0 === e.hide) return e;
            e.hide = !0, e.attributes["x-out-of-boundaries"] = "";
          } else {
            if (!1 === e.hide) return e;
            e.hide = !1, e.attributes["x-out-of-boundaries"] = !1;
          }

          return e;
        }
      },
      computeStyle: {
        order: 850,
        enabled: !0,
        fn: function fn(e, t) {
          var n = t.x,
              i = t.y,
              o = e.offsets.popper,
              r = rt(e.instance.modifiers, function (e) {
            return "applyStyle" === e.name;
          }).gpuAcceleration;
          void 0 !== r && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
          var s = void 0 !== r ? r : t.gpuAcceleration,
              a = Fe(e.instance.popper),
              l = Ge(a),
              c = {
            position: o.position
          },
              h = pt(e, window.devicePixelRatio < 2 || !mt),
              u = "bottom" === n ? "top" : "bottom",
              f = "right" === i ? "left" : "right",
              d = lt("transform"),
              p = void 0,
              m = void 0;
          if (m = "bottom" == u ? "HTML" === a.nodeName ? -a.clientHeight + h.bottom : -l.height + h.bottom : h.top, p = "right" == f ? "HTML" === a.nodeName ? -a.clientWidth + h.right : -l.width + h.right : h.left, s && d) c[d] = "translate3d(" + p + "px, " + m + "px, 0)", c[u] = 0, c[f] = 0, c.willChange = "transform";else {
            var g = "bottom" == u ? -1 : 1,
                _ = "right" == f ? -1 : 1;

            c[u] = m * g, c[f] = p * _, c.willChange = u + ", " + f;
          }
          var v = {
            "x-placement": e.placement
          };
          return e.attributes = ze({}, v, e.attributes), e.styles = ze({}, c, e.styles), e.arrowStyles = ze({}, e.offsets.arrow, e.arrowStyles), e;
        },
        gpuAcceleration: !0,
        x: "bottom",
        y: "right"
      },
      applyStyle: {
        order: 900,
        enabled: !0,
        fn: function fn(e) {
          return dt(e.instance.popper, e.styles), function (t, n) {
            Object.keys(n).forEach(function (e) {
              !1 !== n[e] ? t.setAttribute(e, n[e]) : t.removeAttribute(e);
            });
          }(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && dt(e.arrowElement, e.arrowStyles), e;
        },
        onLoad: function onLoad(e, t, n, i, o) {
          var r = tt(o, t, e, n.positionFixed),
              s = et(n.placement, r, t, e, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
          return t.setAttribute("x-placement", s), dt(t, {
            position: n.positionFixed ? "fixed" : "absolute"
          }), n;
        },
        gpuAcceleration: void 0
      }
    }
  },
      St = (Qe(Dt, [{
    key: "update",
    value: function value() {
      return function () {
        if (!this.state.isDestroyed) {
          var e = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: !1,
            offsets: {}
          };
          e.offsets.reference = tt(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = et(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = ot(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", e = st(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
        }
      }.call(this);
    }
  }, {
    key: "destroy",
    value: function value() {
      return function () {
        return this.state.isDestroyed = !0, at(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[lt("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
      }.call(this);
    }
  }, {
    key: "enableEventListeners",
    value: function value() {
      return function () {
        this.state.eventsEnabled || (this.state = ht(this.reference, this.options, this.state, this.scheduleUpdate));
      }.call(this);
    }
  }, {
    key: "disableEventListeners",
    value: function value() {
      return ut.call(this);
    }
  }]), Dt);

  function Dt(e, t) {
    var n = this,
        i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
    !function (e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }(this, Dt), this.scheduleUpdate = function () {
      return requestAnimationFrame(n.update);
    }, this.update = Oe(this.update.bind(this)), this.options = ze({}, Dt.Defaults, i), this.state = {
      isDestroyed: !1,
      isCreated: !1,
      scrollParents: []
    }, this.reference = e && e.jquery ? e[0] : e, this.popper = t && t.jquery ? t[0] : t, this.options.modifiers = {}, Object.keys(ze({}, Dt.Defaults.modifiers, i.modifiers)).forEach(function (e) {
      n.options.modifiers[e] = ze({}, Dt.Defaults.modifiers[e] || {}, i.modifiers ? i.modifiers[e] : {});
    }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {
      return ze({
        name: e
      }, n.options.modifiers[e]);
    }).sort(function (e, t) {
      return e.order - t.order;
    }), this.modifiers.forEach(function (e) {
      e.enabled && Ne(e.onLoad) && e.onLoad(n.reference, n.popper, n.options, e, n.state);
    }), this.update();
    var o = this.options.eventsEnabled;
    o && this.enableEventListeners(), this.state.eventsEnabled = o;
  }

  St.Utils = ("undefined" != typeof window ? window : global).PopperUtils, St.placements = _t, St.Defaults = Ct;

  var It = "dropdown",
      At = "bs.dropdown",
      Ot = "." + At,
      Nt = ".data-api",
      kt = p.fn[It],
      Lt = new RegExp("38|40|27"),
      Pt = {
    HIDE: "hide" + Ot,
    HIDDEN: "hidden" + Ot,
    SHOW: "show" + Ot,
    SHOWN: "shown" + Ot,
    CLICK: "click" + Ot,
    CLICK_DATA_API: "click" + Ot + Nt,
    KEYDOWN_DATA_API: "keydown" + Ot + Nt,
    KEYUP_DATA_API: "keyup" + Ot + Nt
  },
      xt = "disabled",
      jt = "show",
      Ht = "dropup",
      Rt = "dropright",
      Ft = "dropleft",
      Mt = "dropdown-menu-right",
      Wt = "position-static",
      Ut = '[data-toggle="dropdown"]',
      Bt = ".dropdown form",
      qt = ".dropdown-menu",
      Kt = ".navbar-nav",
      Qt = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
      Vt = "top-start",
      Yt = "top-end",
      zt = "bottom-start",
      Xt = "bottom-end",
      Gt = "right-start",
      $t = "left-start",
      Jt = {
    offset: 0,
    flip: !0,
    boundary: "scrollParent",
    reference: "toggle",
    display: "dynamic",
    popperConfig: null
  },
      Zt = {
    offset: "(number|string|function)",
    flip: "boolean",
    boundary: "(string|element)",
    reference: "(string|element)",
    display: "string",
    popperConfig: "(null|object)"
  },
      en = function () {
    function c(e, t) {
      this._element = e, this._popper = null, this._config = this._getConfig(t), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
    }

    var e = c.prototype;
    return e.toggle = function () {
      if (!this._element.disabled && !p(this._element).hasClass(xt)) {
        var e = p(this._menu).hasClass(jt);
        c._clearMenus(), e || this.show(!0);
      }
    }, e.show = function (e) {
      if (void 0 === e && (e = !1), !(this._element.disabled || p(this._element).hasClass(xt) || p(this._menu).hasClass(jt))) {
        var t = {
          relatedTarget: this._element
        },
            n = p.Event(Pt.SHOW, t),
            i = c._getParentFromElement(this._element);

        if (p(i).trigger(n), !n.isDefaultPrevented()) {
          if (!this._inNavbar && e) {
            if ("undefined" == typeof St) throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");
            var o = this._element;
            "parent" === this._config.reference ? o = i : m.isElement(this._config.reference) && (o = this._config.reference, "undefined" != typeof this._config.reference.jquery && (o = this._config.reference[0])), "scrollParent" !== this._config.boundary && p(i).addClass(Wt), this._popper = new St(o, this._menu, this._getPopperConfig());
          }

          "ontouchstart" in document.documentElement && 0 === p(i).closest(Kt).length && p(document.body).children().on("mouseover", null, p.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), p(this._menu).toggleClass(jt), p(i).toggleClass(jt).trigger(p.Event(Pt.SHOWN, t));
        }
      }
    }, e.hide = function () {
      if (!this._element.disabled && !p(this._element).hasClass(xt) && p(this._menu).hasClass(jt)) {
        var e = {
          relatedTarget: this._element
        },
            t = p.Event(Pt.HIDE, e),
            n = c._getParentFromElement(this._element);

        p(n).trigger(t), t.isDefaultPrevented() || (this._popper && this._popper.destroy(), p(this._menu).toggleClass(jt), p(n).toggleClass(jt).trigger(p.Event(Pt.HIDDEN, e)));
      }
    }, e.dispose = function () {
      p.removeData(this._element, At), p(this._element).off(Ot), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);
    }, e.update = function () {
      this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
    }, e._addEventListeners = function () {
      var t = this;
      p(this._element).on(Pt.CLICK, function (e) {
        e.preventDefault(), e.stopPropagation(), t.toggle();
      });
    }, e._getConfig = function (e) {
      return e = l({}, this.constructor.Default, {}, p(this._element).data(), {}, e), m.typeCheckConfig(It, e, this.constructor.DefaultType), e;
    }, e._getMenuElement = function () {
      if (!this._menu) {
        var e = c._getParentFromElement(this._element);

        e && (this._menu = e.querySelector(qt));
      }

      return this._menu;
    }, e._getPlacement = function () {
      var e = p(this._element.parentNode),
          t = zt;
      return e.hasClass(Ht) ? (t = Vt, p(this._menu).hasClass(Mt) && (t = Yt)) : e.hasClass(Rt) ? t = Gt : e.hasClass(Ft) ? t = $t : p(this._menu).hasClass(Mt) && (t = Xt), t;
    }, e._detectNavbar = function () {
      return 0 < p(this._element).closest(".navbar").length;
    }, e._getOffset = function () {
      var t = this,
          e = {};
      return "function" == typeof this._config.offset ? e.fn = function (e) {
        return e.offsets = l({}, e.offsets, {}, t._config.offset(e.offsets, t._element) || {}), e;
      } : e.offset = this._config.offset, e;
    }, e._getPopperConfig = function () {
      var e = {
        placement: this._getPlacement(),
        modifiers: {
          offset: this._getOffset(),
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      };
      return "static" === this._config.display && (e.modifiers.applyStyle = {
        enabled: !1
      }), l({}, e, {}, this._config.popperConfig);
    }, c._jQueryInterface = function (t) {
      return this.each(function () {
        var e = p(this).data(At);

        if (e || (e = new c(this, "object" == _typeof(t) ? t : null), p(this).data(At, e)), "string" == typeof t) {
          if ("undefined" == typeof e[t]) throw new TypeError('No method named "' + t + '"');
          e[t]();
        }
      });
    }, c._clearMenus = function (e) {
      if (!e || 3 !== e.which && ("keyup" !== e.type || 9 === e.which)) for (var t = [].slice.call(document.querySelectorAll(Ut)), n = 0, i = t.length; n < i; n++) {
        var o = c._getParentFromElement(t[n]),
            r = p(t[n]).data(At),
            s = {
          relatedTarget: t[n]
        };

        if (e && "click" === e.type && (s.clickEvent = e), r) {
          var a = r._menu;

          if (p(o).hasClass(jt) && !(e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "keyup" === e.type && 9 === e.which) && p.contains(o, e.target))) {
            var l = p.Event(Pt.HIDE, s);
            p(o).trigger(l), l.isDefaultPrevented() || ("ontouchstart" in document.documentElement && p(document.body).children().off("mouseover", null, p.noop), t[n].setAttribute("aria-expanded", "false"), r._popper && r._popper.destroy(), p(a).removeClass(jt), p(o).removeClass(jt).trigger(p.Event(Pt.HIDDEN, s)));
          }
        }
      }
    }, c._getParentFromElement = function (e) {
      var t,
          n = m.getSelectorFromElement(e);
      return n && (t = document.querySelector(n)), t || e.parentNode;
    }, c._dataApiKeydownHandler = function (e) {
      if ((/input|textarea/i.test(e.target.tagName) ? !(32 === e.which || 27 !== e.which && (40 !== e.which && 38 !== e.which || p(e.target).closest(qt).length)) : Lt.test(e.which)) && (e.preventDefault(), e.stopPropagation(), !this.disabled && !p(this).hasClass(xt))) {
        var t = c._getParentFromElement(this),
            n = p(t).hasClass(jt);

        if (n || 27 !== e.which) if (n && (!n || 27 !== e.which && 32 !== e.which)) {
          var i = [].slice.call(t.querySelectorAll(Qt)).filter(function (e) {
            return p(e).is(":visible");
          });

          if (0 !== i.length) {
            var o = i.indexOf(e.target);
            38 === e.which && 0 < o && o--, 40 === e.which && o < i.length - 1 && o++, o < 0 && (o = 0), i[o].focus();
          }
        } else {
          if (27 === e.which) {
            var r = t.querySelector(Ut);
            p(r).trigger("focus");
          }

          p(this).trigger("click");
        }
      }
    }, s(c, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function get() {
        return Jt;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return Zt;
      }
    }]), c;
  }();

  p(document).on(Pt.KEYDOWN_DATA_API, Ut, en._dataApiKeydownHandler).on(Pt.KEYDOWN_DATA_API, qt, en._dataApiKeydownHandler).on(Pt.CLICK_DATA_API + " " + Pt.KEYUP_DATA_API, en._clearMenus).on(Pt.CLICK_DATA_API, Ut, function (e) {
    e.preventDefault(), e.stopPropagation(), en._jQueryInterface.call(p(this), "toggle");
  }).on(Pt.CLICK_DATA_API, Bt, function (e) {
    e.stopPropagation();
  }), p.fn[It] = en._jQueryInterface, p.fn[It].Constructor = en, p.fn[It].noConflict = function () {
    return p.fn[It] = kt, en._jQueryInterface;
  };

  var tn = "modal",
      nn = "bs.modal",
      on = "." + nn,
      rn = p.fn[tn],
      sn = {
    backdrop: !0,
    keyboard: !0,
    focus: !0,
    show: !0
  },
      an = {
    backdrop: "(boolean|string)",
    keyboard: "boolean",
    focus: "boolean",
    show: "boolean"
  },
      ln = {
    HIDE: "hide" + on,
    HIDE_PREVENTED: "hidePrevented" + on,
    HIDDEN: "hidden" + on,
    SHOW: "show" + on,
    SHOWN: "shown" + on,
    FOCUSIN: "focusin" + on,
    RESIZE: "resize" + on,
    CLICK_DISMISS: "click.dismiss" + on,
    KEYDOWN_DISMISS: "keydown.dismiss" + on,
    MOUSEUP_DISMISS: "mouseup.dismiss" + on,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + on,
    CLICK_DATA_API: "click" + on + ".data-api"
  },
      cn = "modal-dialog-scrollable",
      hn = "modal-scrollbar-measure",
      un = "modal-backdrop",
      fn = "modal-open",
      dn = "fade",
      pn = "show",
      mn = "modal-static",
      gn = ".modal-dialog",
      _n = ".modal-body",
      vn = '[data-toggle="modal"]',
      yn = '[data-dismiss="modal"]',
      En = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
      bn = ".sticky-top",
      wn = function () {
    function o(e, t) {
      this._config = this._getConfig(t), this._element = e, this._dialog = e.querySelector(gn), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0;
    }

    var e = o.prototype;
    return e.toggle = function (e) {
      return this._isShown ? this.hide() : this.show(e);
    }, e.show = function (e) {
      var t = this;

      if (!this._isShown && !this._isTransitioning) {
        p(this._element).hasClass(dn) && (this._isTransitioning = !0);
        var n = p.Event(ln.SHOW, {
          relatedTarget: e
        });
        p(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), p(this._element).on(ln.CLICK_DISMISS, yn, function (e) {
          return t.hide(e);
        }), p(this._dialog).on(ln.MOUSEDOWN_DISMISS, function () {
          p(t._element).one(ln.MOUSEUP_DISMISS, function (e) {
            p(e.target).is(t._element) && (t._ignoreBackdropClick = !0);
          });
        }), this._showBackdrop(function () {
          return t._showElement(e);
        }));
      }
    }, e.hide = function (e) {
      var t = this;

      if (e && e.preventDefault(), this._isShown && !this._isTransitioning) {
        var n = p.Event(ln.HIDE);

        if (p(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
          this._isShown = !1;
          var i = p(this._element).hasClass(dn);

          if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), p(document).off(ln.FOCUSIN), p(this._element).removeClass(pn), p(this._element).off(ln.CLICK_DISMISS), p(this._dialog).off(ln.MOUSEDOWN_DISMISS), i) {
            var o = m.getTransitionDurationFromElement(this._element);
            p(this._element).one(m.TRANSITION_END, function (e) {
              return t._hideModal(e);
            }).emulateTransitionEnd(o);
          } else this._hideModal();
        }
      }
    }, e.dispose = function () {
      [window, this._element, this._dialog].forEach(function (e) {
        return p(e).off(on);
      }), p(document).off(ln.FOCUSIN), p.removeData(this._element, nn), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;
    }, e.handleUpdate = function () {
      this._adjustDialog();
    }, e._getConfig = function (e) {
      return e = l({}, sn, {}, e), m.typeCheckConfig(tn, e, an), e;
    }, e._triggerBackdropTransition = function () {
      var e = this;

      if ("static" === this._config.backdrop) {
        var t = p.Event(ln.HIDE_PREVENTED);
        if (p(this._element).trigger(t), t.defaultPrevented) return;

        this._element.classList.add(mn);

        var n = m.getTransitionDurationFromElement(this._element);
        p(this._element).one(m.TRANSITION_END, function () {
          e._element.classList.remove(mn);
        }).emulateTransitionEnd(n), this._element.focus();
      } else this.hide();
    }, e._showElement = function (e) {
      var t = this,
          n = p(this._element).hasClass(dn),
          i = this._dialog ? this._dialog.querySelector(_n) : null;
      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), p(this._dialog).hasClass(cn) && i ? i.scrollTop = 0 : this._element.scrollTop = 0, n && m.reflow(this._element), p(this._element).addClass(pn), this._config.focus && this._enforceFocus();

      function o() {
        t._config.focus && t._element.focus(), t._isTransitioning = !1, p(t._element).trigger(r);
      }

      var r = p.Event(ln.SHOWN, {
        relatedTarget: e
      });

      if (n) {
        var s = m.getTransitionDurationFromElement(this._dialog);
        p(this._dialog).one(m.TRANSITION_END, o).emulateTransitionEnd(s);
      } else o();
    }, e._enforceFocus = function () {
      var t = this;
      p(document).off(ln.FOCUSIN).on(ln.FOCUSIN, function (e) {
        document !== e.target && t._element !== e.target && 0 === p(t._element).has(e.target).length && t._element.focus();
      });
    }, e._setEscapeEvent = function () {
      var t = this;
      this._isShown && this._config.keyboard ? p(this._element).on(ln.KEYDOWN_DISMISS, function (e) {
        27 === e.which && t._triggerBackdropTransition();
      }) : this._isShown || p(this._element).off(ln.KEYDOWN_DISMISS);
    }, e._setResizeEvent = function () {
      var t = this;
      this._isShown ? p(window).on(ln.RESIZE, function (e) {
        return t.handleUpdate(e);
      }) : p(window).off(ln.RESIZE);
    }, e._hideModal = function () {
      var e = this;
      this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._isTransitioning = !1, this._showBackdrop(function () {
        p(document.body).removeClass(fn), e._resetAdjustments(), e._resetScrollbar(), p(e._element).trigger(ln.HIDDEN);
      });
    }, e._removeBackdrop = function () {
      this._backdrop && (p(this._backdrop).remove(), this._backdrop = null);
    }, e._showBackdrop = function (e) {
      var t = this,
          n = p(this._element).hasClass(dn) ? dn : "";

      if (this._isShown && this._config.backdrop) {
        if (this._backdrop = document.createElement("div"), this._backdrop.className = un, n && this._backdrop.classList.add(n), p(this._backdrop).appendTo(document.body), p(this._element).on(ln.CLICK_DISMISS, function (e) {
          t._ignoreBackdropClick ? t._ignoreBackdropClick = !1 : e.target === e.currentTarget && t._triggerBackdropTransition();
        }), n && m.reflow(this._backdrop), p(this._backdrop).addClass(pn), !e) return;
        if (!n) return void e();
        var i = m.getTransitionDurationFromElement(this._backdrop);
        p(this._backdrop).one(m.TRANSITION_END, e).emulateTransitionEnd(i);
      } else if (!this._isShown && this._backdrop) {
        p(this._backdrop).removeClass(pn);

        var o = function o() {
          t._removeBackdrop(), e && e();
        };

        if (p(this._element).hasClass(dn)) {
          var r = m.getTransitionDurationFromElement(this._backdrop);
          p(this._backdrop).one(m.TRANSITION_END, o).emulateTransitionEnd(r);
        } else o();
      } else e && e();
    }, e._adjustDialog = function () {
      var e = this._element.scrollHeight > document.documentElement.clientHeight;
      !this._isBodyOverflowing && e && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !e && (this._element.style.paddingRight = this._scrollbarWidth + "px");
    }, e._resetAdjustments = function () {
      this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
    }, e._checkScrollbar = function () {
      var e = document.body.getBoundingClientRect();
      this._isBodyOverflowing = e.left + e.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
    }, e._setScrollbar = function () {
      var o = this;

      if (this._isBodyOverflowing) {
        var e = [].slice.call(document.querySelectorAll(En)),
            t = [].slice.call(document.querySelectorAll(bn));
        p(e).each(function (e, t) {
          var n = t.style.paddingRight,
              i = p(t).css("padding-right");
          p(t).data("padding-right", n).css("padding-right", parseFloat(i) + o._scrollbarWidth + "px");
        }), p(t).each(function (e, t) {
          var n = t.style.marginRight,
              i = p(t).css("margin-right");
          p(t).data("margin-right", n).css("margin-right", parseFloat(i) - o._scrollbarWidth + "px");
        });
        var n = document.body.style.paddingRight,
            i = p(document.body).css("padding-right");
        p(document.body).data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px");
      }

      p(document.body).addClass(fn);
    }, e._resetScrollbar = function () {
      var e = [].slice.call(document.querySelectorAll(En));
      p(e).each(function (e, t) {
        var n = p(t).data("padding-right");
        p(t).removeData("padding-right"), t.style.paddingRight = n || "";
      });
      var t = [].slice.call(document.querySelectorAll("" + bn));
      p(t).each(function (e, t) {
        var n = p(t).data("margin-right");
        "undefined" != typeof n && p(t).css("margin-right", n).removeData("margin-right");
      });
      var n = p(document.body).data("padding-right");
      p(document.body).removeData("padding-right"), document.body.style.paddingRight = n || "";
    }, e._getScrollbarWidth = function () {
      var e = document.createElement("div");
      e.className = hn, document.body.appendChild(e);
      var t = e.getBoundingClientRect().width - e.clientWidth;
      return document.body.removeChild(e), t;
    }, o._jQueryInterface = function (n, i) {
      return this.each(function () {
        var e = p(this).data(nn),
            t = l({}, sn, {}, p(this).data(), {}, "object" == _typeof(n) && n ? n : {});

        if (e || (e = new o(this, t), p(this).data(nn, e)), "string" == typeof n) {
          if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
          e[n](i);
        } else t.show && e.show(i);
      });
    }, s(o, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function get() {
        return sn;
      }
    }]), o;
  }();

  p(document).on(ln.CLICK_DATA_API, vn, function (e) {
    var t,
        n = this,
        i = m.getSelectorFromElement(this);
    i && (t = document.querySelector(i));
    var o = p(t).data(nn) ? "toggle" : l({}, p(t).data(), {}, p(this).data());
    "A" !== this.tagName && "AREA" !== this.tagName || e.preventDefault();
    var r = p(t).one(ln.SHOW, function (e) {
      e.isDefaultPrevented() || r.one(ln.HIDDEN, function () {
        p(n).is(":visible") && n.focus();
      });
    });

    wn._jQueryInterface.call(p(t), o, this);
  }), p.fn[tn] = wn._jQueryInterface, p.fn[tn].Constructor = wn, p.fn[tn].noConflict = function () {
    return p.fn[tn] = rn, wn._jQueryInterface;
  };
  var Tn = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"],
      Cn = {
    "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
    a: ["target", "href", "title", "rel"],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  },
      Sn = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,
      Dn = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

  function In(e, r, t) {
    if (0 === e.length) return e;
    if (t && "function" == typeof t) return t(e);

    for (var n = new window.DOMParser().parseFromString(e, "text/html"), s = Object.keys(r), a = [].slice.call(n.body.querySelectorAll("*")), i = function i(e) {
      var t = a[e],
          n = t.nodeName.toLowerCase();
      if (-1 === s.indexOf(t.nodeName.toLowerCase())) return t.parentNode.removeChild(t), "continue";
      var i = [].slice.call(t.attributes),
          o = [].concat(r["*"] || [], r[n] || []);
      i.forEach(function (e) {
        !function (e, t) {
          var n = e.nodeName.toLowerCase();
          if (-1 !== t.indexOf(n)) return -1 === Tn.indexOf(n) || Boolean(e.nodeValue.match(Sn) || e.nodeValue.match(Dn));

          for (var i = t.filter(function (e) {
            return e instanceof RegExp;
          }), o = 0, r = i.length; o < r; o++) {
            if (n.match(i[o])) return !0;
          }

          return !1;
        }(e, o) && t.removeAttribute(e.nodeName);
      });
    }, o = 0, l = a.length; o < l; o++) {
      i(o);
    }

    return n.body.innerHTML;
  }

  var An = "tooltip",
      On = "bs.tooltip",
      Nn = "." + On,
      kn = p.fn[An],
      Ln = "bs-tooltip",
      Pn = new RegExp("(^|\\s)" + Ln + "\\S+", "g"),
      xn = ["sanitize", "whiteList", "sanitizeFn"],
      jn = {
    animation: "boolean",
    template: "string",
    title: "(string|element|function)",
    trigger: "string",
    delay: "(number|object)",
    html: "boolean",
    selector: "(string|boolean)",
    placement: "(string|function)",
    offset: "(number|string|function)",
    container: "(string|element|boolean)",
    fallbackPlacement: "(string|array)",
    boundary: "(string|element)",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    whiteList: "object",
    popperConfig: "(null|object)"
  },
      Hn = {
    AUTO: "auto",
    TOP: "top",
    RIGHT: "right",
    BOTTOM: "bottom",
    LEFT: "left"
  },
      Rn = {
    animation: !0,
    template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover focus",
    title: "",
    delay: 0,
    html: !1,
    selector: !1,
    placement: "top",
    offset: 0,
    container: !1,
    fallbackPlacement: "flip",
    boundary: "scrollParent",
    sanitize: !0,
    sanitizeFn: null,
    whiteList: Cn,
    popperConfig: null
  },
      Fn = "show",
      Mn = "out",
      Wn = {
    HIDE: "hide" + Nn,
    HIDDEN: "hidden" + Nn,
    SHOW: "show" + Nn,
    SHOWN: "shown" + Nn,
    INSERTED: "inserted" + Nn,
    CLICK: "click" + Nn,
    FOCUSIN: "focusin" + Nn,
    FOCUSOUT: "focusout" + Nn,
    MOUSEENTER: "mouseenter" + Nn,
    MOUSELEAVE: "mouseleave" + Nn
  },
      Un = "fade",
      Bn = "show",
      qn = ".tooltip-inner",
      Kn = ".arrow",
      Qn = "hover",
      Vn = "focus",
      Yn = "click",
      zn = "manual",
      Xn = function () {
    function i(e, t) {
      if ("undefined" == typeof St) throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");
      this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = e, this.config = this._getConfig(t), this.tip = null, this._setListeners();
    }

    var e = i.prototype;
    return e.enable = function () {
      this._isEnabled = !0;
    }, e.disable = function () {
      this._isEnabled = !1;
    }, e.toggleEnabled = function () {
      this._isEnabled = !this._isEnabled;
    }, e.toggle = function (e) {
      if (this._isEnabled) if (e) {
        var t = this.constructor.DATA_KEY,
            n = p(e.currentTarget).data(t);
        n || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), p(e.currentTarget).data(t, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
      } else {
        if (p(this.getTipElement()).hasClass(Bn)) return void this._leave(null, this);

        this._enter(null, this);
      }
    }, e.dispose = function () {
      clearTimeout(this._timeout), p.removeData(this.element, this.constructor.DATA_KEY), p(this.element).off(this.constructor.EVENT_KEY), p(this.element).closest(".modal").off("hide.bs.modal", this._hideModalHandler), this.tip && p(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
    }, e.show = function () {
      var t = this;
      if ("none" === p(this.element).css("display")) throw new Error("Please use show on visible elements");
      var e = p.Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        p(this.element).trigger(e);
        var n = m.findShadowRoot(this.element),
            i = p.contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);
        if (e.isDefaultPrevented() || !i) return;
        var o = this.getTipElement(),
            r = m.getUID(this.constructor.NAME);
        o.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), this.config.animation && p(o).addClass(Un);

        var s = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,
            a = this._getAttachment(s);

        this.addAttachmentClass(a);

        var l = this._getContainer();

        p(o).data(this.constructor.DATA_KEY, this), p.contains(this.element.ownerDocument.documentElement, this.tip) || p(o).appendTo(l), p(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new St(this.element, o, this._getPopperConfig(a)), p(o).addClass(Bn), "ontouchstart" in document.documentElement && p(document.body).children().on("mouseover", null, p.noop);

        var c = function c() {
          t.config.animation && t._fixTransition();
          var e = t._hoverState;
          t._hoverState = null, p(t.element).trigger(t.constructor.Event.SHOWN), e === Mn && t._leave(null, t);
        };

        if (p(this.tip).hasClass(Un)) {
          var h = m.getTransitionDurationFromElement(this.tip);
          p(this.tip).one(m.TRANSITION_END, c).emulateTransitionEnd(h);
        } else c();
      }
    }, e.hide = function (e) {
      function t() {
        n._hoverState !== Fn && i.parentNode && i.parentNode.removeChild(i), n._cleanTipClass(), n.element.removeAttribute("aria-describedby"), p(n.element).trigger(n.constructor.Event.HIDDEN), null !== n._popper && n._popper.destroy(), e && e();
      }

      var n = this,
          i = this.getTipElement(),
          o = p.Event(this.constructor.Event.HIDE);

      if (p(this.element).trigger(o), !o.isDefaultPrevented()) {
        if (p(i).removeClass(Bn), "ontouchstart" in document.documentElement && p(document.body).children().off("mouseover", null, p.noop), this._activeTrigger[Yn] = !1, this._activeTrigger[Vn] = !1, this._activeTrigger[Qn] = !1, p(this.tip).hasClass(Un)) {
          var r = m.getTransitionDurationFromElement(i);
          p(i).one(m.TRANSITION_END, t).emulateTransitionEnd(r);
        } else t();

        this._hoverState = "";
      }
    }, e.update = function () {
      null !== this._popper && this._popper.scheduleUpdate();
    }, e.isWithContent = function () {
      return Boolean(this.getTitle());
    }, e.addAttachmentClass = function (e) {
      p(this.getTipElement()).addClass(Ln + "-" + e);
    }, e.getTipElement = function () {
      return this.tip = this.tip || p(this.config.template)[0], this.tip;
    }, e.setContent = function () {
      var e = this.getTipElement();
      this.setElementContent(p(e.querySelectorAll(qn)), this.getTitle()), p(e).removeClass(Un + " " + Bn);
    }, e.setElementContent = function (e, t) {
      "object" != _typeof(t) || !t.nodeType && !t.jquery ? this.config.html ? (this.config.sanitize && (t = In(t, this.config.whiteList, this.config.sanitizeFn)), e.html(t)) : e.text(t) : this.config.html ? p(t).parent().is(e) || e.empty().append(t) : e.text(p(t).text());
    }, e.getTitle = function () {
      var e = this.element.getAttribute("data-original-title");
      return e = e || ("function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title);
    }, e._getPopperConfig = function (e) {
      var t = this;
      return l({}, {
        placement: e,
        modifiers: {
          offset: this._getOffset(),
          flip: {
            behavior: this.config.fallbackPlacement
          },
          arrow: {
            element: Kn
          },
          preventOverflow: {
            boundariesElement: this.config.boundary
          }
        },
        onCreate: function onCreate(e) {
          e.originalPlacement !== e.placement && t._handlePopperPlacementChange(e);
        },
        onUpdate: function onUpdate(e) {
          return t._handlePopperPlacementChange(e);
        }
      }, {}, this.config.popperConfig);
    }, e._getOffset = function () {
      var t = this,
          e = {};
      return "function" == typeof this.config.offset ? e.fn = function (e) {
        return e.offsets = l({}, e.offsets, {}, t.config.offset(e.offsets, t.element) || {}), e;
      } : e.offset = this.config.offset, e;
    }, e._getContainer = function () {
      return !1 === this.config.container ? document.body : m.isElement(this.config.container) ? p(this.config.container) : p(document).find(this.config.container);
    }, e._getAttachment = function (e) {
      return Hn[e.toUpperCase()];
    }, e._setListeners = function () {
      var i = this;
      this.config.trigger.split(" ").forEach(function (e) {
        if ("click" === e) p(i.element).on(i.constructor.Event.CLICK, i.config.selector, function (e) {
          return i.toggle(e);
        });else if (e !== zn) {
          var t = e === Qn ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,
              n = e === Qn ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;
          p(i.element).on(t, i.config.selector, function (e) {
            return i._enter(e);
          }).on(n, i.config.selector, function (e) {
            return i._leave(e);
          });
        }
      }), this._hideModalHandler = function () {
        i.element && i.hide();
      }, p(this.element).closest(".modal").on("hide.bs.modal", this._hideModalHandler), this.config.selector ? this.config = l({}, this.config, {
        trigger: "manual",
        selector: ""
      }) : this._fixTitle();
    }, e._fixTitle = function () {
      var e = _typeof(this.element.getAttribute("data-original-title"));

      !this.element.getAttribute("title") && "string" == e || (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
    }, e._enter = function (e, t) {
      var n = this.constructor.DATA_KEY;
      (t = t || p(e.currentTarget).data(n)) || (t = new this.constructor(e.currentTarget, this._getDelegateConfig()), p(e.currentTarget).data(n, t)), e && (t._activeTrigger["focusin" === e.type ? Vn : Qn] = !0), p(t.getTipElement()).hasClass(Bn) || t._hoverState === Fn ? t._hoverState = Fn : (clearTimeout(t._timeout), t._hoverState = Fn, t.config.delay && t.config.delay.show ? t._timeout = setTimeout(function () {
        t._hoverState === Fn && t.show();
      }, t.config.delay.show) : t.show());
    }, e._leave = function (e, t) {
      var n = this.constructor.DATA_KEY;
      (t = t || p(e.currentTarget).data(n)) || (t = new this.constructor(e.currentTarget, this._getDelegateConfig()), p(e.currentTarget).data(n, t)), e && (t._activeTrigger["focusout" === e.type ? Vn : Qn] = !1), t._isWithActiveTrigger() || (clearTimeout(t._timeout), t._hoverState = Mn, t.config.delay && t.config.delay.hide ? t._timeout = setTimeout(function () {
        t._hoverState === Mn && t.hide();
      }, t.config.delay.hide) : t.hide());
    }, e._isWithActiveTrigger = function () {
      for (var e in this._activeTrigger) {
        if (this._activeTrigger[e]) return !0;
      }

      return !1;
    }, e._getConfig = function (e) {
      var t = p(this.element).data();
      return Object.keys(t).forEach(function (e) {
        -1 !== xn.indexOf(e) && delete t[e];
      }), "number" == typeof (e = l({}, this.constructor.Default, {}, t, {}, "object" == _typeof(e) && e ? e : {})).delay && (e.delay = {
        show: e.delay,
        hide: e.delay
      }), "number" == typeof e.title && (e.title = e.title.toString()), "number" == typeof e.content && (e.content = e.content.toString()), m.typeCheckConfig(An, e, this.constructor.DefaultType), e.sanitize && (e.template = In(e.template, e.whiteList, e.sanitizeFn)), e;
    }, e._getDelegateConfig = function () {
      var e = {};
      if (this.config) for (var t in this.config) {
        this.constructor.Default[t] !== this.config[t] && (e[t] = this.config[t]);
      }
      return e;
    }, e._cleanTipClass = function () {
      var e = p(this.getTipElement()),
          t = e.attr("class").match(Pn);
      null !== t && t.length && e.removeClass(t.join(""));
    }, e._handlePopperPlacementChange = function (e) {
      var t = e.instance;
      this.tip = t.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(e.placement));
    }, e._fixTransition = function () {
      var e = this.getTipElement(),
          t = this.config.animation;
      null === e.getAttribute("x-placement") && (p(e).removeClass(Un), this.config.animation = !1, this.hide(), this.show(), this.config.animation = t);
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var e = p(this).data(On),
            t = "object" == _typeof(n) && n;

        if ((e || !/dispose|hide/.test(n)) && (e || (e = new i(this, t), p(this).data(On, e)), "string" == typeof n)) {
          if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
          e[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function get() {
        return Rn;
      }
    }, {
      key: "NAME",
      get: function get() {
        return An;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return On;
      }
    }, {
      key: "Event",
      get: function get() {
        return Wn;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return Nn;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return jn;
      }
    }]), i;
  }();

  p.fn[An] = Xn._jQueryInterface, p.fn[An].Constructor = Xn, p.fn[An].noConflict = function () {
    return p.fn[An] = kn, Xn._jQueryInterface;
  };

  var Gn = "popover",
      $n = "bs.popover",
      Jn = "." + $n,
      Zn = p.fn[Gn],
      ei = "bs-popover",
      ti = new RegExp("(^|\\s)" + ei + "\\S+", "g"),
      ni = l({}, Xn.Default, {
    placement: "right",
    trigger: "click",
    content: "",
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
  }),
      ii = l({}, Xn.DefaultType, {
    content: "(string|element|function)"
  }),
      oi = "fade",
      ri = "show",
      si = ".popover-header",
      ai = ".popover-body",
      li = {
    HIDE: "hide" + Jn,
    HIDDEN: "hidden" + Jn,
    SHOW: "show" + Jn,
    SHOWN: "shown" + Jn,
    INSERTED: "inserted" + Jn,
    CLICK: "click" + Jn,
    FOCUSIN: "focusin" + Jn,
    FOCUSOUT: "focusout" + Jn,
    MOUSEENTER: "mouseenter" + Jn,
    MOUSELEAVE: "mouseleave" + Jn
  },
      ci = function (e) {
    function i() {
      return e.apply(this, arguments) || this;
    }

    !function (e, t) {
      e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t;
    }(i, e);
    var t = i.prototype;
    return t.isWithContent = function () {
      return this.getTitle() || this._getContent();
    }, t.addAttachmentClass = function (e) {
      p(this.getTipElement()).addClass(ei + "-" + e);
    }, t.getTipElement = function () {
      return this.tip = this.tip || p(this.config.template)[0], this.tip;
    }, t.setContent = function () {
      var e = p(this.getTipElement());
      this.setElementContent(e.find(si), this.getTitle());

      var t = this._getContent();

      "function" == typeof t && (t = t.call(this.element)), this.setElementContent(e.find(ai), t), e.removeClass(oi + " " + ri);
    }, t._getContent = function () {
      return this.element.getAttribute("data-content") || this.config.content;
    }, t._cleanTipClass = function () {
      var e = p(this.getTipElement()),
          t = e.attr("class").match(ti);
      null !== t && 0 < t.length && e.removeClass(t.join(""));
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var e = p(this).data($n),
            t = "object" == _typeof(n) ? n : null;

        if ((e || !/dispose|hide/.test(n)) && (e || (e = new i(this, t), p(this).data($n, e)), "string" == typeof n)) {
          if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
          e[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function get() {
        return ni;
      }
    }, {
      key: "NAME",
      get: function get() {
        return Gn;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return $n;
      }
    }, {
      key: "Event",
      get: function get() {
        return li;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return Jn;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return ii;
      }
    }]), i;
  }(Xn);

  p.fn[Gn] = ci._jQueryInterface, p.fn[Gn].Constructor = ci, p.fn[Gn].noConflict = function () {
    return p.fn[Gn] = Zn, ci._jQueryInterface;
  };

  var hi = "scrollspy",
      ui = "bs.scrollspy",
      fi = "." + ui,
      di = p.fn[hi],
      pi = {
    offset: 10,
    method: "auto",
    target: ""
  },
      mi = {
    offset: "number",
    method: "string",
    target: "(string|element)"
  },
      gi = {
    ACTIVATE: "activate" + fi,
    SCROLL: "scroll" + fi,
    LOAD_DATA_API: "load" + fi + ".data-api"
  },
      _i = "dropdown-item",
      vi = "active",
      yi = '[data-spy="scroll"]',
      Ei = ".nav, .list-group",
      bi = ".nav-link",
      wi = ".nav-item",
      Ti = ".list-group-item",
      Ci = ".dropdown",
      Si = ".dropdown-item",
      Di = ".dropdown-toggle",
      Ii = "offset",
      Ai = "position",
      Oi = function () {
    function n(e, t) {
      var n = this;
      this._element = e, this._scrollElement = "BODY" === e.tagName ? window : e, this._config = this._getConfig(t), this._selector = this._config.target + " " + bi + "," + this._config.target + " " + Ti + "," + this._config.target + " " + Si, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, p(this._scrollElement).on(gi.SCROLL, function (e) {
        return n._process(e);
      }), this.refresh(), this._process();
    }

    var e = n.prototype;
    return e.refresh = function () {
      var t = this,
          e = this._scrollElement === this._scrollElement.window ? Ii : Ai,
          o = "auto" === this._config.method ? e : this._config.method,
          r = o === Ai ? this._getScrollTop() : 0;
      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function (e) {
        var t,
            n = m.getSelectorFromElement(e);

        if (n && (t = document.querySelector(n)), t) {
          var i = t.getBoundingClientRect();
          if (i.width || i.height) return [p(t)[o]().top + r, n];
        }

        return null;
      }).filter(function (e) {
        return e;
      }).sort(function (e, t) {
        return e[0] - t[0];
      }).forEach(function (e) {
        t._offsets.push(e[0]), t._targets.push(e[1]);
      });
    }, e.dispose = function () {
      p.removeData(this._element, ui), p(this._scrollElement).off(fi), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
    }, e._getConfig = function (e) {
      if ("string" != typeof (e = l({}, pi, {}, "object" == _typeof(e) && e ? e : {})).target) {
        var t = p(e.target).attr("id");
        t || (t = m.getUID(hi), p(e.target).attr("id", t)), e.target = "#" + t;
      }

      return m.typeCheckConfig(hi, e, mi), e;
    }, e._getScrollTop = function () {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }, e._getScrollHeight = function () {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }, e._getOffsetHeight = function () {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    }, e._process = function () {
      var e = this._getScrollTop() + this._config.offset,
          t = this._getScrollHeight(),
          n = this._config.offset + t - this._getOffsetHeight();

      if (this._scrollHeight !== t && this.refresh(), n <= e) {
        var i = this._targets[this._targets.length - 1];
        this._activeTarget !== i && this._activate(i);
      } else {
        if (this._activeTarget && e < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();

        for (var o = this._offsets.length; o--;) {
          this._activeTarget !== this._targets[o] && e >= this._offsets[o] && ("undefined" == typeof this._offsets[o + 1] || e < this._offsets[o + 1]) && this._activate(this._targets[o]);
        }
      }
    }, e._activate = function (t) {
      this._activeTarget = t, this._clear();

      var e = this._selector.split(",").map(function (e) {
        return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]';
      }),
          n = p([].slice.call(document.querySelectorAll(e.join(","))));

      n.hasClass(_i) ? (n.closest(Ci).find(Di).addClass(vi), n.addClass(vi)) : (n.addClass(vi), n.parents(Ei).prev(bi + ", " + Ti).addClass(vi), n.parents(Ei).prev(wi).children(bi).addClass(vi)), p(this._scrollElement).trigger(gi.ACTIVATE, {
        relatedTarget: t
      });
    }, e._clear = function () {
      [].slice.call(document.querySelectorAll(this._selector)).filter(function (e) {
        return e.classList.contains(vi);
      }).forEach(function (e) {
        return e.classList.remove(vi);
      });
    }, n._jQueryInterface = function (t) {
      return this.each(function () {
        var e = p(this).data(ui);

        if (e || (e = new n(this, "object" == _typeof(t) && t), p(this).data(ui, e)), "string" == typeof t) {
          if ("undefined" == typeof e[t]) throw new TypeError('No method named "' + t + '"');
          e[t]();
        }
      });
    }, s(n, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function get() {
        return pi;
      }
    }]), n;
  }();

  p(window).on(gi.LOAD_DATA_API, function () {
    for (var e = [].slice.call(document.querySelectorAll(yi)), t = e.length; t--;) {
      var n = p(e[t]);

      Oi._jQueryInterface.call(n, n.data());
    }
  }), p.fn[hi] = Oi._jQueryInterface, p.fn[hi].Constructor = Oi, p.fn[hi].noConflict = function () {
    return p.fn[hi] = di, Oi._jQueryInterface;
  };

  var Ni = "bs.tab",
      ki = "." + Ni,
      Li = p.fn.tab,
      Pi = {
    HIDE: "hide" + ki,
    HIDDEN: "hidden" + ki,
    SHOW: "show" + ki,
    SHOWN: "shown" + ki,
    CLICK_DATA_API: "click" + ki + ".data-api"
  },
      xi = "dropdown-menu",
      ji = "active",
      Hi = "disabled",
      Ri = "fade",
      Fi = "show",
      Mi = ".dropdown",
      Wi = ".nav, .list-group",
      Ui = ".active",
      Bi = "> li > .active",
      qi = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
      Ki = ".dropdown-toggle",
      Qi = "> .dropdown-menu .active",
      Vi = function () {
    function i(e) {
      this._element = e;
    }

    var e = i.prototype;
    return e.show = function () {
      var n = this;

      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && p(this._element).hasClass(ji) || p(this._element).hasClass(Hi))) {
        var e,
            i,
            t = p(this._element).closest(Wi)[0],
            o = m.getSelectorFromElement(this._element);

        if (t) {
          var r = "UL" === t.nodeName || "OL" === t.nodeName ? Bi : Ui;
          i = (i = p.makeArray(p(t).find(r)))[i.length - 1];
        }

        var s = p.Event(Pi.HIDE, {
          relatedTarget: this._element
        }),
            a = p.Event(Pi.SHOW, {
          relatedTarget: i
        });

        if (i && p(i).trigger(s), p(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {
          o && (e = document.querySelector(o)), this._activate(this._element, t);

          var l = function l() {
            var e = p.Event(Pi.HIDDEN, {
              relatedTarget: n._element
            }),
                t = p.Event(Pi.SHOWN, {
              relatedTarget: i
            });
            p(i).trigger(e), p(n._element).trigger(t);
          };

          e ? this._activate(e, e.parentNode, l) : l();
        }
      }
    }, e.dispose = function () {
      p.removeData(this._element, Ni), this._element = null;
    }, e._activate = function (e, t, n) {
      function i() {
        return o._transitionComplete(e, r, n);
      }

      var o = this,
          r = (!t || "UL" !== t.nodeName && "OL" !== t.nodeName ? p(t).children(Ui) : p(t).find(Bi))[0],
          s = n && r && p(r).hasClass(Ri);

      if (r && s) {
        var a = m.getTransitionDurationFromElement(r);
        p(r).removeClass(Fi).one(m.TRANSITION_END, i).emulateTransitionEnd(a);
      } else i();
    }, e._transitionComplete = function (e, t, n) {
      if (t) {
        p(t).removeClass(ji);
        var i = p(t.parentNode).find(Qi)[0];
        i && p(i).removeClass(ji), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !1);
      }

      if (p(e).addClass(ji), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !0), m.reflow(e), e.classList.contains(Ri) && e.classList.add(Fi), e.parentNode && p(e.parentNode).hasClass(xi)) {
        var o = p(e).closest(Mi)[0];

        if (o) {
          var r = [].slice.call(o.querySelectorAll(Ki));
          p(r).addClass(ji);
        }

        e.setAttribute("aria-expanded", !0);
      }

      n && n();
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var e = p(this),
            t = e.data(Ni);

        if (t || (t = new i(this), e.data(Ni, t)), "string" == typeof n) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }]), i;
  }();

  p(document).on(Pi.CLICK_DATA_API, qi, function (e) {
    e.preventDefault(), Vi._jQueryInterface.call(p(this), "show");
  }), p.fn.tab = Vi._jQueryInterface, p.fn.tab.Constructor = Vi, p.fn.tab.noConflict = function () {
    return p.fn.tab = Li, Vi._jQueryInterface;
  };

  var Yi = "toast",
      zi = "bs.toast",
      Xi = "." + zi,
      Gi = p.fn[Yi],
      $i = {
    CLICK_DISMISS: "click.dismiss" + Xi,
    HIDE: "hide" + Xi,
    HIDDEN: "hidden" + Xi,
    SHOW: "show" + Xi,
    SHOWN: "shown" + Xi
  },
      Ji = "fade",
      Zi = "hide",
      eo = "show",
      to = "showing",
      no = {
    animation: "boolean",
    autohide: "boolean",
    delay: "number"
  },
      io = {
    animation: !0,
    autohide: !0,
    delay: 500
  },
      oo = '[data-dismiss="toast"]',
      ro = function () {
    function i(e, t) {
      this._element = e, this._config = this._getConfig(t), this._timeout = null, this._setListeners();
    }

    var e = i.prototype;
    return e.show = function () {
      var e = this,
          t = p.Event($i.SHOW);

      if (p(this._element).trigger(t), !t.isDefaultPrevented()) {
        this._config.animation && this._element.classList.add(Ji);

        var n = function n() {
          e._element.classList.remove(to), e._element.classList.add(eo), p(e._element).trigger($i.SHOWN), e._config.autohide && (e._timeout = setTimeout(function () {
            e.hide();
          }, e._config.delay));
        };

        if (this._element.classList.remove(Zi), m.reflow(this._element), this._element.classList.add(to), this._config.animation) {
          var i = m.getTransitionDurationFromElement(this._element);
          p(this._element).one(m.TRANSITION_END, n).emulateTransitionEnd(i);
        } else n();
      }
    }, e.hide = function () {
      if (this._element.classList.contains(eo)) {
        var e = p.Event($i.HIDE);
        p(this._element).trigger(e), e.isDefaultPrevented() || this._close();
      }
    }, e.dispose = function () {
      clearTimeout(this._timeout), this._timeout = null, this._element.classList.contains(eo) && this._element.classList.remove(eo), p(this._element).off($i.CLICK_DISMISS), p.removeData(this._element, zi), this._element = null, this._config = null;
    }, e._getConfig = function (e) {
      return e = l({}, io, {}, p(this._element).data(), {}, "object" == _typeof(e) && e ? e : {}), m.typeCheckConfig(Yi, e, this.constructor.DefaultType), e;
    }, e._setListeners = function () {
      var e = this;
      p(this._element).on($i.CLICK_DISMISS, oo, function () {
        return e.hide();
      });
    }, e._close = function () {
      function e() {
        t._element.classList.add(Zi), p(t._element).trigger($i.HIDDEN);
      }

      var t = this;

      if (this._element.classList.remove(eo), this._config.animation) {
        var n = m.getTransitionDurationFromElement(this._element);
        p(this._element).one(m.TRANSITION_END, e).emulateTransitionEnd(n);
      } else e();
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var e = p(this),
            t = e.data(zi);

        if (t || (t = new i(this, "object" == _typeof(n) && n), e.data(zi, t)), "string" == typeof n) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n](this);
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.4.1";
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return no;
      }
    }, {
      key: "Default",
      get: function get() {
        return io;
      }
    }]), i;
  }();

  p.fn[Yi] = ro._jQueryInterface, p.fn[Yi].Constructor = ro, p.fn[Yi].noConflict = function () {
    return p.fn[Yi] = Gi, ro._jQueryInterface;
  }, e.Alert = _, e.Button = x, e.Carousel = he, e.Collapse = De, e.Dropdown = en, e.Modal = wn, e.Popover = ci, e.Scrollspy = Oi, e.Tab = Vi, e.Toast = ro, e.Tooltip = Xn, e.Util = m, Object.defineProperty(e, "__esModule", {
    value: !0
  });
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./resources/sass/admin/libs/jquery-knob/jquery.knob.min.js":
/*!******************************************************************!*\
  !*** ./resources/sass/admin/libs/jquery-knob/jquery.knob.min.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (e) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(function (e) {
  "use strict";

  var t = {},
      n = Math.max,
      r = Math.min;
  t.c = {};
  t.c.d = e(document);

  t.c.t = function (e) {
    return e.originalEvent.touches.length - 1;
  };

  t.o = function () {
    var n = this;
    this.o = null;
    this.$ = null;
    this.i = null;
    this.g = null;
    this.v = null;
    this.cv = null;
    this.x = 0;
    this.y = 0;
    this.w = 0;
    this.h = 0;
    this.$c = null;
    this.c = null;
    this.t = 0;
    this.isInit = false;
    this.fgColor = null;
    this.pColor = null;
    this.dH = null;
    this.cH = null;
    this.eH = null;
    this.rH = null;
    this.scale = 1;
    this.relative = false;
    this.relativeWidth = false;
    this.relativeHeight = false;
    this.$div = null;

    this.run = function () {
      var t = function t(e, _t) {
        var r;

        for (r in _t) {
          n.o[r] = _t[r];
        }

        n._carve().init();

        n._configure()._draw();
      };

      if (this.$.data("kontroled")) return;
      this.$.data("kontroled", true);
      this.extend();
      this.o = e.extend({
        min: this.$.data("min") !== undefined ? this.$.data("min") : 0,
        max: this.$.data("max") !== undefined ? this.$.data("max") : 100,
        stopper: true,
        readOnly: this.$.data("readonly") || this.$.attr("readonly") === "readonly",
        cursor: this.$.data("cursor") === true && 30 || this.$.data("cursor") || 0,
        thickness: this.$.data("thickness") && Math.max(Math.min(this.$.data("thickness"), 1), .01) || .35,
        lineCap: this.$.data("linecap") || "butt",
        width: this.$.data("width") || 200,
        height: this.$.data("height") || 200,
        displayInput: this.$.data("displayinput") == null || this.$.data("displayinput"),
        displayPrevious: this.$.data("displayprevious"),
        fgColor: this.$.data("fgcolor") || "#87CEEB",
        inputColor: this.$.data("inputcolor"),
        font: this.$.data("font") || "Arial",
        fontWeight: this.$.data("font-weight") || "bold",
        inline: false,
        step: this.$.data("step") || 1,
        rotation: this.$.data("rotation"),
        draw: null,
        change: null,
        cancel: null,
        release: null,
        format: function format(e) {
          return e;
        },
        parse: function parse(e) {
          return parseFloat(e);
        }
      }, this.o);
      this.o.flip = this.o.rotation === "anticlockwise" || this.o.rotation === "acw";

      if (!this.o.inputColor) {
        this.o.inputColor = this.o.fgColor;
      }

      if (this.$.is("fieldset")) {
        this.v = {};
        this.i = this.$.find("input");
        this.i.each(function (t) {
          var r = e(this);
          n.i[t] = r;
          n.v[t] = n.o.parse(r.val());
          r.bind("change blur", function () {
            var e = {};
            e[t] = r.val();
            n.val(n._validate(e));
          });
        });
        this.$.find("legend").remove();
      } else {
        this.i = this.$;
        this.v = this.o.parse(this.$.val());
        this.v === "" && (this.v = this.o.min);
        this.$.bind("change blur", function () {
          n.val(n._validate(n.o.parse(n.$.val())));
        });
      }

      !this.o.displayInput && this.$.hide();
      this.$c = e(document.createElement("canvas")).attr({
        width: this.o.width,
        height: this.o.height
      });
      this.$div = e('<div style="' + (this.o.inline ? "display:inline;" : "") + "width:" + this.o.width + "px;height:" + this.o.height + "px;" + '"></div>');
      this.$.wrap(this.$div).before(this.$c);
      this.$div = this.$.parent();

      if (typeof G_vmlCanvasManager !== "undefined") {
        G_vmlCanvasManager.initElement(this.$c[0]);
      }

      this.c = this.$c[0].getContext ? this.$c[0].getContext("2d") : null;

      if (!this.c) {
        throw {
          name: "CanvasNotSupportedException",
          message: "Canvas not supported. Please use excanvas on IE8.0.",
          toString: function toString() {
            return this.name + ": " + this.message;
          }
        };
      }

      this.scale = (window.devicePixelRatio || 1) / (this.c.webkitBackingStorePixelRatio || this.c.mozBackingStorePixelRatio || this.c.msBackingStorePixelRatio || this.c.oBackingStorePixelRatio || this.c.backingStorePixelRatio || 1);
      this.relativeWidth = this.o.width % 1 !== 0 && this.o.width.indexOf("%");
      this.relativeHeight = this.o.height % 1 !== 0 && this.o.height.indexOf("%");
      this.relative = this.relativeWidth || this.relativeHeight;

      this._carve();

      if (this.v instanceof Object) {
        this.cv = {};
        this.copy(this.v, this.cv);
      } else {
        this.cv = this.v;
      }

      this.$.bind("configure", t).parent().bind("configure", t);

      this._listen()._configure()._xy().init();

      this.isInit = true;
      this.$.val(this.o.format(this.v));

      this._draw();

      return this;
    };

    this._carve = function () {
      if (this.relative) {
        var e = this.relativeWidth ? this.$div.parent().width() * parseInt(this.o.width) / 100 : this.$div.parent().width(),
            t = this.relativeHeight ? this.$div.parent().height() * parseInt(this.o.height) / 100 : this.$div.parent().height();
        this.w = this.h = Math.min(e, t);
      } else {
        this.w = this.o.width;
        this.h = this.o.height;
      }

      this.$div.css({
        width: this.w + "px",
        height: this.h + "px"
      });
      this.$c.attr({
        width: this.w,
        height: this.h
      });

      if (this.scale !== 1) {
        this.$c[0].width = this.$c[0].width * this.scale;
        this.$c[0].height = this.$c[0].height * this.scale;
        this.$c.width(this.w);
        this.$c.height(this.h);
      }

      return this;
    };

    this._draw = function () {
      var e = true;
      n.g = n.c;
      n.clear();
      n.dH && (e = n.dH());
      e !== false && n.draw();
    };

    this._touch = function (e) {
      var r = function r(e) {
        var t = n.xy2val(e.originalEvent.touches[n.t].pageX, e.originalEvent.touches[n.t].pageY);
        if (t == n.cv) return;
        if (n.cH && n.cH(t) === false) return;
        n.change(n._validate(t));

        n._draw();
      };

      this.t = t.c.t(e);
      r(e);
      t.c.d.bind("touchmove.k", r).bind("touchend.k", function () {
        t.c.d.unbind("touchmove.k touchend.k");
        n.val(n.cv);
      });
      return this;
    };

    this._mouse = function (e) {
      var r = function r(e) {
        var t = n.xy2val(e.pageX, e.pageY);
        if (t == n.cv) return;
        if (n.cH && n.cH(t) === false) return;
        n.change(n._validate(t));

        n._draw();
      };

      r(e);
      t.c.d.bind("mousemove.k", r).bind("keyup.k", function (e) {
        if (e.keyCode === 27) {
          t.c.d.unbind("mouseup.k mousemove.k keyup.k");
          if (n.eH && n.eH() === false) return;
          n.cancel();
        }
      }).bind("mouseup.k", function (e) {
        t.c.d.unbind("mousemove.k mouseup.k keyup.k");
        n.val(n.cv);
      });
      return this;
    };

    this._xy = function () {
      var e = this.$c.offset();
      this.x = e.left;
      this.y = e.top;
      return this;
    };

    this._listen = function () {
      if (!this.o.readOnly) {
        this.$c.bind("mousedown", function (e) {
          e.preventDefault();

          n._xy()._mouse(e);
        }).bind("touchstart", function (e) {
          e.preventDefault();

          n._xy()._touch(e);
        });
        this.listen();
      } else {
        this.$.attr("readonly", "readonly");
      }

      if (this.relative) {
        e(window).resize(function () {
          n._carve().init();

          n._draw();
        });
      }

      return this;
    };

    this._configure = function () {
      if (this.o.draw) this.dH = this.o.draw;
      if (this.o.change) this.cH = this.o.change;
      if (this.o.cancel) this.eH = this.o.cancel;
      if (this.o.release) this.rH = this.o.release;

      if (this.o.displayPrevious) {
        this.pColor = this.h2rgba(this.o.fgColor, "0.4");
        this.fgColor = this.h2rgba(this.o.fgColor, "0.6");
      } else {
        this.fgColor = this.o.fgColor;
      }

      return this;
    };

    this._clear = function () {
      this.$c[0].width = this.$c[0].width;
    };

    this._validate = function (e) {
      var t = ~~((e < 0 ? -.5 : .5) + e / this.o.step) * this.o.step;
      return Math.round(t * 100) / 100;
    };

    this.listen = function () {};

    this.extend = function () {};

    this.init = function () {};

    this.change = function (e) {};

    this.val = function (e) {};

    this.xy2val = function (e, t) {};

    this.draw = function () {};

    this.clear = function () {
      this._clear();
    };

    this.h2rgba = function (e, t) {
      var n;
      e = e.substring(1, 7);
      n = [parseInt(e.substring(0, 2), 16), parseInt(e.substring(2, 4), 16), parseInt(e.substring(4, 6), 16)];
      return "rgba(" + n[0] + "," + n[1] + "," + n[2] + "," + t + ")";
    };

    this.copy = function (e, t) {
      for (var n in e) {
        t[n] = e[n];
      }
    };
  };

  t.Dial = function () {
    t.o.call(this);
    this.startAngle = null;
    this.xy = null;
    this.radius = null;
    this.lineWidth = null;
    this.cursorExt = null;
    this.w2 = null;
    this.PI2 = 2 * Math.PI;

    this.extend = function () {
      this.o = e.extend({
        bgColor: this.$.data("bgcolor") || "#EEEEEE",
        angleOffset: this.$.data("angleoffset") || 0,
        angleArc: this.$.data("anglearc") || 360,
        inline: true
      }, this.o);
    };

    this.val = function (e, t) {
      if (null != e) {
        e = this.o.parse(e);

        if (t !== false && e != this.v && this.rH && this.rH(e) === false) {
          return;
        }

        this.cv = this.o.stopper ? n(r(e, this.o.max), this.o.min) : e;
        this.v = this.cv;
        this.$.val(this.o.format(this.v));

        this._draw();
      } else {
        return this.v;
      }
    };

    this.xy2val = function (e, t) {
      var i, s;
      i = Math.atan2(e - (this.x + this.w2), -(t - this.y - this.w2)) - this.angleOffset;

      if (this.o.flip) {
        i = this.angleArc - i - this.PI2;
      }

      if (this.angleArc != this.PI2 && i < 0 && i > -.5) {
        i = 0;
      } else if (i < 0) {
        i += this.PI2;
      }

      s = i * (this.o.max - this.o.min) / this.angleArc + this.o.min;
      this.o.stopper && (s = n(r(s, this.o.max), this.o.min));
      return s;
    };

    this.listen = function () {
      var t = this,
          i,
          s,
          o = function o(e) {
        e.preventDefault();
        var o = e.originalEvent,
            u = o.detail || o.wheelDeltaX,
            a = o.detail || o.wheelDeltaY,
            f = t._validate(t.o.parse(t.$.val())) + (u > 0 || a > 0 ? t.o.step : u < 0 || a < 0 ? -t.o.step : 0);
        f = n(r(f, t.o.max), t.o.min);
        t.val(f, false);

        if (t.rH) {
          clearTimeout(i);
          i = setTimeout(function () {
            t.rH(f);
            i = null;
          }, 100);

          if (!s) {
            s = setTimeout(function () {
              if (i) t.rH(f);
              s = null;
            }, 200);
          }
        }
      },
          u,
          a,
          f = 1,
          l = {
        37: -t.o.step,
        38: t.o.step,
        39: t.o.step,
        40: -t.o.step
      };

      this.$.bind("keydown", function (i) {
        var s = i.keyCode;

        if (s >= 96 && s <= 105) {
          s = i.keyCode = s - 48;
        }

        u = parseInt(String.fromCharCode(s));

        if (isNaN(u)) {
          s !== 13 && s !== 8 && s !== 9 && s !== 189 && (s !== 190 || t.$.val().match(/\./)) && i.preventDefault();

          if (e.inArray(s, [37, 38, 39, 40]) > -1) {
            i.preventDefault();
            var o = t.o.parse(t.$.val()) + l[s] * f;
            t.o.stopper && (o = n(r(o, t.o.max), t.o.min));
            t.change(t._validate(o));

            t._draw();

            a = window.setTimeout(function () {
              f *= 2;
            }, 30);
          }
        }
      }).bind("keyup", function (e) {
        if (isNaN(u)) {
          if (a) {
            window.clearTimeout(a);
            a = null;
            f = 1;
            t.val(t.$.val());
          }
        } else {
          t.$.val() > t.o.max && t.$.val(t.o.max) || t.$.val() < t.o.min && t.$.val(t.o.min);
        }
      });
      this.$c.bind("mousewheel DOMMouseScroll", o);
      this.$.bind("mousewheel DOMMouseScroll", o);
    };

    this.init = function () {
      if (this.v < this.o.min || this.v > this.o.max) {
        this.v = this.o.min;
      }

      this.$.val(this.v);
      this.w2 = this.w / 2;
      this.cursorExt = this.o.cursor / 100;
      this.xy = this.w2 * this.scale;
      this.lineWidth = this.xy * this.o.thickness;
      this.lineCap = this.o.lineCap;
      this.radius = this.xy - this.lineWidth / 2;
      this.o.angleOffset && (this.o.angleOffset = isNaN(this.o.angleOffset) ? 0 : this.o.angleOffset);
      this.o.angleArc && (this.o.angleArc = isNaN(this.o.angleArc) ? this.PI2 : this.o.angleArc);
      this.angleOffset = this.o.angleOffset * Math.PI / 180;
      this.angleArc = this.o.angleArc * Math.PI / 180;
      this.startAngle = 1.5 * Math.PI + this.angleOffset;
      this.endAngle = 1.5 * Math.PI + this.angleOffset + this.angleArc;
      var e = n(String(Math.abs(this.o.max)).length, String(Math.abs(this.o.min)).length, 2) + 2;
      this.o.displayInput && this.i.css({
        width: (this.w / 2 + 4 >> 0) + "px",
        height: (this.w / 3 >> 0) + "px",
        position: "absolute",
        "vertical-align": "middle",
        "margin-top": (this.w / 3 >> 0) + "px",
        "margin-left": "-" + (this.w * 3 / 4 + 2 >> 0) + "px",
        border: 0,
        background: "none",
        font: this.o.fontWeight + " " + (this.w / e >> 0) + "px " + this.o.font,
        "text-align": "center",
        color: this.o.inputColor || this.o.fgColor,
        padding: "0px",
        "-webkit-appearance": "none"
      }) || this.i.css({
        width: "0px",
        visibility: "hidden"
      });
    };

    this.change = function (e) {
      this.cv = e;
      this.$.val(this.o.format(e));
    };

    this.angle = function (e) {
      return (e - this.o.min) * this.angleArc / (this.o.max - this.o.min);
    };

    this.arc = function (e) {
      var t, n;
      e = this.angle(e);

      if (this.o.flip) {
        t = this.endAngle + 1e-5;
        n = t - e - 1e-5;
      } else {
        t = this.startAngle - 1e-5;
        n = t + e + 1e-5;
      }

      this.o.cursor && (t = n - this.cursorExt) && (n = n + this.cursorExt);
      return {
        s: t,
        e: n,
        d: this.o.flip && !this.o.cursor
      };
    };

    this.draw = function () {
      var e = this.g,
          t = this.arc(this.cv),
          n,
          r = 1;
      e.lineWidth = this.lineWidth;
      e.lineCap = this.lineCap;

      if (this.o.bgColor !== "none") {
        e.beginPath();
        e.strokeStyle = this.o.bgColor;
        e.arc(this.xy, this.xy, this.radius, this.endAngle - 1e-5, this.startAngle + 1e-5, true);
        e.stroke();
      }

      if (this.o.displayPrevious) {
        n = this.arc(this.v);
        e.beginPath();
        e.strokeStyle = this.pColor;
        e.arc(this.xy, this.xy, this.radius, n.s, n.e, n.d);
        e.stroke();
        r = this.cv == this.v;
      }

      e.beginPath();
      e.strokeStyle = r ? this.o.fgColor : this.fgColor;
      e.arc(this.xy, this.xy, this.radius, t.s, t.e, t.d);
      e.stroke();
    };

    this.cancel = function () {
      this.val(this.v);
    };
  };

  e.fn.dial = e.fn.knob = function (n) {
    return this.each(function () {
      var r = new t.Dial();
      r.o = n;
      r.$ = e(this);
      r.run();
    }).parent();
  };
});

/***/ }),

/***/ "./resources/sass/admin/libs/metismenu/metisMenu.min.js":
/*!**************************************************************!*\
  !*** ./resources/sass/admin/libs/metismenu/metisMenu.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
* metismenu https://github.com/onokumus/metismenu#readme
* A jQuery menu plugin
* @version 3.0.5
* @author Osman Nuri Okumus <onokumus@gmail.com> (https://github.com/onokumus)
* @license: MIT 
*/
!function (e, n) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = n(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (n),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function (o) {
  "use strict";

  function a() {
    return (a = Object.assign || function (e) {
      for (var n = 1; n < arguments.length; n++) {
        var t = arguments[n];

        for (var i in t) {
          Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
        }
      }

      return e;
    }).apply(this, arguments);
  }

  o = o && o.hasOwnProperty("default") ? o["default"] : o;
  var i,
      n,
      r,
      s = (n = "transitionend", r = {
    TRANSITION_END: "mmTransitionEnd",
    triggerTransitionEnd: function triggerTransitionEnd(e) {
      i(e).trigger(n);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(n);
    }
  }, (i = o).fn.mmEmulateTransitionEnd = e, i.event.special[r.TRANSITION_END] = {
    bindType: n,
    delegateType: n,
    handle: function handle(e) {
      if (i(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
    }
  }, r);

  function e(e) {
    var n = this,
        t = !1;
    return i(this).one(r.TRANSITION_END, function () {
      t = !0;
    }), setTimeout(function () {
      t || r.triggerTransitionEnd(n);
    }, e), this;
  }

  var t = "metisMenu",
      g = "metisMenu",
      l = "." + g,
      h = o.fn[t],
      f = {
    toggle: !0,
    preventDefault: !0,
    triggerElement: "a",
    parentTrigger: "li",
    subMenu: "ul"
  },
      d = {
    SHOW: "show" + l,
    SHOWN: "shown" + l,
    HIDE: "hide" + l,
    HIDDEN: "hidden" + l,
    CLICK_DATA_API: "click" + l + ".data-api"
  },
      u = "metismenu",
      c = "mm-active",
      p = "mm-show",
      m = "mm-collapse",
      T = "mm-collapsing",
      v = function () {
    function r(e, n) {
      this.element = e, this.config = a({}, f, {}, n), this.transitioning = null, this.init();
    }

    var e = r.prototype;
    return e.init = function () {
      var a = this,
          s = this.config,
          e = o(this.element);
      e.addClass(u), e.find(s.parentTrigger + "." + c).children(s.triggerElement).attr("aria-expanded", "true"), e.find(s.parentTrigger + "." + c).parents(s.parentTrigger).addClass(c), e.find(s.parentTrigger + "." + c).parents(s.parentTrigger).children(s.triggerElement).attr("aria-expanded", "true"), e.find(s.parentTrigger + "." + c).has(s.subMenu).children(s.subMenu).addClass(m + " " + p), e.find(s.parentTrigger).not("." + c).has(s.subMenu).children(s.subMenu).addClass(m), e.find(s.parentTrigger).children(s.triggerElement).on(d.CLICK_DATA_API, function (e) {
        var n = o(this);

        if ("true" !== n.attr("aria-disabled")) {
          s.preventDefault && "#" === n.attr("href") && e.preventDefault();
          var t = n.parent(s.parentTrigger),
              i = t.siblings(s.parentTrigger),
              r = i.children(s.triggerElement);
          t.hasClass(c) ? (n.attr("aria-expanded", "false"), a.removeActive(t)) : (n.attr("aria-expanded", "true"), a.setActive(t), s.toggle && (a.removeActive(i), r.attr("aria-expanded", "false"))), s.onTransitionStart && s.onTransitionStart(e);
        }
      });
    }, e.setActive = function (e) {
      o(e).addClass(c);
      var n = o(e).children(this.config.subMenu);
      0 < n.length && !n.hasClass(p) && this.show(n);
    }, e.removeActive = function (e) {
      o(e).removeClass(c);
      var n = o(e).children(this.config.subMenu + "." + p);
      0 < n.length && this.hide(n);
    }, e.show = function (e) {
      var n = this;

      if (!this.transitioning && !o(e).hasClass(T)) {
        var t = o(e),
            i = o.Event(d.SHOW);

        if (t.trigger(i), !i.isDefaultPrevented()) {
          if (t.parent(this.config.parentTrigger).addClass(c), this.config.toggle) {
            var r = t.parent(this.config.parentTrigger).siblings().children(this.config.subMenu + "." + p);
            this.hide(r);
          }

          t.removeClass(m).addClass(T).height(0), this.setTransitioning(!0);
          t.height(e[0].scrollHeight).one(s.TRANSITION_END, function () {
            n.config && n.element && (t.removeClass(T).addClass(m + " " + p).height(""), n.setTransitioning(!1), t.trigger(d.SHOWN));
          }).mmEmulateTransitionEnd(350);
        }
      }
    }, e.hide = function (e) {
      var n = this;

      if (!this.transitioning && o(e).hasClass(p)) {
        var t = o(e),
            i = o.Event(d.HIDE);

        if (t.trigger(i), !i.isDefaultPrevented()) {
          t.parent(this.config.parentTrigger).removeClass(c), t.height(t.height())[0].offsetHeight, t.addClass(T).removeClass(m).removeClass(p), this.setTransitioning(!0);

          var r = function r() {
            n.config && n.element && (n.transitioning && n.config.onTransitionEnd && n.config.onTransitionEnd(), n.setTransitioning(!1), t.trigger(d.HIDDEN), t.removeClass(T).addClass(m));
          };

          0 === t.height() || "none" === t.css("display") ? r() : t.height(0).one(s.TRANSITION_END, r).mmEmulateTransitionEnd(350);
        }
      }
    }, e.setTransitioning = function (e) {
      this.transitioning = e;
    }, e.dispose = function () {
      o.removeData(this.element, g), o(this.element).find(this.config.parentTrigger).children(this.config.triggerElement).off(d.CLICK_DATA_API), this.transitioning = null, this.config = null, this.element = null;
    }, r.jQueryInterface = function (i) {
      return this.each(function () {
        var e = o(this),
            n = e.data(g),
            t = a({}, f, {}, e.data(), {}, "object" == _typeof(i) && i ? i : {});

        if (n || (n = new r(this, t), e.data(g, n)), "string" == typeof i) {
          if (void 0 === n[i]) throw new Error('No method named "' + i + '"');
          n[i]();
        }
      });
    }, r;
  }();

  return o.fn[t] = v.jQueryInterface, o.fn[t].Constructor = v, o.fn[t].noConflict = function () {
    return o.fn[t] = h, v.jQueryInterface;
  }, v;
});

/***/ }),

/***/ "./resources/sass/admin/libs/node-waves/waves.min.js":
/*!***********************************************************!*\
  !*** ./resources/sass/admin/libs/node-waves/waves.min.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (t, e) {
  "use strict";

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return t.Waves = e.call(t), t.Waves;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}("object" == (typeof global === "undefined" ? "undefined" : _typeof(global)) ? global : this, function () {
  "use strict";

  function t(t) {
    return null !== t && t === t.window;
  }

  function e(e) {
    return t(e) ? e : 9 === e.nodeType && e.defaultView;
  }

  function n(t) {
    var e = _typeof(t);

    return "function" === e || "object" === e && !!t;
  }

  function o(t) {
    return n(t) && t.nodeType > 0;
  }

  function a(t) {
    var e = f.call(t);
    return "[object String]" === e ? d(t) : n(t) && /^\[object (Array|HTMLCollection|NodeList|Object)\]$/.test(e) && t.hasOwnProperty("length") ? t : o(t) ? [t] : [];
  }

  function i(t) {
    var n,
        o,
        a = {
      top: 0,
      left: 0
    },
        i = t && t.ownerDocument;
    return n = i.documentElement, void 0 !== t.getBoundingClientRect && (a = t.getBoundingClientRect()), o = e(i), {
      top: a.top + o.pageYOffset - n.clientTop,
      left: a.left + o.pageXOffset - n.clientLeft
    };
  }

  function r(t) {
    var e = "";

    for (var n in t) {
      t.hasOwnProperty(n) && (e += n + ":" + t[n] + ";");
    }

    return e;
  }

  function s(t, e, n) {
    if (n) {
      n.classList.remove("waves-rippling");
      var o = n.getAttribute("data-x"),
          a = n.getAttribute("data-y"),
          i = n.getAttribute("data-scale"),
          s = n.getAttribute("data-translate"),
          u = 350 - (Date.now() - Number(n.getAttribute("data-hold")));
      u < 0 && (u = 0), "mousemove" === t.type && (u = 150);
      var c = "mousemove" === t.type ? 2500 : v.duration;
      setTimeout(function () {
        var t = {
          top: a + "px",
          left: o + "px",
          opacity: "0",
          "-webkit-transition-duration": c + "ms",
          "-moz-transition-duration": c + "ms",
          "-o-transition-duration": c + "ms",
          "transition-duration": c + "ms",
          "-webkit-transform": i + " " + s,
          "-moz-transform": i + " " + s,
          "-ms-transform": i + " " + s,
          "-o-transform": i + " " + s,
          transform: i + " " + s
        };
        n.setAttribute("style", r(t)), setTimeout(function () {
          try {
            e.removeChild(n);
          } catch (t) {
            return !1;
          }
        }, c);
      }, u);
    }
  }

  function u(t) {
    if (!1 === h.allowEvent(t)) return null;

    for (var e = null, n = t.target || t.srcElement; n.parentElement;) {
      if (!(n instanceof SVGElement) && n.classList.contains("waves-effect")) {
        e = n;
        break;
      }

      n = n.parentElement;
    }

    return e;
  }

  function c(t) {
    var e = u(t);

    if (null !== e) {
      if (e.disabled || e.getAttribute("disabled") || e.classList.contains("disabled")) return;

      if (h.registerEvent(t), "touchstart" === t.type && v.delay) {
        var n = !1,
            o = setTimeout(function () {
          o = null, v.show(t, e);
        }, v.delay),
            a = function a(_a) {
          o && (clearTimeout(o), o = null, v.show(t, e)), n || (n = !0, v.hide(_a, e)), r();
        },
            i = function i(t) {
          o && (clearTimeout(o), o = null), a(t), r();
        };

        e.addEventListener("touchmove", i, !1), e.addEventListener("touchend", a, !1), e.addEventListener("touchcancel", a, !1);

        var r = function r() {
          e.removeEventListener("touchmove", i), e.removeEventListener("touchend", a), e.removeEventListener("touchcancel", a);
        };
      } else v.show(t, e), m && (e.addEventListener("touchend", v.hide, !1), e.addEventListener("touchcancel", v.hide, !1)), e.addEventListener("mouseup", v.hide, !1), e.addEventListener("mouseleave", v.hide, !1);
    }
  }

  var l = l || {},
      d = document.querySelectorAll.bind(document),
      f = Object.prototype.toString,
      m = "ontouchstart" in window,
      v = {
    duration: 750,
    delay: 200,
    show: function show(t, e, n) {
      if (2 === t.button) return !1;
      e = e || this;
      var o = document.createElement("div");
      o.className = "waves-ripple waves-rippling", e.appendChild(o);
      var a = i(e),
          s = 0,
          u = 0;
      "touches" in t && t.touches.length ? (s = t.touches[0].pageY - a.top, u = t.touches[0].pageX - a.left) : (s = t.pageY - a.top, u = t.pageX - a.left), u = u >= 0 ? u : 0, s = s >= 0 ? s : 0;
      var c = "scale(" + e.clientWidth / 100 * 3 + ")",
          l = "translate(0,0)";
      n && (l = "translate(" + n.x + "px, " + n.y + "px)"), o.setAttribute("data-hold", Date.now()), o.setAttribute("data-x", u), o.setAttribute("data-y", s), o.setAttribute("data-scale", c), o.setAttribute("data-translate", l);
      var d = {
        top: s + "px",
        left: u + "px"
      };
      o.classList.add("waves-notransition"), o.setAttribute("style", r(d)), o.classList.remove("waves-notransition"), d["-webkit-transform"] = c + " " + l, d["-moz-transform"] = c + " " + l, d["-ms-transform"] = c + " " + l, d["-o-transform"] = c + " " + l, d.transform = c + " " + l, d.opacity = "1";
      var f = "mousemove" === t.type ? 2500 : v.duration;
      d["-webkit-transition-duration"] = f + "ms", d["-moz-transition-duration"] = f + "ms", d["-o-transition-duration"] = f + "ms", d["transition-duration"] = f + "ms", o.setAttribute("style", r(d));
    },
    hide: function hide(t, e) {
      for (var n = (e = e || this).getElementsByClassName("waves-rippling"), o = 0, a = n.length; o < a; o++) {
        s(t, e, n[o]);
      }

      m && (e.removeEventListener("touchend", v.hide), e.removeEventListener("touchcancel", v.hide)), e.removeEventListener("mouseup", v.hide), e.removeEventListener("mouseleave", v.hide);
    }
  },
      p = {
    input: function input(t) {
      var e = t.parentNode;

      if ("i" !== e.tagName.toLowerCase() || !e.classList.contains("waves-effect")) {
        var n = document.createElement("i");
        n.className = t.className + " waves-input-wrapper", t.className = "waves-button-input", e.replaceChild(n, t), n.appendChild(t);
        var o = window.getComputedStyle(t, null),
            a = o.color,
            i = o.backgroundColor;
        n.setAttribute("style", "color:" + a + ";background:" + i), t.setAttribute("style", "background-color:rgba(0,0,0,0);");
      }
    },
    img: function img(t) {
      var e = t.parentNode;

      if ("i" !== e.tagName.toLowerCase() || !e.classList.contains("waves-effect")) {
        var n = document.createElement("i");
        e.replaceChild(n, t), n.appendChild(t);
      }
    }
  },
      h = {
    touches: 0,
    allowEvent: function allowEvent(t) {
      var e = !0;
      return /^(mousedown|mousemove)$/.test(t.type) && h.touches && (e = !1), e;
    },
    registerEvent: function registerEvent(t) {
      var e = t.type;
      "touchstart" === e ? h.touches += 1 : /^(touchend|touchcancel)$/.test(e) && setTimeout(function () {
        h.touches && (h.touches -= 1);
      }, 500);
    }
  };
  return l.init = function (t) {
    var e = document.body;
    "duration" in (t = t || {}) && (v.duration = t.duration), "delay" in t && (v.delay = t.delay), m && (e.addEventListener("touchstart", c, !1), e.addEventListener("touchcancel", h.registerEvent, !1), e.addEventListener("touchend", h.registerEvent, !1)), e.addEventListener("mousedown", c, !1);
  }, l.attach = function (t, e) {
    t = a(t), "[object Array]" === f.call(e) && (e = e.join(" ")), e = e ? " " + e : "";

    for (var n, o, i = 0, r = t.length; i < r; i++) {
      o = (n = t[i]).tagName.toLowerCase(), -1 !== ["input", "img"].indexOf(o) && (p[o](n), n = n.parentElement), -1 === n.className.indexOf("waves-effect") && (n.className += " waves-effect" + e);
    }
  }, l.ripple = function (t, e) {
    var n = (t = a(t)).length;
    if (e = e || {}, e.wait = e.wait || 0, e.position = e.position || null, n) for (var o, r, s, u = {}, c = 0, l = {
      type: "mousedown",
      button: 1
    }; c < n; c++) {
      if (o = t[c], r = e.position || {
        x: o.clientWidth / 2,
        y: o.clientHeight / 2
      }, s = i(o), u.x = s.left + r.x, u.y = s.top + r.y, l.pageX = u.x, l.pageY = u.y, v.show(l, o), e.wait >= 0 && null !== e.wait) {
        var d = {
          type: "mouseup",
          button: 1
        };
        setTimeout(function (t, e) {
          return function () {
            v.hide(t, e);
          };
        }(d, o), e.wait);
      }
    }
  }, l.calm = function (t) {
    for (var e = {
      type: "mouseup",
      button: 1
    }, n = 0, o = (t = a(t)).length; n < o; n++) {
      v.hide(e, t[n]);
    }
  }, l.displayEffect = function (t) {
    l.init(t);
  }, l;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./resources/sass/admin/libs/simplebar/simplebar.min.js":
/*!**************************************************************!*\
  !*** ./resources/sass/admin/libs/simplebar/simplebar.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * SimpleBar.js - v5.1.0
 * Scrollbars, simpler.
 * https://grsmto.github.io/simplebar/
 *
 * Made by Adrien Denat from a fork by Jonathan Nicol
 * Under MIT License
 */
!function (t, e) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  "use strict";

  var t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

  function e(t, e) {
    return t(e = {
      exports: {}
    }, e.exports), e.exports;
  }

  var r,
      n,
      i,
      o = "object",
      s = function s(t) {
    return t && t.Math == Math && t;
  },
      a = s((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) == o && globalThis) || s((typeof window === "undefined" ? "undefined" : _typeof(window)) == o && window) || s((typeof self === "undefined" ? "undefined" : _typeof(self)) == o && self) || s(_typeof(t) == o && t) || Function("return this")(),
      c = function c(t) {
    try {
      return !!t();
    } catch (t) {
      return !0;
    }
  },
      l = !c(function () {
    return 7 != Object.defineProperty({}, "a", {
      get: function get() {
        return 7;
      }
    }).a;
  }),
      u = {}.propertyIsEnumerable,
      f = Object.getOwnPropertyDescriptor,
      h = {
    f: f && !u.call({
      1: 2
    }, 1) ? function (t) {
      var e = f(this, t);
      return !!e && e.enumerable;
    } : u
  },
      d = function d(t, e) {
    return {
      enumerable: !(1 & t),
      configurable: !(2 & t),
      writable: !(4 & t),
      value: e
    };
  },
      p = {}.toString,
      v = function v(t) {
    return p.call(t).slice(8, -1);
  },
      g = "".split,
      y = c(function () {
    return !Object("z").propertyIsEnumerable(0);
  }) ? function (t) {
    return "String" == v(t) ? g.call(t, "") : Object(t);
  } : Object,
      b = function b(t) {
    if (null == t) throw TypeError("Can't call method on " + t);
    return t;
  },
      m = function m(t) {
    return y(b(t));
  },
      x = function x(t) {
    return "object" == _typeof(t) ? null !== t : "function" == typeof t;
  },
      E = function E(t, e) {
    if (!x(t)) return t;
    var r, n;
    if (e && "function" == typeof (r = t.toString) && !x(n = r.call(t))) return n;
    if ("function" == typeof (r = t.valueOf) && !x(n = r.call(t))) return n;
    if (!e && "function" == typeof (r = t.toString) && !x(n = r.call(t))) return n;
    throw TypeError("Can't convert object to primitive value");
  },
      w = {}.hasOwnProperty,
      O = function O(t, e) {
    return w.call(t, e);
  },
      _ = a.document,
      S = x(_) && x(_.createElement),
      A = function A(t) {
    return S ? _.createElement(t) : {};
  },
      k = !l && !c(function () {
    return 7 != Object.defineProperty(A("div"), "a", {
      get: function get() {
        return 7;
      }
    }).a;
  }),
      L = Object.getOwnPropertyDescriptor,
      M = {
    f: l ? L : function (t, e) {
      if (t = m(t), e = E(e, !0), k) try {
        return L(t, e);
      } catch (t) {}
      if (O(t, e)) return d(!h.f.call(t, e), t[e]);
    }
  },
      T = function T(t) {
    if (!x(t)) throw TypeError(String(t) + " is not an object");
    return t;
  },
      j = Object.defineProperty,
      R = {
    f: l ? j : function (t, e, r) {
      if (T(t), e = E(e, !0), T(r), k) try {
        return j(t, e, r);
      } catch (t) {}
      if ("get" in r || "set" in r) throw TypeError("Accessors not supported");
      return "value" in r && (t[e] = r.value), t;
    }
  },
      W = l ? function (t, e, r) {
    return R.f(t, e, d(1, r));
  } : function (t, e, r) {
    return t[e] = r, t;
  },
      z = function z(t, e) {
    try {
      W(a, t, e);
    } catch (r) {
      a[t] = e;
    }

    return e;
  },
      C = e(function (t) {
    var e = a["__core-js_shared__"] || z("__core-js_shared__", {});
    (t.exports = function (t, r) {
      return e[t] || (e[t] = void 0 !== r ? r : {});
    })("versions", []).push({
      version: "3.2.1",
      mode: "global",
      copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
    });
  }),
      N = C("native-function-to-string", Function.toString),
      I = a.WeakMap,
      D = "function" == typeof I && /native code/.test(N.call(I)),
      P = 0,
      V = Math.random(),
      F = function F(t) {
    return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++P + V).toString(36);
  },
      B = C("keys"),
      H = function H(t) {
    return B[t] || (B[t] = F(t));
  },
      q = {},
      $ = a.WeakMap;

  if (D) {
    var X = new $(),
        Y = X.get,
        G = X.has,
        U = X.set;
    r = function r(t, e) {
      return U.call(X, t, e), e;
    }, n = function n(t) {
      return Y.call(X, t) || {};
    }, i = function i(t) {
      return G.call(X, t);
    };
  } else {
    var Q = H("state");
    q[Q] = !0, r = function r(t, e) {
      return W(t, Q, e), e;
    }, n = function n(t) {
      return O(t, Q) ? t[Q] : {};
    }, i = function i(t) {
      return O(t, Q);
    };
  }

  var K = {
    set: r,
    get: n,
    has: i,
    enforce: function enforce(t) {
      return i(t) ? n(t) : r(t, {});
    },
    getterFor: function getterFor(t) {
      return function (e) {
        var r;
        if (!x(e) || (r = n(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required");
        return r;
      };
    }
  },
      J = e(function (t) {
    var e = K.get,
        r = K.enforce,
        n = String(N).split("toString");
    C("inspectSource", function (t) {
      return N.call(t);
    }), (t.exports = function (t, e, i, o) {
      var s = !!o && !!o.unsafe,
          c = !!o && !!o.enumerable,
          l = !!o && !!o.noTargetGet;
      "function" == typeof i && ("string" != typeof e || O(i, "name") || W(i, "name", e), r(i).source = n.join("string" == typeof e ? e : "")), t !== a ? (s ? !l && t[e] && (c = !0) : delete t[e], c ? t[e] = i : W(t, e, i)) : c ? t[e] = i : z(e, i);
    })(Function.prototype, "toString", function () {
      return "function" == typeof this && e(this).source || N.call(this);
    });
  }),
      Z = a,
      tt = function tt(t) {
    return "function" == typeof t ? t : void 0;
  },
      et = function et(t, e) {
    return arguments.length < 2 ? tt(Z[t]) || tt(a[t]) : Z[t] && Z[t][e] || a[t] && a[t][e];
  },
      rt = Math.ceil,
      nt = Math.floor,
      it = function it(t) {
    return isNaN(t = +t) ? 0 : (t > 0 ? nt : rt)(t);
  },
      ot = Math.min,
      st = function st(t) {
    return t > 0 ? ot(it(t), 9007199254740991) : 0;
  },
      at = Math.max,
      ct = Math.min,
      lt = function lt(t) {
    return function (e, r, n) {
      var i,
          o = m(e),
          s = st(o.length),
          a = function (t, e) {
        var r = it(t);
        return r < 0 ? at(r + e, 0) : ct(r, e);
      }(n, s);

      if (t && r != r) {
        for (; s > a;) {
          if ((i = o[a++]) != i) return !0;
        }
      } else for (; s > a; a++) {
        if ((t || a in o) && o[a] === r) return t || a || 0;
      }

      return !t && -1;
    };
  },
      ut = {
    includes: lt(!0),
    indexOf: lt(!1)
  }.indexOf,
      ft = function ft(t, e) {
    var r,
        n = m(t),
        i = 0,
        o = [];

    for (r in n) {
      !O(q, r) && O(n, r) && o.push(r);
    }

    for (; e.length > i;) {
      O(n, r = e[i++]) && (~ut(o, r) || o.push(r));
    }

    return o;
  },
      ht = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"],
      dt = ht.concat("length", "prototype"),
      pt = {
    f: Object.getOwnPropertyNames || function (t) {
      return ft(t, dt);
    }
  },
      vt = {
    f: Object.getOwnPropertySymbols
  },
      gt = et("Reflect", "ownKeys") || function (t) {
    var e = pt.f(T(t)),
        r = vt.f;
    return r ? e.concat(r(t)) : e;
  },
      yt = function yt(t, e) {
    for (var r = gt(e), n = R.f, i = M.f, o = 0; o < r.length; o++) {
      var s = r[o];
      O(t, s) || n(t, s, i(e, s));
    }
  },
      bt = /#|\.prototype\./,
      mt = function mt(t, e) {
    var r = Et[xt(t)];
    return r == Ot || r != wt && ("function" == typeof e ? c(e) : !!e);
  },
      xt = mt.normalize = function (t) {
    return String(t).replace(bt, ".").toLowerCase();
  },
      Et = mt.data = {},
      wt = mt.NATIVE = "N",
      Ot = mt.POLYFILL = "P",
      _t = mt,
      St = M.f,
      At = function At(t, e) {
    var r,
        n,
        i,
        o,
        s,
        c = t.target,
        l = t.global,
        u = t.stat;
    if (r = l ? a : u ? a[c] || z(c, {}) : (a[c] || {}).prototype) for (n in e) {
      if (o = e[n], i = t.noTargetGet ? (s = St(r, n)) && s.value : r[n], !_t(l ? n : c + (u ? "." : "#") + n, t.forced) && void 0 !== i) {
        if (_typeof(o) == _typeof(i)) continue;
        yt(o, i);
      }

      (t.sham || i && i.sham) && W(o, "sham", !0), J(r, n, o, t);
    }
  },
      kt = function kt(t) {
    if ("function" != typeof t) throw TypeError(String(t) + " is not a function");
    return t;
  },
      Lt = function Lt(t, e, r) {
    if (kt(t), void 0 === e) return t;

    switch (r) {
      case 0:
        return function () {
          return t.call(e);
        };

      case 1:
        return function (r) {
          return t.call(e, r);
        };

      case 2:
        return function (r, n) {
          return t.call(e, r, n);
        };

      case 3:
        return function (r, n, i) {
          return t.call(e, r, n, i);
        };
    }

    return function () {
      return t.apply(e, arguments);
    };
  },
      Mt = function Mt(t) {
    return Object(b(t));
  },
      Tt = Array.isArray || function (t) {
    return "Array" == v(t);
  },
      jt = !!Object.getOwnPropertySymbols && !c(function () {
    return !String(Symbol());
  }),
      Rt = a.Symbol,
      Wt = C("wks"),
      zt = function zt(t) {
    return Wt[t] || (Wt[t] = jt && Rt[t] || (jt ? Rt : F)("Symbol." + t));
  },
      Ct = zt("species"),
      Nt = function Nt(t, e) {
    var r;
    return Tt(t) && ("function" != typeof (r = t.constructor) || r !== Array && !Tt(r.prototype) ? x(r) && null === (r = r[Ct]) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === e ? 0 : e);
  },
      It = [].push,
      Dt = function Dt(t) {
    var e = 1 == t,
        r = 2 == t,
        n = 3 == t,
        i = 4 == t,
        o = 6 == t,
        s = 5 == t || o;
    return function (a, c, l, u) {
      for (var f, h, d = Mt(a), p = y(d), v = Lt(c, l, 3), g = st(p.length), b = 0, m = u || Nt, x = e ? m(a, g) : r ? m(a, 0) : void 0; g > b; b++) {
        if ((s || b in p) && (h = v(f = p[b], b, d), t)) if (e) x[b] = h;else if (h) switch (t) {
          case 3:
            return !0;

          case 5:
            return f;

          case 6:
            return b;

          case 2:
            It.call(x, f);
        } else if (i) return !1;
      }

      return o ? -1 : n || i ? i : x;
    };
  },
      Pt = {
    forEach: Dt(0),
    map: Dt(1),
    filter: Dt(2),
    some: Dt(3),
    every: Dt(4),
    find: Dt(5),
    findIndex: Dt(6)
  },
      Vt = function Vt(t, e) {
    var r = [][t];
    return !r || !c(function () {
      r.call(null, e || function () {
        throw 1;
      }, 1);
    });
  },
      Ft = Pt.forEach,
      Bt = Vt("forEach") ? function (t) {
    return Ft(this, t, arguments.length > 1 ? arguments[1] : void 0);
  } : [].forEach;

  At({
    target: "Array",
    proto: !0,
    forced: [].forEach != Bt
  }, {
    forEach: Bt
  });
  var Ht = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  for (var qt in Ht) {
    var $t = a[qt],
        Xt = $t && $t.prototype;
    if (Xt && Xt.forEach !== Bt) try {
      W(Xt, "forEach", Bt);
    } catch (t) {
      Xt.forEach = Bt;
    }
  }

  var Yt = !("undefined" == typeof window || !window.document || !window.document.createElement),
      Gt = zt("species"),
      Ut = Pt.filter;
  At({
    target: "Array",
    proto: !0,
    forced: !function (t) {
      return !c(function () {
        var e = [];
        return (e.constructor = {})[Gt] = function () {
          return {
            foo: 1
          };
        }, 1 !== e[t](Boolean).foo;
      });
    }("filter")
  }, {
    filter: function filter(t) {
      return Ut(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  });

  var Qt = Object.keys || function (t) {
    return ft(t, ht);
  },
      Kt = l ? Object.defineProperties : function (t, e) {
    T(t);

    for (var r, n = Qt(e), i = n.length, o = 0; i > o;) {
      R.f(t, r = n[o++], e[r]);
    }

    return t;
  },
      Jt = et("document", "documentElement"),
      Zt = H("IE_PROTO"),
      te = function te() {},
      _ee = function ee() {
    var t,
        e = A("iframe"),
        r = ht.length;

    for (e.style.display = "none", Jt.appendChild(e), e.src = String("javascript:"), (t = e.contentWindow.document).open(), t.write("<script>document.F=Object<\/script>"), t.close(), _ee = t.F; r--;) {
      delete _ee.prototype[ht[r]];
    }

    return _ee();
  },
      re = Object.create || function (t, e) {
    var r;
    return null !== t ? (te.prototype = T(t), r = new te(), te.prototype = null, r[Zt] = t) : r = _ee(), void 0 === e ? r : Kt(r, e);
  };

  q[Zt] = !0;
  var ne = zt("unscopables"),
      ie = Array.prototype;
  null == ie[ne] && W(ie, ne, re(null));

  var oe,
      se,
      ae,
      ce = function ce(t) {
    ie[ne][t] = !0;
  },
      le = {},
      ue = !c(function () {
    function t() {}

    return t.prototype.constructor = null, Object.getPrototypeOf(new t()) !== t.prototype;
  }),
      fe = H("IE_PROTO"),
      he = Object.prototype,
      de = ue ? Object.getPrototypeOf : function (t) {
    return t = Mt(t), O(t, fe) ? t[fe] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? he : null;
  },
      pe = zt("iterator"),
      ve = !1;

  [].keys && ("next" in (ae = [].keys()) ? (se = de(de(ae))) !== Object.prototype && (oe = se) : ve = !0), null == oe && (oe = {}), O(oe, pe) || W(oe, pe, function () {
    return this;
  });

  var ge = {
    IteratorPrototype: oe,
    BUGGY_SAFARI_ITERATORS: ve
  },
      ye = R.f,
      be = zt("toStringTag"),
      me = function me(t, e, r) {
    t && !O(t = r ? t : t.prototype, be) && ye(t, be, {
      configurable: !0,
      value: e
    });
  },
      xe = ge.IteratorPrototype,
      Ee = function Ee() {
    return this;
  },
      we = Object.setPrototypeOf || ("__proto__" in {} ? function () {
    var t,
        e = !1,
        r = {};

    try {
      (t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r, []), e = r instanceof Array;
    } catch (t) {}

    return function (r, n) {
      return T(r), function (t) {
        if (!x(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype");
      }(n), e ? t.call(r, n) : r.__proto__ = n, r;
    };
  }() : void 0),
      Oe = ge.IteratorPrototype,
      _e = ge.BUGGY_SAFARI_ITERATORS,
      Se = zt("iterator"),
      Ae = function Ae() {
    return this;
  },
      ke = function ke(t, e, r, n, i, o, s) {
    !function (t, e, r) {
      var n = e + " Iterator";
      t.prototype = re(xe, {
        next: d(1, r)
      }), me(t, n, !1), le[n] = Ee;
    }(r, e, n);

    var a,
        c,
        l,
        u = function u(t) {
      if (t === i && g) return g;
      if (!_e && t in p) return p[t];

      switch (t) {
        case "keys":
        case "values":
        case "entries":
          return function () {
            return new r(this, t);
          };
      }

      return function () {
        return new r(this);
      };
    },
        f = e + " Iterator",
        h = !1,
        p = t.prototype,
        v = p[Se] || p["@@iterator"] || i && p[i],
        g = !_e && v || u(i),
        y = "Array" == e && p.entries || v;

    if (y && (a = de(y.call(new t())), Oe !== Object.prototype && a.next && (de(a) !== Oe && (we ? we(a, Oe) : "function" != typeof a[Se] && W(a, Se, Ae)), me(a, f, !0))), "values" == i && v && "values" !== v.name && (h = !0, g = function g() {
      return v.call(this);
    }), p[Se] !== g && W(p, Se, g), le[e] = g, i) if (c = {
      values: u("values"),
      keys: o ? g : u("keys"),
      entries: u("entries")
    }, s) for (l in c) {
      !_e && !h && l in p || J(p, l, c[l]);
    } else At({
      target: e,
      proto: !0,
      forced: _e || h
    }, c);
    return c;
  },
      Le = K.set,
      Me = K.getterFor("Array Iterator"),
      Te = ke(Array, "Array", function (t, e) {
    Le(this, {
      type: "Array Iterator",
      target: m(t),
      index: 0,
      kind: e
    });
  }, function () {
    var t = Me(this),
        e = t.target,
        r = t.kind,
        n = t.index++;
    return !e || n >= e.length ? (t.target = void 0, {
      value: void 0,
      done: !0
    }) : "keys" == r ? {
      value: n,
      done: !1
    } : "values" == r ? {
      value: e[n],
      done: !1
    } : {
      value: [n, e[n]],
      done: !1
    };
  }, "values");

  le.Arguments = le.Array, ce("keys"), ce("values"), ce("entries");
  var je = Object.assign,
      Re = !je || c(function () {
    var t = {},
        e = {},
        r = Symbol();
    return t[r] = 7, "abcdefghijklmnopqrst".split("").forEach(function (t) {
      e[t] = t;
    }), 7 != je({}, t)[r] || "abcdefghijklmnopqrst" != Qt(je({}, e)).join("");
  }) ? function (t, e) {
    for (var r = Mt(t), n = arguments.length, i = 1, o = vt.f, s = h.f; n > i;) {
      for (var a, c = y(arguments[i++]), u = o ? Qt(c).concat(o(c)) : Qt(c), f = u.length, d = 0; f > d;) {
        a = u[d++], l && !s.call(c, a) || (r[a] = c[a]);
      }
    }

    return r;
  } : je;
  At({
    target: "Object",
    stat: !0,
    forced: Object.assign !== Re
  }, {
    assign: Re
  });

  var We = zt("toStringTag"),
      ze = "Arguments" == v(function () {
    return arguments;
  }()),
      Ce = function Ce(t) {
    var e, r, n;
    return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = function (t, e) {
      try {
        return t[e];
      } catch (t) {}
    }(e = Object(t), We)) ? r : ze ? v(e) : "Object" == (n = v(e)) && "function" == typeof e.callee ? "Arguments" : n;
  },
      Ne = {};

  Ne[zt("toStringTag")] = "z";
  var Ie = "[object z]" !== String(Ne) ? function () {
    return "[object " + Ce(this) + "]";
  } : Ne.toString,
      De = Object.prototype;
  Ie !== De.toString && J(De, "toString", Ie, {
    unsafe: !0
  });

  var Pe = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF",
      Ve = "[" + Pe + "]",
      Fe = RegExp("^" + Ve + Ve + "*"),
      Be = RegExp(Ve + Ve + "*$"),
      He = function He(t) {
    return function (e) {
      var r = String(b(e));
      return 1 & t && (r = r.replace(Fe, "")), 2 & t && (r = r.replace(Be, "")), r;
    };
  },
      qe = {
    start: He(1),
    end: He(2),
    trim: He(3)
  }.trim,
      $e = a.parseInt,
      Xe = /^[+-]?0[Xx]/,
      Ye = 8 !== $e(Pe + "08") || 22 !== $e(Pe + "0x16") ? function (t, e) {
    var r = qe(String(t));
    return $e(r, e >>> 0 || (Xe.test(r) ? 16 : 10));
  } : $e;

  At({
    global: !0,
    forced: parseInt != Ye
  }, {
    parseInt: Ye
  });

  var Ge = function Ge(t) {
    return function (e, r) {
      var n,
          i,
          o = String(b(e)),
          s = it(r),
          a = o.length;
      return s < 0 || s >= a ? t ? "" : void 0 : (n = o.charCodeAt(s)) < 55296 || n > 56319 || s + 1 === a || (i = o.charCodeAt(s + 1)) < 56320 || i > 57343 ? t ? o.charAt(s) : n : t ? o.slice(s, s + 2) : i - 56320 + (n - 55296 << 10) + 65536;
    };
  },
      Ue = {
    codeAt: Ge(!1),
    charAt: Ge(!0)
  },
      Qe = Ue.charAt,
      Ke = K.set,
      Je = K.getterFor("String Iterator");

  ke(String, "String", function (t) {
    Ke(this, {
      type: "String Iterator",
      string: String(t),
      index: 0
    });
  }, function () {
    var t,
        e = Je(this),
        r = e.string,
        n = e.index;
    return n >= r.length ? {
      value: void 0,
      done: !0
    } : (t = Qe(r, n), e.index += t.length, {
      value: t,
      done: !1
    });
  });

  var Ze = function Ze(t, e, r) {
    for (var n in e) {
      J(t, n, e[n], r);
    }

    return t;
  },
      tr = !c(function () {
    return Object.isExtensible(Object.preventExtensions({}));
  }),
      er = e(function (t) {
    var e = R.f,
        r = F("meta"),
        n = 0,
        i = Object.isExtensible || function () {
      return !0;
    },
        o = function o(t) {
      e(t, r, {
        value: {
          objectID: "O" + ++n,
          weakData: {}
        }
      });
    },
        s = t.exports = {
      REQUIRED: !1,
      fastKey: function fastKey(t, e) {
        if (!x(t)) return "symbol" == _typeof(t) ? t : ("string" == typeof t ? "S" : "P") + t;

        if (!O(t, r)) {
          if (!i(t)) return "F";
          if (!e) return "E";
          o(t);
        }

        return t[r].objectID;
      },
      getWeakData: function getWeakData(t, e) {
        if (!O(t, r)) {
          if (!i(t)) return !0;
          if (!e) return !1;
          o(t);
        }

        return t[r].weakData;
      },
      onFreeze: function onFreeze(t) {
        return tr && s.REQUIRED && i(t) && !O(t, r) && o(t), t;
      }
    };

    q[r] = !0;
  }),
      rr = (er.REQUIRED, er.fastKey, er.getWeakData, er.onFreeze, zt("iterator")),
      nr = Array.prototype,
      ir = zt("iterator"),
      or = function or(t, e, r, n) {
    try {
      return n ? e(T(r)[0], r[1]) : e(r);
    } catch (e) {
      var i = t["return"];
      throw void 0 !== i && T(i.call(t)), e;
    }
  },
      sr = e(function (t) {
    var e = function e(t, _e2) {
      this.stopped = t, this.result = _e2;
    };

    (t.exports = function (t, r, n, i, o) {
      var s,
          a,
          c,
          l,
          u,
          f,
          h,
          d = Lt(r, n, i ? 2 : 1);
      if (o) s = t;else {
        if ("function" != typeof (a = function (t) {
          if (null != t) return t[ir] || t["@@iterator"] || le[Ce(t)];
        }(t))) throw TypeError("Target is not iterable");

        if (void 0 !== (h = a) && (le.Array === h || nr[rr] === h)) {
          for (c = 0, l = st(t.length); l > c; c++) {
            if ((u = i ? d(T(f = t[c])[0], f[1]) : d(t[c])) && u instanceof e) return u;
          }

          return new e(!1);
        }

        s = a.call(t);
      }

      for (; !(f = s.next()).done;) {
        if ((u = or(s, d, f.value, i)) && u instanceof e) return u;
      }

      return new e(!1);
    }).stop = function (t) {
      return new e(!0, t);
    };
  }),
      ar = function ar(t, e, r) {
    if (!(t instanceof e)) throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
    return t;
  },
      cr = zt("iterator"),
      lr = !1;

  try {
    var ur = 0,
        fr = {
      next: function next() {
        return {
          done: !!ur++
        };
      },
      "return": function _return() {
        lr = !0;
      }
    };
    fr[cr] = function () {
      return this;
    }, Array.from(fr, function () {
      throw 2;
    });
  } catch (t) {}

  var hr = function hr(t, e, r, n, i) {
    var o = a[t],
        s = o && o.prototype,
        l = o,
        u = n ? "set" : "add",
        f = {},
        h = function h(t) {
      var e = s[t];
      J(s, t, "add" == t ? function (t) {
        return e.call(this, 0 === t ? 0 : t), this;
      } : "delete" == t ? function (t) {
        return !(i && !x(t)) && e.call(this, 0 === t ? 0 : t);
      } : "get" == t ? function (t) {
        return i && !x(t) ? void 0 : e.call(this, 0 === t ? 0 : t);
      } : "has" == t ? function (t) {
        return !(i && !x(t)) && e.call(this, 0 === t ? 0 : t);
      } : function (t, r) {
        return e.call(this, 0 === t ? 0 : t, r), this;
      });
    };

    if (_t(t, "function" != typeof o || !(i || s.forEach && !c(function () {
      new o().entries().next();
    })))) l = r.getConstructor(e, t, n, u), er.REQUIRED = !0;else if (_t(t, !0)) {
      var d = new l(),
          p = d[u](i ? {} : -0, 1) != d,
          v = c(function () {
        d.has(1);
      }),
          g = function (t, e) {
        if (!e && !lr) return !1;
        var r = !1;

        try {
          var n = {};
          n[cr] = function () {
            return {
              next: function next() {
                return {
                  done: r = !0
                };
              }
            };
          }, t(n);
        } catch (t) {}

        return r;
      }(function (t) {
        new o(t);
      }),
          y = !i && c(function () {
        for (var t = new o(), e = 5; e--;) {
          t[u](e, e);
        }

        return !t.has(-0);
      });

      g || ((l = e(function (e, r) {
        ar(e, l, t);

        var i = function (t, e, r) {
          var n, i;
          return we && "function" == typeof (n = e.constructor) && n !== r && x(i = n.prototype) && i !== r.prototype && we(t, i), t;
        }(new o(), e, l);

        return null != r && sr(r, i[u], i, n), i;
      })).prototype = s, s.constructor = l), (v || y) && (h("delete"), h("has"), n && h("get")), (y || p) && h(u), i && s.clear && delete s.clear;
    }
    return f[t] = l, At({
      global: !0,
      forced: l != o
    }, f), me(l, t), i || r.setStrong(l, t, n), l;
  },
      dr = er.getWeakData,
      pr = K.set,
      vr = K.getterFor,
      gr = Pt.find,
      yr = Pt.findIndex,
      br = 0,
      mr = function mr(t) {
    return t.frozen || (t.frozen = new xr());
  },
      xr = function xr() {
    this.entries = [];
  },
      Er = function Er(t, e) {
    return gr(t.entries, function (t) {
      return t[0] === e;
    });
  };

  xr.prototype = {
    get: function get(t) {
      var e = Er(this, t);
      if (e) return e[1];
    },
    has: function has(t) {
      return !!Er(this, t);
    },
    set: function set(t, e) {
      var r = Er(this, t);
      r ? r[1] = e : this.entries.push([t, e]);
    },
    "delete": function _delete(t) {
      var e = yr(this.entries, function (e) {
        return e[0] === t;
      });
      return ~e && this.entries.splice(e, 1), !!~e;
    }
  };

  var wr = {
    getConstructor: function getConstructor(t, e, r, n) {
      var i = t(function (t, o) {
        ar(t, i, e), pr(t, {
          type: e,
          id: br++,
          frozen: void 0
        }), null != o && sr(o, t[n], t, r);
      }),
          o = vr(e),
          s = function s(t, e, r) {
        var n = o(t),
            i = dr(T(e), !0);
        return !0 === i ? mr(n).set(e, r) : i[n.id] = r, t;
      };

      return Ze(i.prototype, {
        "delete": function _delete(t) {
          var e = o(this);
          if (!x(t)) return !1;
          var r = dr(t);
          return !0 === r ? mr(e)["delete"](t) : r && O(r, e.id) && delete r[e.id];
        },
        has: function has(t) {
          var e = o(this);
          if (!x(t)) return !1;
          var r = dr(t);
          return !0 === r ? mr(e).has(t) : r && O(r, e.id);
        }
      }), Ze(i.prototype, r ? {
        get: function get(t) {
          var e = o(this);

          if (x(t)) {
            var r = dr(t);
            return !0 === r ? mr(e).get(t) : r ? r[e.id] : void 0;
          }
        },
        set: function set(t, e) {
          return s(this, t, e);
        }
      } : {
        add: function add(t) {
          return s(this, t, !0);
        }
      }), i;
    }
  },
      Or = (e(function (t) {
    var e,
        r = K.enforce,
        n = !a.ActiveXObject && "ActiveXObject" in a,
        i = Object.isExtensible,
        o = function o(t) {
      return function () {
        return t(this, arguments.length ? arguments[0] : void 0);
      };
    },
        s = t.exports = hr("WeakMap", o, wr, !0, !0);

    if (D && n) {
      e = wr.getConstructor(o, "WeakMap", !0), er.REQUIRED = !0;
      var c = s.prototype,
          l = c["delete"],
          u = c.has,
          f = c.get,
          h = c.set;
      Ze(c, {
        "delete": function _delete(t) {
          if (x(t) && !i(t)) {
            var n = r(this);
            return n.frozen || (n.frozen = new e()), l.call(this, t) || n.frozen["delete"](t);
          }

          return l.call(this, t);
        },
        has: function has(t) {
          if (x(t) && !i(t)) {
            var n = r(this);
            return n.frozen || (n.frozen = new e()), u.call(this, t) || n.frozen.has(t);
          }

          return u.call(this, t);
        },
        get: function get(t) {
          if (x(t) && !i(t)) {
            var n = r(this);
            return n.frozen || (n.frozen = new e()), u.call(this, t) ? f.call(this, t) : n.frozen.get(t);
          }

          return f.call(this, t);
        },
        set: function set(t, n) {
          if (x(t) && !i(t)) {
            var o = r(this);
            o.frozen || (o.frozen = new e()), u.call(this, t) ? h.call(this, t, n) : o.frozen.set(t, n);
          } else h.call(this, t, n);

          return this;
        }
      });
    }
  }), zt("iterator")),
      _r = zt("toStringTag"),
      Sr = Te.values;

  for (var Ar in Ht) {
    var kr = a[Ar],
        Lr = kr && kr.prototype;

    if (Lr) {
      if (Lr[Or] !== Sr) try {
        W(Lr, Or, Sr);
      } catch (t) {
        Lr[Or] = Sr;
      }
      if (Lr[_r] || W(Lr, _r, Ar), Ht[Ar]) for (var Mr in Te) {
        if (Lr[Mr] !== Te[Mr]) try {
          W(Lr, Mr, Te[Mr]);
        } catch (t) {
          Lr[Mr] = Te[Mr];
        }
      }
    }
  }

  var Tr = "Expected a function",
      jr = NaN,
      Rr = "[object Symbol]",
      Wr = /^\s+|\s+$/g,
      zr = /^[-+]0x[0-9a-f]+$/i,
      Cr = /^0b[01]+$/i,
      Nr = /^0o[0-7]+$/i,
      Ir = parseInt,
      Dr = "object" == _typeof(t) && t && t.Object === Object && t,
      Pr = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
      Vr = Dr || Pr || Function("return this")(),
      Fr = Object.prototype.toString,
      Br = Math.max,
      Hr = Math.min,
      qr = function qr() {
    return Vr.Date.now();
  };

  function $r(t, e, r) {
    var n,
        i,
        o,
        s,
        a,
        c,
        l = 0,
        u = !1,
        f = !1,
        h = !0;
    if ("function" != typeof t) throw new TypeError(Tr);

    function d(e) {
      var r = n,
          o = i;
      return n = i = void 0, l = e, s = t.apply(o, r);
    }

    function p(t) {
      var r = t - c;
      return void 0 === c || r >= e || r < 0 || f && t - l >= o;
    }

    function v() {
      var t = qr();
      if (p(t)) return g(t);
      a = setTimeout(v, function (t) {
        var r = e - (t - c);
        return f ? Hr(r, o - (t - l)) : r;
      }(t));
    }

    function g(t) {
      return a = void 0, h && n ? d(t) : (n = i = void 0, s);
    }

    function y() {
      var t = qr(),
          r = p(t);

      if (n = arguments, i = this, c = t, r) {
        if (void 0 === a) return function (t) {
          return l = t, a = setTimeout(v, e), u ? d(t) : s;
        }(c);
        if (f) return a = setTimeout(v, e), d(c);
      }

      return void 0 === a && (a = setTimeout(v, e)), s;
    }

    return e = Yr(e) || 0, Xr(r) && (u = !!r.leading, o = (f = "maxWait" in r) ? Br(Yr(r.maxWait) || 0, e) : o, h = "trailing" in r ? !!r.trailing : h), y.cancel = function () {
      void 0 !== a && clearTimeout(a), l = 0, n = c = i = a = void 0;
    }, y.flush = function () {
      return void 0 === a ? s : g(qr());
    }, y;
  }

  function Xr(t) {
    var e = _typeof(t);

    return !!t && ("object" == e || "function" == e);
  }

  function Yr(t) {
    if ("number" == typeof t) return t;
    if (function (t) {
      return "symbol" == _typeof(t) || function (t) {
        return !!t && "object" == _typeof(t);
      }(t) && Fr.call(t) == Rr;
    }(t)) return jr;

    if (Xr(t)) {
      var e = "function" == typeof t.valueOf ? t.valueOf() : t;
      t = Xr(e) ? e + "" : e;
    }

    if ("string" != typeof t) return 0 === t ? t : +t;
    t = t.replace(Wr, "");
    var r = Cr.test(t);
    return r || Nr.test(t) ? Ir(t.slice(2), r ? 2 : 8) : zr.test(t) ? jr : +t;
  }

  var Gr = function Gr(t, e, r) {
    var n = !0,
        i = !0;
    if ("function" != typeof t) throw new TypeError(Tr);
    return Xr(r) && (n = "leading" in r ? !!r.leading : n, i = "trailing" in r ? !!r.trailing : i), $r(t, e, {
      leading: n,
      maxWait: e,
      trailing: i
    });
  },
      Ur = "Expected a function",
      Qr = NaN,
      Kr = "[object Symbol]",
      Jr = /^\s+|\s+$/g,
      Zr = /^[-+]0x[0-9a-f]+$/i,
      tn = /^0b[01]+$/i,
      en = /^0o[0-7]+$/i,
      rn = parseInt,
      nn = "object" == _typeof(t) && t && t.Object === Object && t,
      on = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
      sn = nn || on || Function("return this")(),
      an = Object.prototype.toString,
      cn = Math.max,
      ln = Math.min,
      un = function un() {
    return sn.Date.now();
  };

  function fn(t) {
    var e = _typeof(t);

    return !!t && ("object" == e || "function" == e);
  }

  function hn(t) {
    if ("number" == typeof t) return t;
    if (function (t) {
      return "symbol" == _typeof(t) || function (t) {
        return !!t && "object" == _typeof(t);
      }(t) && an.call(t) == Kr;
    }(t)) return Qr;

    if (fn(t)) {
      var e = "function" == typeof t.valueOf ? t.valueOf() : t;
      t = fn(e) ? e + "" : e;
    }

    if ("string" != typeof t) return 0 === t ? t : +t;
    t = t.replace(Jr, "");
    var r = tn.test(t);
    return r || en.test(t) ? rn(t.slice(2), r ? 2 : 8) : Zr.test(t) ? Qr : +t;
  }

  var dn = function dn(t, e, r) {
    var n,
        i,
        o,
        s,
        a,
        c,
        l = 0,
        u = !1,
        f = !1,
        h = !0;
    if ("function" != typeof t) throw new TypeError(Ur);

    function d(e) {
      var r = n,
          o = i;
      return n = i = void 0, l = e, s = t.apply(o, r);
    }

    function p(t) {
      var r = t - c;
      return void 0 === c || r >= e || r < 0 || f && t - l >= o;
    }

    function v() {
      var t = un();
      if (p(t)) return g(t);
      a = setTimeout(v, function (t) {
        var r = e - (t - c);
        return f ? ln(r, o - (t - l)) : r;
      }(t));
    }

    function g(t) {
      return a = void 0, h && n ? d(t) : (n = i = void 0, s);
    }

    function y() {
      var t = un(),
          r = p(t);

      if (n = arguments, i = this, c = t, r) {
        if (void 0 === a) return function (t) {
          return l = t, a = setTimeout(v, e), u ? d(t) : s;
        }(c);
        if (f) return a = setTimeout(v, e), d(c);
      }

      return void 0 === a && (a = setTimeout(v, e)), s;
    }

    return e = hn(e) || 0, fn(r) && (u = !!r.leading, o = (f = "maxWait" in r) ? cn(hn(r.maxWait) || 0, e) : o, h = "trailing" in r ? !!r.trailing : h), y.cancel = function () {
      void 0 !== a && clearTimeout(a), l = 0, n = c = i = a = void 0;
    }, y.flush = function () {
      return void 0 === a ? s : g(un());
    }, y;
  },
      pn = "Expected a function",
      vn = "__lodash_hash_undefined__",
      gn = "[object Function]",
      yn = "[object GeneratorFunction]",
      bn = /^\[object .+?Constructor\]$/,
      mn = "object" == _typeof(t) && t && t.Object === Object && t,
      xn = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
      En = mn || xn || Function("return this")();

  var wn = Array.prototype,
      On = Function.prototype,
      _n = Object.prototype,
      Sn = En["__core-js_shared__"],
      An = function () {
    var t = /[^.]+$/.exec(Sn && Sn.keys && Sn.keys.IE_PROTO || "");
    return t ? "Symbol(src)_1." + t : "";
  }(),
      kn = On.toString,
      Ln = _n.hasOwnProperty,
      Mn = _n.toString,
      Tn = RegExp("^" + kn.call(Ln).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
      jn = wn.splice,
      Rn = Vn(En, "Map"),
      Wn = Vn(Object, "create");

  function zn(t) {
    var e = -1,
        r = t ? t.length : 0;

    for (this.clear(); ++e < r;) {
      var n = t[e];
      this.set(n[0], n[1]);
    }
  }

  function Cn(t) {
    var e = -1,
        r = t ? t.length : 0;

    for (this.clear(); ++e < r;) {
      var n = t[e];
      this.set(n[0], n[1]);
    }
  }

  function Nn(t) {
    var e = -1,
        r = t ? t.length : 0;

    for (this.clear(); ++e < r;) {
      var n = t[e];
      this.set(n[0], n[1]);
    }
  }

  function In(t, e) {
    for (var r, n, i = t.length; i--;) {
      if ((r = t[i][0]) === (n = e) || r != r && n != n) return i;
    }

    return -1;
  }

  function Dn(t) {
    return !(!Bn(t) || (e = t, An && An in e)) && (function (t) {
      var e = Bn(t) ? Mn.call(t) : "";
      return e == gn || e == yn;
    }(t) || function (t) {
      var e = !1;
      if (null != t && "function" != typeof t.toString) try {
        e = !!(t + "");
      } catch (t) {}
      return e;
    }(t) ? Tn : bn).test(function (t) {
      if (null != t) {
        try {
          return kn.call(t);
        } catch (t) {}

        try {
          return t + "";
        } catch (t) {}
      }

      return "";
    }(t));
    var e;
  }

  function Pn(t, e) {
    var r,
        n,
        i = t.__data__;
    return ("string" == (n = _typeof(r = e)) || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== r : null === r) ? i["string" == typeof e ? "string" : "hash"] : i.map;
  }

  function Vn(t, e) {
    var r = function (t, e) {
      return null == t ? void 0 : t[e];
    }(t, e);

    return Dn(r) ? r : void 0;
  }

  function Fn(t, e) {
    if ("function" != typeof t || e && "function" != typeof e) throw new TypeError(pn);

    var r = function r() {
      var n = arguments,
          i = e ? e.apply(this, n) : n[0],
          o = r.cache;
      if (o.has(i)) return o.get(i);
      var s = t.apply(this, n);
      return r.cache = o.set(i, s), s;
    };

    return r.cache = new (Fn.Cache || Nn)(), r;
  }

  function Bn(t) {
    var e = _typeof(t);

    return !!t && ("object" == e || "function" == e);
  }

  zn.prototype.clear = function () {
    this.__data__ = Wn ? Wn(null) : {};
  }, zn.prototype["delete"] = function (t) {
    return this.has(t) && delete this.__data__[t];
  }, zn.prototype.get = function (t) {
    var e = this.__data__;

    if (Wn) {
      var r = e[t];
      return r === vn ? void 0 : r;
    }

    return Ln.call(e, t) ? e[t] : void 0;
  }, zn.prototype.has = function (t) {
    var e = this.__data__;
    return Wn ? void 0 !== e[t] : Ln.call(e, t);
  }, zn.prototype.set = function (t, e) {
    return this.__data__[t] = Wn && void 0 === e ? vn : e, this;
  }, Cn.prototype.clear = function () {
    this.__data__ = [];
  }, Cn.prototype["delete"] = function (t) {
    var e = this.__data__,
        r = In(e, t);
    return !(r < 0) && (r == e.length - 1 ? e.pop() : jn.call(e, r, 1), !0);
  }, Cn.prototype.get = function (t) {
    var e = this.__data__,
        r = In(e, t);
    return r < 0 ? void 0 : e[r][1];
  }, Cn.prototype.has = function (t) {
    return In(this.__data__, t) > -1;
  }, Cn.prototype.set = function (t, e) {
    var r = this.__data__,
        n = In(r, t);
    return n < 0 ? r.push([t, e]) : r[n][1] = e, this;
  }, Nn.prototype.clear = function () {
    this.__data__ = {
      hash: new zn(),
      map: new (Rn || Cn)(),
      string: new zn()
    };
  }, Nn.prototype["delete"] = function (t) {
    return Pn(this, t)["delete"](t);
  }, Nn.prototype.get = function (t) {
    return Pn(this, t).get(t);
  }, Nn.prototype.has = function (t) {
    return Pn(this, t).has(t);
  }, Nn.prototype.set = function (t, e) {
    return Pn(this, t).set(t, e), this;
  }, Fn.Cache = Nn;

  var Hn = Fn,
      qn = function () {
    if ("undefined" != typeof Map) return Map;

    function t(t, e) {
      var r = -1;
      return t.some(function (t, n) {
        return t[0] === e && (r = n, !0);
      }), r;
    }

    return function () {
      function e() {
        this.__entries__ = [];
      }

      return Object.defineProperty(e.prototype, "size", {
        get: function get() {
          return this.__entries__.length;
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.get = function (e) {
        var r = t(this.__entries__, e),
            n = this.__entries__[r];
        return n && n[1];
      }, e.prototype.set = function (e, r) {
        var n = t(this.__entries__, e);
        ~n ? this.__entries__[n][1] = r : this.__entries__.push([e, r]);
      }, e.prototype["delete"] = function (e) {
        var r = this.__entries__,
            n = t(r, e);
        ~n && r.splice(n, 1);
      }, e.prototype.has = function (e) {
        return !!~t(this.__entries__, e);
      }, e.prototype.clear = function () {
        this.__entries__.splice(0);
      }, e.prototype.forEach = function (t, e) {
        void 0 === e && (e = null);

        for (var r = 0, n = this.__entries__; r < n.length; r++) {
          var i = n[r];
          t.call(e, i[1], i[0]);
        }
      }, e;
    }();
  }(),
      $n = "undefined" != typeof window && "undefined" != typeof document && window.document === document,
      Xn = "undefined" != typeof global && global.Math === Math ? global : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(),
      Yn = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(Xn) : function (t) {
    return setTimeout(function () {
      return t(Date.now());
    }, 1e3 / 60);
  },
      Gn = 2;

  var Un = 20,
      Qn = ["top", "right", "bottom", "left", "width", "height", "size", "weight"],
      Kn = "undefined" != typeof MutationObserver,
      Jn = function () {
    function t() {
      this.connected_ = !1, this.mutationEventsAdded_ = !1, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = function (t, e) {
        var r = !1,
            n = !1,
            i = 0;

        function o() {
          r && (r = !1, t()), n && a();
        }

        function s() {
          Yn(o);
        }

        function a() {
          var t = Date.now();

          if (r) {
            if (t - i < Gn) return;
            n = !0;
          } else r = !0, n = !1, setTimeout(s, e);

          i = t;
        }

        return a;
      }(this.refresh.bind(this), Un);
    }

    return t.prototype.addObserver = function (t) {
      ~this.observers_.indexOf(t) || this.observers_.push(t), this.connected_ || this.connect_();
    }, t.prototype.removeObserver = function (t) {
      var e = this.observers_,
          r = e.indexOf(t);
      ~r && e.splice(r, 1), !e.length && this.connected_ && this.disconnect_();
    }, t.prototype.refresh = function () {
      this.updateObservers_() && this.refresh();
    }, t.prototype.updateObservers_ = function () {
      var t = this.observers_.filter(function (t) {
        return t.gatherActive(), t.hasActive();
      });
      return t.forEach(function (t) {
        return t.broadcastActive();
      }), t.length > 0;
    }, t.prototype.connect_ = function () {
      $n && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), Kn ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, {
        attributes: !0,
        childList: !0,
        characterData: !0,
        subtree: !0
      })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = !0), this.connected_ = !0);
    }, t.prototype.disconnect_ = function () {
      $n && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = !1, this.connected_ = !1);
    }, t.prototype.onTransitionEnd_ = function (t) {
      var e = t.propertyName,
          r = void 0 === e ? "" : e;
      Qn.some(function (t) {
        return !!~r.indexOf(t);
      }) && this.refresh();
    }, t.getInstance = function () {
      return this.instance_ || (this.instance_ = new t()), this.instance_;
    }, t.instance_ = null, t;
  }(),
      Zn = function Zn(t, e) {
    for (var r = 0, n = Object.keys(e); r < n.length; r++) {
      var i = n[r];
      Object.defineProperty(t, i, {
        value: e[i],
        enumerable: !1,
        writable: !1,
        configurable: !0
      });
    }

    return t;
  },
      ti = function ti(t) {
    return t && t.ownerDocument && t.ownerDocument.defaultView || Xn;
  },
      ei = ai(0, 0, 0, 0);

  function ri(t) {
    return parseFloat(t) || 0;
  }

  function ni(t) {
    for (var e = [], r = 1; r < arguments.length; r++) {
      e[r - 1] = arguments[r];
    }

    return e.reduce(function (e, r) {
      return e + ri(t["border-" + r + "-width"]);
    }, 0);
  }

  function ii(t) {
    var e = t.clientWidth,
        r = t.clientHeight;
    if (!e && !r) return ei;

    var n = ti(t).getComputedStyle(t),
        i = function (t) {
      for (var e = {}, r = 0, n = ["top", "right", "bottom", "left"]; r < n.length; r++) {
        var i = n[r],
            o = t["padding-" + i];
        e[i] = ri(o);
      }

      return e;
    }(n),
        o = i.left + i.right,
        s = i.top + i.bottom,
        a = ri(n.width),
        c = ri(n.height);

    if ("border-box" === n.boxSizing && (Math.round(a + o) !== e && (a -= ni(n, "left", "right") + o), Math.round(c + s) !== r && (c -= ni(n, "top", "bottom") + s)), !function (t) {
      return t === ti(t).document.documentElement;
    }(t)) {
      var l = Math.round(a + o) - e,
          u = Math.round(c + s) - r;
      1 !== Math.abs(l) && (a -= l), 1 !== Math.abs(u) && (c -= u);
    }

    return ai(i.left, i.top, a, c);
  }

  var oi = "undefined" != typeof SVGGraphicsElement ? function (t) {
    return t instanceof ti(t).SVGGraphicsElement;
  } : function (t) {
    return t instanceof ti(t).SVGElement && "function" == typeof t.getBBox;
  };

  function si(t) {
    return $n ? oi(t) ? function (t) {
      var e = t.getBBox();
      return ai(0, 0, e.width, e.height);
    }(t) : ii(t) : ei;
  }

  function ai(t, e, r, n) {
    return {
      x: t,
      y: e,
      width: r,
      height: n
    };
  }

  var ci = function () {
    function t(t) {
      this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = ai(0, 0, 0, 0), this.target = t;
    }

    return t.prototype.isActive = function () {
      var t = si(this.target);
      return this.contentRect_ = t, t.width !== this.broadcastWidth || t.height !== this.broadcastHeight;
    }, t.prototype.broadcastRect = function () {
      var t = this.contentRect_;
      return this.broadcastWidth = t.width, this.broadcastHeight = t.height, t;
    }, t;
  }(),
      li = function li(t, e) {
    var r,
        n,
        i,
        o,
        s,
        a,
        c,
        l = (n = (r = e).x, i = r.y, o = r.width, s = r.height, a = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, c = Object.create(a.prototype), Zn(c, {
      x: n,
      y: i,
      width: o,
      height: s,
      top: i,
      right: n + o,
      bottom: s + i,
      left: n
    }), c);
    Zn(this, {
      target: t,
      contentRect: l
    });
  },
      ui = function () {
    function t(t, e, r) {
      if (this.activeObservations_ = [], this.observations_ = new qn(), "function" != typeof t) throw new TypeError("The callback provided as parameter 1 is not a function.");
      this.callback_ = t, this.controller_ = e, this.callbackCtx_ = r;
    }

    return t.prototype.observe = function (t) {
      if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");

      if ("undefined" != typeof Element && Element instanceof Object) {
        if (!(t instanceof ti(t).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var e = this.observations_;
        e.has(t) || (e.set(t, new ci(t)), this.controller_.addObserver(this), this.controller_.refresh());
      }
    }, t.prototype.unobserve = function (t) {
      if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");

      if ("undefined" != typeof Element && Element instanceof Object) {
        if (!(t instanceof ti(t).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var e = this.observations_;
        e.has(t) && (e["delete"](t), e.size || this.controller_.removeObserver(this));
      }
    }, t.prototype.disconnect = function () {
      this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
    }, t.prototype.gatherActive = function () {
      var t = this;
      this.clearActive(), this.observations_.forEach(function (e) {
        e.isActive() && t.activeObservations_.push(e);
      });
    }, t.prototype.broadcastActive = function () {
      if (this.hasActive()) {
        var t = this.callbackCtx_,
            e = this.activeObservations_.map(function (t) {
          return new li(t.target, t.broadcastRect());
        });
        this.callback_.call(t, e, t), this.clearActive();
      }
    }, t.prototype.clearActive = function () {
      this.activeObservations_.splice(0);
    }, t.prototype.hasActive = function () {
      return this.activeObservations_.length > 0;
    }, t;
  }(),
      fi = "undefined" != typeof WeakMap ? new WeakMap() : new qn(),
      hi = function t(e) {
    if (!(this instanceof t)) throw new TypeError("Cannot call a class as a function.");
    if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
    var r = Jn.getInstance(),
        n = new ui(e, r, this);
    fi.set(this, n);
  };

  ["observe", "unobserve", "disconnect"].forEach(function (t) {
    hi.prototype[t] = function () {
      var e;
      return (e = fi.get(this))[t].apply(e, arguments);
    };
  });
  var di = void 0 !== Xn.ResizeObserver ? Xn.ResizeObserver : hi,
      pi = null,
      vi = null;

  function gi() {
    if (null === pi) {
      if ("undefined" == typeof document) return pi = 0;
      var t = document.body,
          e = document.createElement("div");
      e.classList.add("simplebar-hide-scrollbar"), t.appendChild(e);
      var r = e.getBoundingClientRect().right;
      t.removeChild(e), pi = r;
    }

    return pi;
  }

  Yt && window.addEventListener("resize", function () {
    vi !== window.devicePixelRatio && (vi = window.devicePixelRatio, pi = null);
  });

  var yi = function yi(t) {
    return function (e, r, n, i) {
      kt(r);
      var o = Mt(e),
          s = y(o),
          a = st(o.length),
          c = t ? a - 1 : 0,
          l = t ? -1 : 1;
      if (n < 2) for (;;) {
        if (c in s) {
          i = s[c], c += l;
          break;
        }

        if (c += l, t ? c < 0 : a <= c) throw TypeError("Reduce of empty array with no initial value");
      }

      for (; t ? c >= 0 : a > c; c += l) {
        c in s && (i = r(i, s[c], c, o));
      }

      return i;
    };
  },
      bi = {
    left: yi(!1),
    right: yi(!0)
  }.left;

  At({
    target: "Array",
    proto: !0,
    forced: Vt("reduce")
  }, {
    reduce: function reduce(t) {
      return bi(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var mi = R.f,
      xi = Function.prototype,
      Ei = xi.toString,
      wi = /^\s*function ([^ (]*)/;
  !l || "name" in xi || mi(xi, "name", {
    configurable: !0,
    get: function get() {
      try {
        return Ei.call(this).match(wi)[1];
      } catch (t) {
        return "";
      }
    }
  });

  var Oi,
      _i,
      Si = function Si() {
    var t = T(this),
        e = "";
    return t.global && (e += "g"), t.ignoreCase && (e += "i"), t.multiline && (e += "m"), t.dotAll && (e += "s"), t.unicode && (e += "u"), t.sticky && (e += "y"), e;
  },
      Ai = RegExp.prototype.exec,
      ki = String.prototype.replace,
      Li = Ai,
      Mi = (Oi = /a/, _i = /b*/g, Ai.call(Oi, "a"), Ai.call(_i, "a"), 0 !== Oi.lastIndex || 0 !== _i.lastIndex),
      Ti = void 0 !== /()??/.exec("")[1];

  (Mi || Ti) && (Li = function Li(t) {
    var e,
        r,
        n,
        i,
        o = this;
    return Ti && (r = new RegExp("^" + o.source + "$(?!\\s)", Si.call(o))), Mi && (e = o.lastIndex), n = Ai.call(o, t), Mi && n && (o.lastIndex = o.global ? n.index + n[0].length : e), Ti && n && n.length > 1 && ki.call(n[0], r, function () {
      for (i = 1; i < arguments.length - 2; i++) {
        void 0 === arguments[i] && (n[i] = void 0);
      }
    }), n;
  });
  var ji = Li;
  At({
    target: "RegExp",
    proto: !0,
    forced: /./.exec !== ji
  }, {
    exec: ji
  });

  var Ri = zt("species"),
      Wi = !c(function () {
    var t = /./;
    return t.exec = function () {
      var t = [];
      return t.groups = {
        a: "7"
      }, t;
    }, "7" !== "".replace(t, "$<a>");
  }),
      zi = !c(function () {
    var t = /(?:)/,
        e = t.exec;

    t.exec = function () {
      return e.apply(this, arguments);
    };

    var r = "ab".split(t);
    return 2 !== r.length || "a" !== r[0] || "b" !== r[1];
  }),
      Ci = function Ci(t, e, r, n) {
    var i = zt(t),
        o = !c(function () {
      var e = {};
      return e[i] = function () {
        return 7;
      }, 7 != ""[t](e);
    }),
        s = o && !c(function () {
      var e = !1,
          r = /a/;
      return r.exec = function () {
        return e = !0, null;
      }, "split" === t && (r.constructor = {}, r.constructor[Ri] = function () {
        return r;
      }), r[i](""), !e;
    });

    if (!o || !s || "replace" === t && !Wi || "split" === t && !zi) {
      var a = /./[i],
          l = r(i, ""[t], function (t, e, r, n, i) {
        return e.exec === ji ? o && !i ? {
          done: !0,
          value: a.call(e, r, n)
        } : {
          done: !0,
          value: t.call(r, e, n)
        } : {
          done: !1
        };
      }),
          u = l[0],
          f = l[1];
      J(String.prototype, t, u), J(RegExp.prototype, i, 2 == e ? function (t, e) {
        return f.call(t, this, e);
      } : function (t) {
        return f.call(t, this);
      }), n && W(RegExp.prototype[i], "sham", !0);
    }
  },
      Ni = Ue.charAt,
      Ii = function Ii(t, e, r) {
    return e + (r ? Ni(t, e).length : 1);
  },
      Di = function Di(t, e) {
    var r = t.exec;

    if ("function" == typeof r) {
      var n = r.call(t, e);
      if ("object" != _typeof(n)) throw TypeError("RegExp exec method returned something other than an Object or null");
      return n;
    }

    if ("RegExp" !== v(t)) throw TypeError("RegExp#exec called on incompatible receiver");
    return ji.call(t, e);
  };

  Ci("match", 1, function (t, e, r) {
    return [function (e) {
      var r = b(this),
          n = null == e ? void 0 : e[t];
      return void 0 !== n ? n.call(e, r) : new RegExp(e)[t](String(r));
    }, function (t) {
      var n = r(e, t, this);
      if (n.done) return n.value;
      var i = T(t),
          o = String(this);
      if (!i.global) return Di(i, o);
      var s = i.unicode;
      i.lastIndex = 0;

      for (var a, c = [], l = 0; null !== (a = Di(i, o));) {
        var u = String(a[0]);
        c[l] = u, "" === u && (i.lastIndex = Ii(o, st(i.lastIndex), s)), l++;
      }

      return 0 === l ? null : c;
    }];
  });
  var Pi = Math.max,
      Vi = Math.min,
      Fi = Math.floor,
      Bi = /\$([$&'`]|\d\d?|<[^>]*>)/g,
      Hi = /\$([$&'`]|\d\d?)/g;
  Ci("replace", 2, function (t, e, r) {
    return [function (r, n) {
      var i = b(this),
          o = null == r ? void 0 : r[t];
      return void 0 !== o ? o.call(r, i, n) : e.call(String(i), r, n);
    }, function (t, i) {
      var o = r(e, t, this, i);
      if (o.done) return o.value;
      var s = T(t),
          a = String(this),
          c = "function" == typeof i;
      c || (i = String(i));
      var l = s.global;

      if (l) {
        var u = s.unicode;
        s.lastIndex = 0;
      }

      for (var f = [];;) {
        var h = Di(s, a);
        if (null === h) break;
        if (f.push(h), !l) break;
        "" === String(h[0]) && (s.lastIndex = Ii(a, st(s.lastIndex), u));
      }

      for (var d, p = "", v = 0, g = 0; g < f.length; g++) {
        h = f[g];

        for (var y = String(h[0]), b = Pi(Vi(it(h.index), a.length), 0), m = [], x = 1; x < h.length; x++) {
          m.push(void 0 === (d = h[x]) ? d : String(d));
        }

        var E = h.groups;

        if (c) {
          var w = [y].concat(m, b, a);
          void 0 !== E && w.push(E);
          var O = String(i.apply(void 0, w));
        } else O = n(y, a, b, m, E, i);

        b >= v && (p += a.slice(v, b) + O, v = b + y.length);
      }

      return p + a.slice(v);
    }];

    function n(t, r, n, i, o, s) {
      var a = n + t.length,
          c = i.length,
          l = Hi;
      return void 0 !== o && (o = Mt(o), l = Bi), e.call(s, l, function (e, s) {
        var l;

        switch (s.charAt(0)) {
          case "$":
            return "$";

          case "&":
            return t;

          case "`":
            return r.slice(0, n);

          case "'":
            return r.slice(a);

          case "<":
            l = o[s.slice(1, -1)];
            break;

          default:
            var u = +s;
            if (0 === u) return e;

            if (u > c) {
              var f = Fi(u / 10);
              return 0 === f ? e : f <= c ? void 0 === i[f - 1] ? s.charAt(1) : i[f - 1] + s.charAt(1) : e;
            }

            l = i[u - 1];
        }

        return void 0 === l ? "" : l;
      });
    }
  });

  var qi = function qi(t) {
    return Array.prototype.reduce.call(t, function (t, e) {
      var r = e.name.match(/data-simplebar-(.+)/);

      if (r) {
        var n = r[1].replace(/\W+(.)/g, function (t, e) {
          return e.toUpperCase();
        });

        switch (e.value) {
          case "true":
            t[n] = !0;
            break;

          case "false":
            t[n] = !1;
            break;

          case void 0:
            t[n] = !0;
            break;

          default:
            t[n] = e.value;
        }
      }

      return t;
    }, {});
  };

  function $i(t) {
    return t && t.ownerDocument && t.ownerDocument.defaultView ? t.ownerDocument.defaultView : window;
  }

  function Xi(t) {
    return t && t.ownerDocument ? t.ownerDocument : document;
  }

  var Yi = function () {
    function t(e, r) {
      var n = this;
      this.onScroll = function () {
        var t = $i(n.el);
        n.scrollXTicking || (t.requestAnimationFrame(n.scrollX), n.scrollXTicking = !0), n.scrollYTicking || (t.requestAnimationFrame(n.scrollY), n.scrollYTicking = !0);
      }, this.scrollX = function () {
        n.axis.x.isOverflowing && (n.showScrollbar("x"), n.positionScrollbar("x")), n.scrollXTicking = !1;
      }, this.scrollY = function () {
        n.axis.y.isOverflowing && (n.showScrollbar("y"), n.positionScrollbar("y")), n.scrollYTicking = !1;
      }, this.onMouseEnter = function () {
        n.showScrollbar("x"), n.showScrollbar("y");
      }, this.onMouseMove = function (t) {
        n.mouseX = t.clientX, n.mouseY = t.clientY, (n.axis.x.isOverflowing || n.axis.x.forceVisible) && n.onMouseMoveForAxis("x"), (n.axis.y.isOverflowing || n.axis.y.forceVisible) && n.onMouseMoveForAxis("y");
      }, this.onMouseLeave = function () {
        n.onMouseMove.cancel(), (n.axis.x.isOverflowing || n.axis.x.forceVisible) && n.onMouseLeaveForAxis("x"), (n.axis.y.isOverflowing || n.axis.y.forceVisible) && n.onMouseLeaveForAxis("y"), n.mouseX = -1, n.mouseY = -1;
      }, this.onWindowResize = function () {
        n.scrollbarWidth = n.getScrollbarWidth(), n.hideNativeScrollbar();
      }, this.hideScrollbars = function () {
        n.axis.x.track.rect = n.axis.x.track.el.getBoundingClientRect(), n.axis.y.track.rect = n.axis.y.track.el.getBoundingClientRect(), n.isWithinBounds(n.axis.y.track.rect) || (n.axis.y.scrollbar.el.classList.remove(n.classNames.visible), n.axis.y.isVisible = !1), n.isWithinBounds(n.axis.x.track.rect) || (n.axis.x.scrollbar.el.classList.remove(n.classNames.visible), n.axis.x.isVisible = !1);
      }, this.onPointerEvent = function (t) {
        var e, r;
        n.axis.x.track.rect = n.axis.x.track.el.getBoundingClientRect(), n.axis.y.track.rect = n.axis.y.track.el.getBoundingClientRect(), (n.axis.x.isOverflowing || n.axis.x.forceVisible) && (e = n.isWithinBounds(n.axis.x.track.rect)), (n.axis.y.isOverflowing || n.axis.y.forceVisible) && (r = n.isWithinBounds(n.axis.y.track.rect)), (e || r) && (t.preventDefault(), t.stopPropagation(), "mousedown" === t.type && (e && (n.axis.x.scrollbar.rect = n.axis.x.scrollbar.el.getBoundingClientRect(), n.isWithinBounds(n.axis.x.scrollbar.rect) ? n.onDragStart(t, "x") : n.onTrackClick(t, "x")), r && (n.axis.y.scrollbar.rect = n.axis.y.scrollbar.el.getBoundingClientRect(), n.isWithinBounds(n.axis.y.scrollbar.rect) ? n.onDragStart(t, "y") : n.onTrackClick(t, "y"))));
      }, this.drag = function (e) {
        var r = n.axis[n.draggedAxis].track,
            i = r.rect[n.axis[n.draggedAxis].sizeAttr],
            o = n.axis[n.draggedAxis].scrollbar,
            s = n.contentWrapperEl[n.axis[n.draggedAxis].scrollSizeAttr],
            a = parseInt(n.elStyles[n.axis[n.draggedAxis].sizeAttr], 10);
        e.preventDefault(), e.stopPropagation();
        var c = (("y" === n.draggedAxis ? e.pageY : e.pageX) - r.rect[n.axis[n.draggedAxis].offsetAttr] - n.axis[n.draggedAxis].dragOffset) / (i - o.size) * (s - a);
        "x" === n.draggedAxis && (c = n.isRtl && t.getRtlHelpers().isRtlScrollbarInverted ? c - (i + o.size) : c, c = n.isRtl && t.getRtlHelpers().isRtlScrollingInverted ? -c : c), n.contentWrapperEl[n.axis[n.draggedAxis].scrollOffsetAttr] = c;
      }, this.onEndDrag = function (t) {
        var e = Xi(n.el),
            r = $i(n.el);
        t.preventDefault(), t.stopPropagation(), n.el.classList.remove(n.classNames.dragging), e.removeEventListener("mousemove", n.drag, !0), e.removeEventListener("mouseup", n.onEndDrag, !0), n.removePreventClickId = r.setTimeout(function () {
          e.removeEventListener("click", n.preventClick, !0), e.removeEventListener("dblclick", n.preventClick, !0), n.removePreventClickId = null;
        });
      }, this.preventClick = function (t) {
        t.preventDefault(), t.stopPropagation();
      }, this.el = e, this.minScrollbarWidth = 20, this.options = Object.assign({}, t.defaultOptions, {}, r), this.classNames = Object.assign({}, t.defaultOptions.classNames, {}, this.options.classNames), this.axis = {
        x: {
          scrollOffsetAttr: "scrollLeft",
          sizeAttr: "width",
          scrollSizeAttr: "scrollWidth",
          offsetSizeAttr: "offsetWidth",
          offsetAttr: "left",
          overflowAttr: "overflowX",
          dragOffset: 0,
          isOverflowing: !0,
          isVisible: !1,
          forceVisible: !1,
          track: {},
          scrollbar: {}
        },
        y: {
          scrollOffsetAttr: "scrollTop",
          sizeAttr: "height",
          scrollSizeAttr: "scrollHeight",
          offsetSizeAttr: "offsetHeight",
          offsetAttr: "top",
          overflowAttr: "overflowY",
          dragOffset: 0,
          isOverflowing: !0,
          isVisible: !1,
          forceVisible: !1,
          track: {},
          scrollbar: {}
        }
      }, this.removePreventClickId = null, t.instances.has(this.el) || (this.recalculate = Gr(this.recalculate.bind(this), 64), this.onMouseMove = Gr(this.onMouseMove.bind(this), 64), this.hideScrollbars = dn(this.hideScrollbars.bind(this), this.options.timeout), this.onWindowResize = dn(this.onWindowResize.bind(this), 64, {
        leading: !0
      }), t.getRtlHelpers = Hn(t.getRtlHelpers), this.init());
    }

    t.getRtlHelpers = function () {
      var e = document.createElement("div");
      e.innerHTML = '<div class="hs-dummy-scrollbar-size"><div style="height: 200%; width: 200%; margin: 10px 0;"></div></div>';
      var r = e.firstElementChild;
      document.body.appendChild(r);
      var n = r.firstElementChild;
      r.scrollLeft = 0;
      var i = t.getOffset(r),
          o = t.getOffset(n);
      r.scrollLeft = 999;
      var s = t.getOffset(n);
      return {
        isRtlScrollingInverted: i.left !== o.left && o.left - s.left != 0,
        isRtlScrollbarInverted: i.left !== o.left
      };
    }, t.getOffset = function (t) {
      var e = t.getBoundingClientRect(),
          r = Xi(t),
          n = $i(t);
      return {
        top: e.top + (n.pageYOffset || r.documentElement.scrollTop),
        left: e.left + (n.pageXOffset || r.documentElement.scrollLeft)
      };
    };
    var e = t.prototype;
    return e.init = function () {
      t.instances.set(this.el, this), Yt && (this.initDOM(), this.scrollbarWidth = this.getScrollbarWidth(), this.recalculate(), this.initListeners());
    }, e.initDOM = function () {
      var t = this;
      Xi(this.el);
      if (Array.prototype.filter.call(this.el.children, function (e) {
        return e.classList.contains(t.classNames.wrapper);
      }).length) this.wrapperEl = this.el.querySelector("." + this.classNames.wrapper), this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector("." + this.classNames.contentWrapper), this.contentEl = this.options.contentNode || this.el.querySelector("." + this.classNames.contentEl), this.offsetEl = this.el.querySelector("." + this.classNames.offset), this.maskEl = this.el.querySelector("." + this.classNames.mask), this.placeholderEl = this.findChild(this.wrapperEl, "." + this.classNames.placeholder), this.heightAutoObserverWrapperEl = this.el.querySelector("." + this.classNames.heightAutoObserverWrapperEl), this.heightAutoObserverEl = this.el.querySelector("." + this.classNames.heightAutoObserverEl), this.axis.x.track.el = this.findChild(this.el, "." + this.classNames.track + "." + this.classNames.horizontal), this.axis.y.track.el = this.findChild(this.el, "." + this.classNames.track + "." + this.classNames.vertical);else {
        for (this.wrapperEl = document.createElement("div"), this.contentWrapperEl = document.createElement("div"), this.offsetEl = document.createElement("div"), this.maskEl = document.createElement("div"), this.contentEl = document.createElement("div"), this.placeholderEl = document.createElement("div"), this.heightAutoObserverWrapperEl = document.createElement("div"), this.heightAutoObserverEl = document.createElement("div"), this.wrapperEl.classList.add(this.classNames.wrapper), this.contentWrapperEl.classList.add(this.classNames.contentWrapper), this.offsetEl.classList.add(this.classNames.offset), this.maskEl.classList.add(this.classNames.mask), this.contentEl.classList.add(this.classNames.contentEl), this.placeholderEl.classList.add(this.classNames.placeholder), this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl), this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl); this.el.firstChild;) {
          this.contentEl.appendChild(this.el.firstChild);
        }

        this.contentWrapperEl.appendChild(this.contentEl), this.offsetEl.appendChild(this.contentWrapperEl), this.maskEl.appendChild(this.offsetEl), this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl), this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl), this.wrapperEl.appendChild(this.maskEl), this.wrapperEl.appendChild(this.placeholderEl), this.el.appendChild(this.wrapperEl);
      }

      if (!this.axis.x.track.el || !this.axis.y.track.el) {
        var e = document.createElement("div"),
            r = document.createElement("div");
        e.classList.add(this.classNames.track), r.classList.add(this.classNames.scrollbar), e.appendChild(r), this.axis.x.track.el = e.cloneNode(!0), this.axis.x.track.el.classList.add(this.classNames.horizontal), this.axis.y.track.el = e.cloneNode(!0), this.axis.y.track.el.classList.add(this.classNames.vertical), this.el.appendChild(this.axis.x.track.el), this.el.appendChild(this.axis.y.track.el);
      }

      this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector("." + this.classNames.scrollbar), this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector("." + this.classNames.scrollbar), this.options.autoHide || (this.axis.x.scrollbar.el.classList.add(this.classNames.visible), this.axis.y.scrollbar.el.classList.add(this.classNames.visible)), this.el.setAttribute("data-simplebar", "init");
    }, e.initListeners = function () {
      var t = this,
          e = $i(this.el);
      this.options.autoHide && this.el.addEventListener("mouseenter", this.onMouseEnter), ["mousedown", "click", "dblclick"].forEach(function (e) {
        t.el.addEventListener(e, t.onPointerEvent, !0);
      }), ["touchstart", "touchend", "touchmove"].forEach(function (e) {
        t.el.addEventListener(e, t.onPointerEvent, {
          capture: !0,
          passive: !0
        });
      }), this.el.addEventListener("mousemove", this.onMouseMove), this.el.addEventListener("mouseleave", this.onMouseLeave), this.contentWrapperEl.addEventListener("scroll", this.onScroll), e.addEventListener("resize", this.onWindowResize);
      var r = !1,
          n = e.ResizeObserver || di;
      this.resizeObserver = new n(function () {
        r && t.recalculate();
      }), this.resizeObserver.observe(this.el), this.resizeObserver.observe(this.contentEl), e.requestAnimationFrame(function () {
        r = !0;
      }), this.mutationObserver = new e.MutationObserver(this.recalculate), this.mutationObserver.observe(this.contentEl, {
        childList: !0,
        subtree: !0,
        characterData: !0
      });
    }, e.recalculate = function () {
      var t = $i(this.el);
      this.elStyles = t.getComputedStyle(this.el), this.isRtl = "rtl" === this.elStyles.direction;
      var e = this.heightAutoObserverEl.offsetHeight <= 1,
          r = this.heightAutoObserverEl.offsetWidth <= 1,
          n = this.contentEl.offsetWidth,
          i = this.contentWrapperEl.offsetWidth,
          o = this.elStyles.overflowX,
          s = this.elStyles.overflowY;
      this.contentEl.style.padding = this.elStyles.paddingTop + " " + this.elStyles.paddingRight + " " + this.elStyles.paddingBottom + " " + this.elStyles.paddingLeft, this.wrapperEl.style.margin = "-" + this.elStyles.paddingTop + " -" + this.elStyles.paddingRight + " -" + this.elStyles.paddingBottom + " -" + this.elStyles.paddingLeft;
      var a = this.contentEl.scrollHeight,
          c = this.contentEl.scrollWidth;
      this.contentWrapperEl.style.height = e ? "auto" : "100%", this.placeholderEl.style.width = r ? n + "px" : "auto", this.placeholderEl.style.height = a + "px";
      var l = this.contentWrapperEl.offsetHeight;
      this.axis.x.isOverflowing = c > n, this.axis.y.isOverflowing = a > l, this.axis.x.isOverflowing = "hidden" !== o && this.axis.x.isOverflowing, this.axis.y.isOverflowing = "hidden" !== s && this.axis.y.isOverflowing, this.axis.x.forceVisible = "x" === this.options.forceVisible || !0 === this.options.forceVisible, this.axis.y.forceVisible = "y" === this.options.forceVisible || !0 === this.options.forceVisible, this.hideNativeScrollbar();
      var u = this.axis.x.isOverflowing ? this.scrollbarWidth : 0,
          f = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;
      this.axis.x.isOverflowing = this.axis.x.isOverflowing && c > i - f, this.axis.y.isOverflowing = this.axis.y.isOverflowing && a > l - u, this.axis.x.scrollbar.size = this.getScrollbarSize("x"), this.axis.y.scrollbar.size = this.getScrollbarSize("y"), this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + "px", this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + "px", this.positionScrollbar("x"), this.positionScrollbar("y"), this.toggleTrackVisibility("x"), this.toggleTrackVisibility("y");
    }, e.getScrollbarSize = function (t) {
      if (void 0 === t && (t = "y"), !this.axis[t].isOverflowing) return 0;
      var e,
          r = this.contentEl[this.axis[t].scrollSizeAttr],
          n = this.axis[t].track.el[this.axis[t].offsetSizeAttr],
          i = n / r;
      return e = Math.max(~~(i * n), this.options.scrollbarMinSize), this.options.scrollbarMaxSize && (e = Math.min(e, this.options.scrollbarMaxSize)), e;
    }, e.positionScrollbar = function (e) {
      if (void 0 === e && (e = "y"), this.axis[e].isOverflowing) {
        var r = this.contentWrapperEl[this.axis[e].scrollSizeAttr],
            n = this.axis[e].track.el[this.axis[e].offsetSizeAttr],
            i = parseInt(this.elStyles[this.axis[e].sizeAttr], 10),
            o = this.axis[e].scrollbar,
            s = this.contentWrapperEl[this.axis[e].scrollOffsetAttr],
            a = (s = "x" === e && this.isRtl && t.getRtlHelpers().isRtlScrollingInverted ? -s : s) / (r - i),
            c = ~~((n - o.size) * a);
        c = "x" === e && this.isRtl && t.getRtlHelpers().isRtlScrollbarInverted ? c + (n - o.size) : c, o.el.style.transform = "x" === e ? "translate3d(" + c + "px, 0, 0)" : "translate3d(0, " + c + "px, 0)";
      }
    }, e.toggleTrackVisibility = function (t) {
      void 0 === t && (t = "y");
      var e = this.axis[t].track.el,
          r = this.axis[t].scrollbar.el;
      this.axis[t].isOverflowing || this.axis[t].forceVisible ? (e.style.visibility = "visible", this.contentWrapperEl.style[this.axis[t].overflowAttr] = "scroll") : (e.style.visibility = "hidden", this.contentWrapperEl.style[this.axis[t].overflowAttr] = "hidden"), this.axis[t].isOverflowing ? r.style.display = "block" : r.style.display = "none";
    }, e.hideNativeScrollbar = function () {
      this.offsetEl.style[this.isRtl ? "left" : "right"] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? "-" + this.scrollbarWidth + "px" : 0, this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? "-" + this.scrollbarWidth + "px" : 0;
    }, e.onMouseMoveForAxis = function (t) {
      void 0 === t && (t = "y"), this.axis[t].track.rect = this.axis[t].track.el.getBoundingClientRect(), this.axis[t].scrollbar.rect = this.axis[t].scrollbar.el.getBoundingClientRect(), this.isWithinBounds(this.axis[t].scrollbar.rect) ? this.axis[t].scrollbar.el.classList.add(this.classNames.hover) : this.axis[t].scrollbar.el.classList.remove(this.classNames.hover), this.isWithinBounds(this.axis[t].track.rect) ? (this.showScrollbar(t), this.axis[t].track.el.classList.add(this.classNames.hover)) : this.axis[t].track.el.classList.remove(this.classNames.hover);
    }, e.onMouseLeaveForAxis = function (t) {
      void 0 === t && (t = "y"), this.axis[t].track.el.classList.remove(this.classNames.hover), this.axis[t].scrollbar.el.classList.remove(this.classNames.hover);
    }, e.showScrollbar = function (t) {
      void 0 === t && (t = "y");
      var e = this.axis[t].scrollbar.el;
      this.axis[t].isVisible || (e.classList.add(this.classNames.visible), this.axis[t].isVisible = !0), this.options.autoHide && this.hideScrollbars();
    }, e.onDragStart = function (t, e) {
      void 0 === e && (e = "y");
      var r = Xi(this.el),
          n = $i(this.el),
          i = this.axis[e].scrollbar,
          o = "y" === e ? t.pageY : t.pageX;
      this.axis[e].dragOffset = o - i.rect[this.axis[e].offsetAttr], this.draggedAxis = e, this.el.classList.add(this.classNames.dragging), r.addEventListener("mousemove", this.drag, !0), r.addEventListener("mouseup", this.onEndDrag, !0), null === this.removePreventClickId ? (r.addEventListener("click", this.preventClick, !0), r.addEventListener("dblclick", this.preventClick, !0)) : (n.clearTimeout(this.removePreventClickId), this.removePreventClickId = null);
    }, e.onTrackClick = function (t, e) {
      var r = this;

      if (void 0 === e && (e = "y"), this.options.clickOnTrack) {
        var n = $i(this.el);
        this.axis[e].scrollbar.rect = this.axis[e].scrollbar.el.getBoundingClientRect();
        var i = this.axis[e].scrollbar.rect[this.axis[e].offsetAttr],
            o = parseInt(this.elStyles[this.axis[e].sizeAttr], 10),
            s = this.contentWrapperEl[this.axis[e].scrollOffsetAttr],
            a = ("y" === e ? this.mouseY - i : this.mouseX - i) < 0 ? -1 : 1,
            c = -1 === a ? s - o : s + o;
        !function t() {
          var i, o;
          -1 === a ? s > c && (s -= 40, r.contentWrapperEl.scrollTo(((i = {})[r.axis[e].offsetAttr] = s, i)), n.requestAnimationFrame(t)) : s < c && (s += 40, r.contentWrapperEl.scrollTo(((o = {})[r.axis[e].offsetAttr] = s, o)), n.requestAnimationFrame(t));
        }();
      }
    }, e.getContentElement = function () {
      return this.contentEl;
    }, e.getScrollElement = function () {
      return this.contentWrapperEl;
    }, e.getScrollbarWidth = function () {
      try {
        return "none" === getComputedStyle(this.contentWrapperEl, "::-webkit-scrollbar").display || "scrollbarWidth" in document.documentElement.style || "-ms-overflow-style" in document.documentElement.style ? 0 : gi();
      } catch (t) {
        return gi();
      }
    }, e.removeListeners = function () {
      var t = this,
          e = $i(this.el);
      this.options.autoHide && this.el.removeEventListener("mouseenter", this.onMouseEnter), ["mousedown", "click", "dblclick"].forEach(function (e) {
        t.el.removeEventListener(e, t.onPointerEvent, !0);
      }), ["touchstart", "touchend", "touchmove"].forEach(function (e) {
        t.el.removeEventListener(e, t.onPointerEvent, {
          capture: !0,
          passive: !0
        });
      }), this.el.removeEventListener("mousemove", this.onMouseMove), this.el.removeEventListener("mouseleave", this.onMouseLeave), this.contentWrapperEl.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onWindowResize), this.mutationObserver.disconnect(), this.resizeObserver.disconnect(), this.recalculate.cancel(), this.onMouseMove.cancel(), this.hideScrollbars.cancel(), this.onWindowResize.cancel();
    }, e.unMount = function () {
      this.removeListeners(), t.instances["delete"](this.el);
    }, e.isWithinBounds = function (t) {
      return this.mouseX >= t.left && this.mouseX <= t.left + t.width && this.mouseY >= t.top && this.mouseY <= t.top + t.height;
    }, e.findChild = function (t, e) {
      var r = t.matches || t.webkitMatchesSelector || t.mozMatchesSelector || t.msMatchesSelector;
      return Array.prototype.filter.call(t.children, function (t) {
        return r.call(t, e);
      })[0];
    }, t;
  }();

  return Yi.defaultOptions = {
    autoHide: !0,
    forceVisible: !1,
    clickOnTrack: !0,
    classNames: {
      contentEl: "simplebar-content",
      contentWrapper: "simplebar-content-wrapper",
      offset: "simplebar-offset",
      mask: "simplebar-mask",
      wrapper: "simplebar-wrapper",
      placeholder: "simplebar-placeholder",
      scrollbar: "simplebar-scrollbar",
      track: "simplebar-track",
      heightAutoObserverWrapperEl: "simplebar-height-auto-observer-wrapper",
      heightAutoObserverEl: "simplebar-height-auto-observer",
      visible: "simplebar-visible",
      horizontal: "simplebar-horizontal",
      vertical: "simplebar-vertical",
      hover: "simplebar-hover",
      dragging: "simplebar-dragging"
    },
    scrollbarMinSize: 25,
    scrollbarMaxSize: 0,
    timeout: 1e3
  }, Yi.instances = new WeakMap(), Yi.initDOMLoadedElements = function () {
    document.removeEventListener("DOMContentLoaded", this.initDOMLoadedElements), window.removeEventListener("load", this.initDOMLoadedElements), Array.prototype.forEach.call(document.querySelectorAll('[data-simplebar]:not([data-simplebar="init"])'), function (t) {
      Yi.instances.has(t) || new Yi(t, qi(t.attributes));
    });
  }, Yi.removeObserver = function () {
    this.globalObserver.disconnect();
  }, Yi.initHtmlApi = function () {
    this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this), "undefined" != typeof MutationObserver && (this.globalObserver = new MutationObserver(Yi.handleMutations), this.globalObserver.observe(document, {
      childList: !0,
      subtree: !0
    })), "complete" === document.readyState || "loading" !== document.readyState && !document.documentElement.doScroll ? window.setTimeout(this.initDOMLoadedElements) : (document.addEventListener("DOMContentLoaded", this.initDOMLoadedElements), window.addEventListener("load", this.initDOMLoadedElements));
  }, Yi.handleMutations = function (t) {
    t.forEach(function (t) {
      Array.prototype.forEach.call(t.addedNodes, function (t) {
        1 === t.nodeType && (t.hasAttribute("data-simplebar") ? !Yi.instances.has(t) && new Yi(t, qi(t.attributes)) : Array.prototype.forEach.call(t.querySelectorAll('[data-simplebar]:not([data-simplebar="init"])'), function (t) {
          !Yi.instances.has(t) && new Yi(t, qi(t.attributes));
        }));
      }), Array.prototype.forEach.call(t.removedNodes, function (t) {
        1 === t.nodeType && (t.hasAttribute('[data-simplebar="init"]') ? Yi.instances.has(t) && Yi.instances.get(t).unMount() : Array.prototype.forEach.call(t.querySelectorAll('[data-simplebar="init"]'), function (t) {
          Yi.instances.has(t) && Yi.instances.get(t).unMount();
        }));
      });
    });
  }, Yi.getOptions = qi, Yt && Yi.initHtmlApi(), Yi;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ 0:
/*!*******************************************!*\
  !*** multi ./resources/js/admin/admin.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! f:\laragon\www\Laravel-Advanced-Blog\resources\js\admin\admin.js */"./resources/js/admin/admin.js");


/***/ })

/******/ });